
butterfly-slcan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  20000000  080048f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000016b8  200001cc  08004ac4  000201cc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001884  08004ac4  00021884  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b3c1  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004150  00000000  00000000  0003b5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007ec0  00000000  00000000  0003f70d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e80  00000000  00000000  000475d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001298  00000000  00000000  00048450  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000785d  00000000  00000000  000496e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000507f  00000000  00000000  00050f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00055fc4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000276c  00000000  00000000  00056040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047f0 	.word	0x080047f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	080047f0 	.word	0x080047f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <HAL_InitTick+0x2c>)
{
 8000284:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000290:	f000 fb6e 	bl	8000970 <HAL_SYSTICK_Config>
 8000294:	4604      	mov	r4, r0
 8000296:	b938      	cbnz	r0, 80002a8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000298:	4602      	mov	r2, r0
 800029a:	4629      	mov	r1, r5
 800029c:	f04f 30ff 	mov.w	r0, #4294967295
 80002a0:	f000 fb26 	bl	80008f0 <HAL_NVIC_SetPriority>
 80002a4:	4620      	mov	r0, r4
 80002a6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80002a8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80002aa:	bd38      	pop	{r3, r4, r5, pc}
 80002ac:	20000110 	.word	0x20000110

080002b0 <HAL_Init>:
{
 80002b0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b2:	2003      	movs	r0, #3
 80002b4:	f000 fb0a 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80002b8:	2000      	movs	r0, #0
 80002ba:	f7ff ffe1 	bl	8000280 <HAL_InitTick>
 80002be:	4604      	mov	r4, r0
 80002c0:	b918      	cbnz	r0, 80002ca <HAL_Init+0x1a>
    HAL_MspInit();
 80002c2:	f003 fb35 	bl	8003930 <HAL_MspInit>
}
 80002c6:	4620      	mov	r0, r4
 80002c8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80002ca:	2401      	movs	r4, #1
 80002cc:	e7fb      	b.n	80002c6 <HAL_Init+0x16>
	...

080002d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <HAL_IncTick+0xc>)
 80002d2:	6813      	ldr	r3, [r2, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	20000418 	.word	0x20000418

080002e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002e0:	4b01      	ldr	r3, [pc, #4]	; (80002e8 <HAL_GetTick+0x8>)
 80002e2:	6818      	ldr	r0, [r3, #0]
}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000418 	.word	0x20000418

080002ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80002ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80002ee:	4604      	mov	r4, r0
 80002f0:	2800      	cmp	r0, #0
 80002f2:	d06e      	beq.n	80003d2 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80002f4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80002f8:	b90b      	cbnz	r3, 80002fe <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80002fa:	f003 fb31 	bl	8003960 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002fe:	6822      	ldr	r2, [r4, #0]
 8000300:	6813      	ldr	r3, [r2, #0]
 8000302:	f023 0302 	bic.w	r3, r3, #2
 8000306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000308:	f7ff ffea 	bl	80002e0 <HAL_GetTick>
 800030c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800030e:	6823      	ldr	r3, [r4, #0]
 8000310:	685a      	ldr	r2, [r3, #4]
 8000312:	0791      	lsls	r1, r2, #30
 8000314:	d451      	bmi.n	80003ba <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	f042 0201 	orr.w	r2, r2, #1
 800031c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000324:	6823      	ldr	r3, [r4, #0]
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	07d2      	lsls	r2, r2, #31
 800032a:	d554      	bpl.n	80003d6 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800032c:	7e22      	ldrb	r2, [r4, #24]
 800032e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	bf0c      	ite	eq
 8000334:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000338:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800033c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033e:	7e62      	ldrb	r2, [r4, #25]
 8000340:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	bf0c      	ite	eq
 8000346:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800034a:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800034e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000350:	7ea2      	ldrb	r2, [r4, #26]
 8000352:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	bf0c      	ite	eq
 8000358:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800035c:	f022 0220 	bicne.w	r2, r2, #32
 8000360:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000362:	7ee2      	ldrb	r2, [r4, #27]
 8000364:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	bf0c      	ite	eq
 800036a:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800036e:	f042 0210 	orrne.w	r2, r2, #16
 8000372:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000374:	7f22      	ldrb	r2, [r4, #28]
 8000376:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	bf0c      	ite	eq
 800037c:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000380:	f022 0208 	bicne.w	r2, r2, #8
 8000384:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000386:	7f62      	ldrb	r2, [r4, #29]
 8000388:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	bf0c      	ite	eq
 800038e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000392:	f022 0204 	bicne.w	r2, r2, #4
 8000396:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000398:	68e1      	ldr	r1, [r4, #12]
 800039a:	68a2      	ldr	r2, [r4, #8]
 800039c:	430a      	orrs	r2, r1
 800039e:	6921      	ldr	r1, [r4, #16]
 80003a0:	430a      	orrs	r2, r1
 80003a2:	6961      	ldr	r1, [r4, #20]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	6861      	ldr	r1, [r4, #4]
 80003a8:	3901      	subs	r1, #1
 80003aa:	430a      	orrs	r2, r1
 80003ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80003ae:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80003b0:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80003b2:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80003b4:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80003b8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80003ba:	f7ff ff91 	bl	80002e0 <HAL_GetTick>
 80003be:	1b40      	subs	r0, r0, r5
 80003c0:	280a      	cmp	r0, #10
 80003c2:	d9a4      	bls.n	800030e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80003c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80003c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ca:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80003cc:	2305      	movs	r3, #5
 80003ce:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80003d2:	2001      	movs	r0, #1
}
 80003d4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80003d6:	f7ff ff83 	bl	80002e0 <HAL_GetTick>
 80003da:	1b40      	subs	r0, r0, r5
 80003dc:	280a      	cmp	r0, #10
 80003de:	d9a1      	bls.n	8000324 <HAL_CAN_Init+0x38>
 80003e0:	e7f0      	b.n	80003c4 <HAL_CAN_Init+0xd8>

080003e2 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80003e2:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80003e6:	3b01      	subs	r3, #1
 80003e8:	2b01      	cmp	r3, #1
{
 80003ea:	b570      	push	{r4, r5, r6, lr}
  if ((state == HAL_CAN_STATE_READY) ||
 80003ec:	d85f      	bhi.n	80004ae <HAL_CAN_ConfigFilter+0xcc>
  CAN_TypeDef *can_ip = hcan->Instance;
 80003ee:	6803      	ldr	r3, [r0, #0]
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80003f0:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80003f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003f6:	f042 0201 	orr.w	r2, r2, #1
 80003fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80003fe:	2401      	movs	r4, #1
 8000400:	f000 021f 	and.w	r2, r0, #31

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000404:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000408:	fa04 f202 	lsl.w	r2, r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800040c:	43d4      	mvns	r4, r2
 800040e:	4025      	ands	r5, r4
 8000410:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000414:	69cd      	ldr	r5, [r1, #28]
 8000416:	bb85      	cbnz	r5, 800047a <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000418:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800041c:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800041e:	4025      	ands	r5, r4
 8000420:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000424:	888d      	ldrh	r5, [r1, #4]
 8000426:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800042a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800042e:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000432:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000434:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000436:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800043a:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800043e:	6988      	ldr	r0, [r1, #24]
 8000440:	bb68      	cbnz	r0, 800049e <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000442:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000446:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000448:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800044c:	6908      	ldr	r0, [r1, #16]
 800044e:	bb50      	cbnz	r0, 80004a6 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000450:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000454:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000456:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800045a:	6a09      	ldr	r1, [r1, #32]
 800045c:	2901      	cmp	r1, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800045e:	bf02      	ittt	eq
 8000460:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8000464:	430a      	orreq	r2, r1
 8000466:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800046a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800046e:	f022 0201 	bic.w	r2, r2, #1
 8000472:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000476:	2000      	movs	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800047a:	2d01      	cmp	r5, #1
 800047c:	d1df      	bne.n	800043e <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800047e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000482:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000484:	4315      	orrs	r5, r2
 8000486:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800048a:	888d      	ldrh	r5, [r1, #4]
 800048c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000490:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000494:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000498:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800049a:	898d      	ldrh	r5, [r1, #12]
 800049c:	e7cb      	b.n	8000436 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800049e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80004a2:	4310      	orrs	r0, r2
 80004a4:	e7d0      	b.n	8000448 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80004a6:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80004aa:	4310      	orrs	r0, r2
 80004ac:	e7d3      	b.n	8000456 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80004ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004b4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80004b6:	2001      	movs	r0, #1
  }
}
 80004b8:	bd70      	pop	{r4, r5, r6, pc}

080004ba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80004ba:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80004bc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80004c0:	2b01      	cmp	r3, #1
{
 80004c2:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80004c4:	d11f      	bne.n	8000506 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80004c6:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80004c8:	2302      	movs	r3, #2
 80004ca:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80004ce:	6813      	ldr	r3, [r2, #0]
 80004d0:	f023 0301 	bic.w	r3, r3, #1
 80004d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80004d6:	f7ff ff03 	bl	80002e0 <HAL_GetTick>
 80004da:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80004dc:	6823      	ldr	r3, [r4, #0]
 80004de:	6858      	ldr	r0, [r3, #4]
 80004e0:	f010 0001 	ands.w	r0, r0, #1
 80004e4:	d101      	bne.n	80004ea <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004e6:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80004e8:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80004ea:	f7ff fef9 	bl	80002e0 <HAL_GetTick>
 80004ee:	1b40      	subs	r0, r0, r5
 80004f0:	280a      	cmp	r0, #10
 80004f2:	d9f3      	bls.n	80004dc <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80004f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80004f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fa:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80004fc:	2305      	movs	r3, #5
 80004fe:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8000502:	2001      	movs	r0, #1
  }
}
 8000504:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000506:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800050c:	6243      	str	r3, [r0, #36]	; 0x24
 800050e:	e7f8      	b.n	8000502 <HAL_CAN_Start+0x48>

08000510 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000512:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000516:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000518:	3d01      	subs	r5, #1
 800051a:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800051c:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800051e:	d840      	bhi.n	80005a2 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000520:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000524:	d039      	beq.n	800059a <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000526:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800052a:	2c03      	cmp	r4, #3
 800052c:	f04f 0501 	mov.w	r5, #1
 8000530:	d105      	bne.n	800053e <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000532:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000534:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000538:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800053a:	2001      	movs	r0, #1
  }
}
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800053e:	40a5      	lsls	r5, r4
 8000540:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000542:	6888      	ldr	r0, [r1, #8]
 8000544:	68cf      	ldr	r7, [r1, #12]
 8000546:	f104 0318 	add.w	r3, r4, #24
 800054a:	bb08      	cbnz	r0, 8000590 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800054c:	6808      	ldr	r0, [r1, #0]
 800054e:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	0124      	lsls	r4, r4, #4
 8000556:	50f0      	str	r0, [r6, r3]
 8000558:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800055a:	6908      	ldr	r0, [r1, #16]
      if (pHeader->TransmitGlobalTime == ENABLE)
 800055c:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800055e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000562:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000564:	bf02      	ittt	eq
 8000566:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 800056a:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800056e:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000572:	4434      	add	r4, r6
 8000574:	6851      	ldr	r1, [r2, #4]
 8000576:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800057a:	6812      	ldr	r2, [r2, #0]
 800057c:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000580:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000584:	f042 0201 	orr.w	r2, r2, #1
 8000588:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 800058c:	2000      	movs	r0, #0
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000590:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000592:	4338      	orrs	r0, r7
 8000594:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000598:	e7db      	b.n	8000552 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800059a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800059c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a0:	e7ca      	b.n	8000538 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a8:	e7c6      	b.n	8000538 <HAL_CAN_AddTxMessage+0x28>

080005aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80005aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80005ac:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80005b0:	3c01      	subs	r4, #1
 80005b2:	2c01      	cmp	r4, #1
 80005b4:	d86b      	bhi.n	800068e <HAL_CAN_GetRxMessage+0xe4>
 80005b6:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80005b8:	b941      	cbnz	r1, 80005cc <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80005ba:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80005bc:	07a4      	lsls	r4, r4, #30
 80005be:	d107      	bne.n	80005d0 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80005c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c6:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
  }
}
 80005ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80005cc:	6934      	ldr	r4, [r6, #16]
 80005ce:	e7f5      	b.n	80005bc <HAL_CAN_GetRxMessage+0x12>
 80005d0:	010c      	lsls	r4, r1, #4
 80005d2:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80005d4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80005d8:	f007 0704 	and.w	r7, r7, #4
 80005dc:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80005de:	2f00      	cmp	r7, #0
 80005e0:	d14b      	bne.n	800067a <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80005e2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80005e6:	0d7f      	lsrs	r7, r7, #21
 80005e8:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80005ea:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80005ee:	f3c7 0740 	ubfx	r7, r7, #1, #1
 80005f2:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80005f4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80005f8:	f007 070f 	and.w	r7, r7, #15
 80005fc:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005fe:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000602:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000606:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000608:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800060c:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800060e:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000610:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000612:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000616:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000618:	6802      	ldr	r2, [r0, #0]
 800061a:	4422      	add	r2, r4
 800061c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000620:	0a12      	lsrs	r2, r2, #8
 8000622:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000624:	6802      	ldr	r2, [r0, #0]
 8000626:	4422      	add	r2, r4
 8000628:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800062c:	0c12      	lsrs	r2, r2, #16
 800062e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000630:	6802      	ldr	r2, [r0, #0]
 8000632:	4422      	add	r2, r4
 8000634:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000638:	0e12      	lsrs	r2, r2, #24
 800063a:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800063c:	6802      	ldr	r2, [r0, #0]
 800063e:	4422      	add	r2, r4
 8000640:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000644:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000646:	6802      	ldr	r2, [r0, #0]
 8000648:	4422      	add	r2, r4
 800064a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800064e:	0a12      	lsrs	r2, r2, #8
 8000650:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000652:	6802      	ldr	r2, [r0, #0]
 8000654:	4422      	add	r2, r4
 8000656:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800065a:	0c12      	lsrs	r2, r2, #16
 800065c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800065e:	6802      	ldr	r2, [r0, #0]
 8000660:	4414      	add	r4, r2
 8000662:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000666:	0e12      	lsrs	r2, r2, #24
 8000668:	71da      	strb	r2, [r3, #7]
 800066a:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800066c:	b951      	cbnz	r1, 8000684 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	f042 0220 	orr.w	r2, r2, #32
 8000674:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000676:	2000      	movs	r0, #0
 8000678:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800067a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800067e:	08ff      	lsrs	r7, r7, #3
 8000680:	6057      	str	r7, [r2, #4]
 8000682:	e7b2      	b.n	80005ea <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000684:	691a      	ldr	r2, [r3, #16]
 8000686:	f042 0220 	orr.w	r2, r2, #32
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	e7f3      	b.n	8000676 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800068e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000694:	e797      	b.n	80005c6 <HAL_CAN_GetRxMessage+0x1c>

08000696 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000696:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800069a:	3b01      	subs	r3, #1
 800069c:	2b01      	cmp	r3, #1
 800069e:	d805      	bhi.n	80006ac <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80006a0:	6802      	ldr	r2, [r0, #0]
 80006a2:	6953      	ldr	r3, [r2, #20]
 80006a4:	4319      	orrs	r1, r3
 80006a6:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 80006a8:	2000      	movs	r0, #0
 80006aa:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80006ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80006ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80006b4:	2001      	movs	r0, #1
  }
}
 80006b6:	4770      	bx	lr

080006b8 <HAL_CAN_TxMailbox0CompleteCallback>:
 80006b8:	4770      	bx	lr

080006ba <HAL_CAN_TxMailbox1CompleteCallback>:
 80006ba:	4770      	bx	lr

080006bc <HAL_CAN_TxMailbox2CompleteCallback>:
 80006bc:	4770      	bx	lr

080006be <HAL_CAN_TxMailbox0AbortCallback>:
 80006be:	4770      	bx	lr

080006c0 <HAL_CAN_TxMailbox1AbortCallback>:
 80006c0:	4770      	bx	lr

080006c2 <HAL_CAN_TxMailbox2AbortCallback>:
 80006c2:	4770      	bx	lr

080006c4 <HAL_CAN_RxFifo0FullCallback>:
 80006c4:	4770      	bx	lr

080006c6 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80006c6:	4770      	bx	lr

080006c8 <HAL_CAN_RxFifo1FullCallback>:
 80006c8:	4770      	bx	lr

080006ca <HAL_CAN_SleepCallback>:
 80006ca:	4770      	bx	lr

080006cc <HAL_CAN_WakeUpFromRxMsgCallback>:
 80006cc:	4770      	bx	lr

080006ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80006ce:	4770      	bx	lr

080006d0 <HAL_CAN_IRQHandler>:
{
 80006d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80006d4:	6803      	ldr	r3, [r0, #0]
 80006d6:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80006d8:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80006dc:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80006de:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80006e2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80006e6:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80006ea:	f016 0401 	ands.w	r4, r6, #1
{
 80006ee:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80006f0:	d022      	beq.n	8000738 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80006f2:	f017 0401 	ands.w	r4, r7, #1
 80006f6:	d007      	beq.n	8000708 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80006f8:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80006fa:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80006fc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80006fe:	f140 80a3 	bpl.w	8000848 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000702:	f7ff ffd9 	bl	80006b8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000706:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000708:	05fb      	lsls	r3, r7, #23
 800070a:	d509      	bpl.n	8000720 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800070c:	682b      	ldr	r3, [r5, #0]
 800070e:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000712:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000714:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000716:	f140 80a5 	bpl.w	8000864 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800071a:	4628      	mov	r0, r5
 800071c:	f7ff ffcd 	bl	80006ba <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000720:	03fb      	lsls	r3, r7, #15
 8000722:	d509      	bpl.n	8000738 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000724:	682b      	ldr	r3, [r5, #0]
 8000726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800072a:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800072c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800072e:	f140 80a7 	bpl.w	8000880 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000732:	4628      	mov	r0, r5
 8000734:	f7ff ffc2 	bl	80006bc <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000738:	0733      	lsls	r3, r6, #28
 800073a:	d507      	bpl.n	800074c <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800073c:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000740:	bf1f      	itttt	ne
 8000742:	682b      	ldrne	r3, [r5, #0]
 8000744:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000746:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800074a:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800074c:	0777      	lsls	r7, r6, #29
 800074e:	d508      	bpl.n	8000762 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000750:	f01b 0f08 	tst.w	fp, #8
 8000754:	d005      	beq.n	8000762 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000756:	682b      	ldr	r3, [r5, #0]
 8000758:	2208      	movs	r2, #8
 800075a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800075c:	4628      	mov	r0, r5
 800075e:	f7ff ffb1 	bl	80006c4 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000762:	07b0      	lsls	r0, r6, #30
 8000764:	d506      	bpl.n	8000774 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000766:	682b      	ldr	r3, [r5, #0]
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	0799      	lsls	r1, r3, #30
 800076c:	d002      	beq.n	8000774 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800076e:	4628      	mov	r0, r5
 8000770:	f002 feba 	bl	80034e8 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000774:	0672      	lsls	r2, r6, #25
 8000776:	d507      	bpl.n	8000788 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000778:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800077c:	bf1f      	itttt	ne
 800077e:	682b      	ldrne	r3, [r5, #0]
 8000780:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000782:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000786:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000788:	06b3      	lsls	r3, r6, #26
 800078a:	d508      	bpl.n	800079e <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800078c:	f01a 0f08 	tst.w	sl, #8
 8000790:	d005      	beq.n	800079e <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000792:	682b      	ldr	r3, [r5, #0]
 8000794:	2208      	movs	r2, #8
 8000796:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000798:	4628      	mov	r0, r5
 800079a:	f7ff ff95 	bl	80006c8 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800079e:	06f7      	lsls	r7, r6, #27
 80007a0:	d506      	bpl.n	80007b0 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80007a2:	682b      	ldr	r3, [r5, #0]
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	0798      	lsls	r0, r3, #30
 80007a8:	d002      	beq.n	80007b0 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80007aa:	4628      	mov	r0, r5
 80007ac:	f7ff ff8b 	bl	80006c6 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80007b0:	03b1      	lsls	r1, r6, #14
 80007b2:	d508      	bpl.n	80007c6 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80007b4:	f019 0f10 	tst.w	r9, #16
 80007b8:	d005      	beq.n	80007c6 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80007ba:	682b      	ldr	r3, [r5, #0]
 80007bc:	2210      	movs	r2, #16
 80007be:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80007c0:	4628      	mov	r0, r5
 80007c2:	f7ff ff82 	bl	80006ca <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80007c6:	03f2      	lsls	r2, r6, #15
 80007c8:	d508      	bpl.n	80007dc <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80007ca:	f019 0f08 	tst.w	r9, #8
 80007ce:	d005      	beq.n	80007dc <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80007d0:	682b      	ldr	r3, [r5, #0]
 80007d2:	2208      	movs	r2, #8
 80007d4:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80007d6:	4628      	mov	r0, r5
 80007d8:	f7ff ff78 	bl	80006cc <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80007dc:	0433      	lsls	r3, r6, #16
 80007de:	d52a      	bpl.n	8000836 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80007e0:	f019 0f04 	tst.w	r9, #4
 80007e4:	682a      	ldr	r2, [r5, #0]
 80007e6:	d024      	beq.n	8000832 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80007e8:	05f7      	lsls	r7, r6, #23
 80007ea:	d504      	bpl.n	80007f6 <HAL_CAN_IRQHandler+0x126>
 80007ec:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80007f0:	bf18      	it	ne
 80007f2:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80007f6:	05b0      	lsls	r0, r6, #22
 80007f8:	d504      	bpl.n	8000804 <HAL_CAN_IRQHandler+0x134>
 80007fa:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80007fe:	bf18      	it	ne
 8000800:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000804:	0571      	lsls	r1, r6, #21
 8000806:	d504      	bpl.n	8000812 <HAL_CAN_IRQHandler+0x142>
 8000808:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800080c:	bf18      	it	ne
 800080e:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000812:	0533      	lsls	r3, r6, #20
 8000814:	d50d      	bpl.n	8000832 <HAL_CAN_IRQHandler+0x162>
 8000816:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 800081a:	d00a      	beq.n	8000832 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 800081c:	2b30      	cmp	r3, #48	; 0x30
 800081e:	d04c      	beq.n	80008ba <HAL_CAN_IRQHandler+0x1ea>
 8000820:	d83c      	bhi.n	800089c <HAL_CAN_IRQHandler+0x1cc>
 8000822:	2b10      	cmp	r3, #16
 8000824:	d043      	beq.n	80008ae <HAL_CAN_IRQHandler+0x1de>
 8000826:	2b20      	cmp	r3, #32
 8000828:	d044      	beq.n	80008b4 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800082a:	6993      	ldr	r3, [r2, #24]
 800082c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000830:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000832:	2304      	movs	r3, #4
 8000834:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000836:	b12c      	cbz	r4, 8000844 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8000838:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800083a:	431c      	orrs	r4, r3
 800083c:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800083e:	4628      	mov	r0, r5
 8000840:	f7ff ff45 	bl	80006ce <HAL_CAN_ErrorCallback>
 8000844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000848:	077a      	lsls	r2, r7, #29
 800084a:	d405      	bmi.n	8000858 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800084c:	f017 0408 	ands.w	r4, r7, #8
 8000850:	d105      	bne.n	800085e <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000852:	f7ff ff34 	bl	80006be <HAL_CAN_TxMailbox0AbortCallback>
 8000856:	e757      	b.n	8000708 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000858:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800085c:	e754      	b.n	8000708 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800085e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000862:	e751      	b.n	8000708 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000864:	0579      	lsls	r1, r7, #21
 8000866:	d502      	bpl.n	800086e <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000868:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800086c:	e758      	b.n	8000720 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800086e:	053a      	lsls	r2, r7, #20
 8000870:	d502      	bpl.n	8000878 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000872:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000876:	e753      	b.n	8000720 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000878:	4628      	mov	r0, r5
 800087a:	f7ff ff21 	bl	80006c0 <HAL_CAN_TxMailbox1AbortCallback>
 800087e:	e74f      	b.n	8000720 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000880:	0379      	lsls	r1, r7, #13
 8000882:	d502      	bpl.n	800088a <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000884:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000888:	e756      	b.n	8000738 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800088a:	033a      	lsls	r2, r7, #12
 800088c:	d502      	bpl.n	8000894 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800088e:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000892:	e751      	b.n	8000738 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000894:	4628      	mov	r0, r5
 8000896:	f7ff ff14 	bl	80006c2 <HAL_CAN_TxMailbox2AbortCallback>
 800089a:	e74d      	b.n	8000738 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 800089c:	2b50      	cmp	r3, #80	; 0x50
 800089e:	d00f      	beq.n	80008c0 <HAL_CAN_IRQHandler+0x1f0>
 80008a0:	2b60      	cmp	r3, #96	; 0x60
 80008a2:	d010      	beq.n	80008c6 <HAL_CAN_IRQHandler+0x1f6>
 80008a4:	2b40      	cmp	r3, #64	; 0x40
 80008a6:	d1c0      	bne.n	800082a <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 80008a8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80008ac:	e7bd      	b.n	800082a <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 80008ae:	f044 0408 	orr.w	r4, r4, #8
            break;
 80008b2:	e7ba      	b.n	800082a <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80008b4:	f044 0410 	orr.w	r4, r4, #16
            break;
 80008b8:	e7b7      	b.n	800082a <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80008ba:	f044 0420 	orr.w	r4, r4, #32
            break;
 80008be:	e7b4      	b.n	800082a <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 80008c0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80008c4:	e7b1      	b.n	800082a <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80008c6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80008ca:	e7ae      	b.n	800082a <HAL_CAN_IRQHandler+0x15a>

080008cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008cc:	4a07      	ldr	r2, [pc, #28]	; (80008ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008d4:	041b      	lsls	r3, r3, #16
 80008d6:	0c1b      	lsrs	r3, r3, #16
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008dc:	0200      	lsls	r0, r0, #8
 80008de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80008e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008e8:	60d3      	str	r3, [r2, #12]
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f2:	b530      	push	{r4, r5, lr}
 80008f4:	68dc      	ldr	r4, [r3, #12]
 80008f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	2b04      	cmp	r3, #4
 8000902:	bf28      	it	cs
 8000904:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 0501 	mov.w	r5, #1
 800090c:	fa05 f303 	lsl.w	r3, r5, r3
 8000910:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000914:	bf8c      	ite	hi
 8000916:	3c03      	subhi	r4, #3
 8000918:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091a:	4019      	ands	r1, r3
 800091c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091e:	fa05 f404 	lsl.w	r4, r5, r4
 8000922:	3c01      	subs	r4, #1
 8000924:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000926:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	ea42 0201 	orr.w	r2, r2, r1
 800092c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	bfaf      	iteee	ge
 8000932:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	f000 000f 	andlt.w	r0, r0, #15
 800093a:	4b06      	ldrlt	r3, [pc, #24]	; (8000954 <HAL_NVIC_SetPriority+0x64>)
 800093c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	bfa5      	ittet	ge
 8000940:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000944:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800094c:	bd30      	pop	{r4, r5, pc}
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00
 8000954:	e000ed14 	.word	0xe000ed14

08000958 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000958:	0942      	lsrs	r2, r0, #5
 800095a:	2301      	movs	r3, #1
 800095c:	f000 001f 	and.w	r0, r0, #31
 8000960:	fa03 f000 	lsl.w	r0, r3, r0
 8000964:	4b01      	ldr	r3, [pc, #4]	; (800096c <HAL_NVIC_EnableIRQ+0x14>)
 8000966:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100

08000970 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	3801      	subs	r0, #1
 8000972:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000976:	d20a      	bcs.n	800098e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	21f0      	movs	r1, #240	; 0xf0
 8000980:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a0:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000b1c <HAL_GPIO_Init+0x180>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009a8:	4a5a      	ldr	r2, [pc, #360]	; (8000b14 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00u;
 80009aa:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ac:	fa38 f403 	lsrs.w	r4, r8, r3
 80009b0:	d102      	bne.n	80009b8 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80009b2:	b003      	add	sp, #12
 80009b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b8:	2401      	movs	r4, #1
 80009ba:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 80009be:	ea18 050a 	ands.w	r5, r8, sl
 80009c2:	f000 809c 	beq.w	8000afe <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c6:	684c      	ldr	r4, [r1, #4]
 80009c8:	f024 0b10 	bic.w	fp, r4, #16
 80009cc:	f1bb 0f02 	cmp.w	fp, #2
 80009d0:	d114      	bne.n	80009fc <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3u];
 80009d2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80009d6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009da:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80009de:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80009e6:	270f      	movs	r7, #15
 80009e8:	fa07 f70c 	lsl.w	r7, r7, ip
 80009ec:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f0:	690e      	ldr	r6, [r1, #16]
 80009f2:	fa06 f60c 	lsl.w	r6, r6, ip
 80009f6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 80009f8:	f8ce 6020 	str.w	r6, [lr, #32]
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a00:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000a02:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a04:	fa07 f70c 	lsl.w	r7, r7, ip
 8000a08:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a0a:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a0e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a10:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a14:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a18:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1c:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000a20:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a22:	d811      	bhi.n	8000a48 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000a24:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a26:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a2a:	68ce      	ldr	r6, [r1, #12]
 8000a2c:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000a30:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000a34:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a36:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a38:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a3c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000a40:	409e      	lsls	r6, r3
 8000a42:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000a46:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a48:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a4a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a4c:	688e      	ldr	r6, [r1, #8]
 8000a4e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a52:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a54:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000a56:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a58:	d551      	bpl.n	8000afe <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000a5e:	f046 0601 	orr.w	r6, r6, #1
 8000a62:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8000a66:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000a6a:	f023 0703 	bic.w	r7, r3, #3
 8000a6e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a72:	f006 0601 	and.w	r6, r6, #1
 8000a76:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000a7a:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a7c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a80:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a82:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a84:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a88:	f04f 0e0f 	mov.w	lr, #15
 8000a8c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a90:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a94:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a98:	d033      	beq.n	8000b02 <HAL_GPIO_Init+0x166>
 8000a9a:	4e1f      	ldr	r6, [pc, #124]	; (8000b18 <HAL_GPIO_Init+0x17c>)
 8000a9c:	42b0      	cmp	r0, r6
 8000a9e:	d032      	beq.n	8000b06 <HAL_GPIO_Init+0x16a>
 8000aa0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000aa4:	42b0      	cmp	r0, r6
 8000aa6:	d030      	beq.n	8000b0a <HAL_GPIO_Init+0x16e>
 8000aa8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000aac:	42b0      	cmp	r0, r6
 8000aae:	d02e      	beq.n	8000b0e <HAL_GPIO_Init+0x172>
 8000ab0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ab4:	42b0      	cmp	r0, r6
 8000ab6:	bf14      	ite	ne
 8000ab8:	2607      	movne	r6, #7
 8000aba:	2604      	moveq	r6, #4
 8000abc:	fa06 f60c 	lsl.w	r6, r6, ip
 8000ac0:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ac4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000ac6:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 8000ac8:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aca:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000ace:	bf0c      	ite	eq
 8000ad0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ad2:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000ad4:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000ad6:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000adc:	bf0c      	ite	eq
 8000ade:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ae0:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000ae2:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000ae4:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000aea:	bf0c      	ite	eq
 8000aec:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000aee:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000af0:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000af2:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af4:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000af6:	bf54      	ite	pl
 8000af8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000afa:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000afc:	60d6      	str	r6, [r2, #12]
    position++;
 8000afe:	3301      	adds	r3, #1
 8000b00:	e754      	b.n	80009ac <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b02:	2600      	movs	r6, #0
 8000b04:	e7da      	b.n	8000abc <HAL_GPIO_Init+0x120>
 8000b06:	2601      	movs	r6, #1
 8000b08:	e7d8      	b.n	8000abc <HAL_GPIO_Init+0x120>
 8000b0a:	2602      	movs	r6, #2
 8000b0c:	e7d6      	b.n	8000abc <HAL_GPIO_Init+0x120>
 8000b0e:	2603      	movs	r6, #3
 8000b10:	e7d4      	b.n	8000abc <HAL_GPIO_Init+0x120>
 8000b12:	bf00      	nop
 8000b14:	40010400 	.word	0x40010400
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b20:	b10a      	cbz	r2, 8000b26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b22:	6181      	str	r1, [r0, #24]
 8000b24:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b26:	6281      	str	r1, [r0, #40]	; 0x28
 8000b28:	4770      	bx	lr

08000b2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b2e:	4604      	mov	r4, r0
{
 8000b30:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d06b      	beq.n	8000c0e <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b36:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000b3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b3e:	b91b      	cbnz	r3, 8000b48 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b40:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b44:	f003 f812 	bl	8003b6c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b48:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b4a:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8000b4c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b50:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000b54:	f001 faa7 	bl	80020a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5a:	466e      	mov	r6, sp
 8000b5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b5e:	682b      	ldr	r3, [r5, #0]
 8000b60:	6033      	str	r3, [r6, #0]
 8000b62:	f104 0804 	add.w	r8, r4, #4
 8000b66:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000b6a:	6820      	ldr	r0, [r4, #0]
 8000b6c:	f001 fa89 	bl	8002082 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b70:	2100      	movs	r1, #0
 8000b72:	6820      	ldr	r0, [r4, #0]
 8000b74:	f001 faa1 	bl	80020ba <USB_SetCurrentMode>
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4622      	mov	r2, r4
 8000b7c:	4623      	mov	r3, r4
 8000b7e:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b82:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b84:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8000b86:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b8a:	86d9      	strh	r1, [r3, #54]	; 0x36
 8000b8c:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8000b8e:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8000b90:	f883 6029 	strb.w	r6, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b94:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b98:	6398      	str	r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b9a:	63d8      	str	r0, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b9c:	6418      	str	r0, [r3, #64]	; 0x40
 8000b9e:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < 15U; i++)
 8000ba2:	d1f0      	bne.n	8000b86 <HAL_PCD_Init+0x5c>
 8000ba4:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ba6:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8000ba8:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
 8000bac:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8000bae:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8000bb0:	f882 7229 	strb.w	r7, [r2, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bb4:	f882 722b 	strb.w	r7, [r2, #555]	; 0x22b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000bb8:	f8c2 7238 	str.w	r7, [r2, #568]	; 0x238
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bbc:	f8c2 723c 	str.w	r7, [r2, #572]	; 0x23c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bc0:	f8c2 7240 	str.w	r7, [r2, #576]	; 0x240
 8000bc4:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < 15U; i++)
 8000bc8:	d1ee      	bne.n	8000ba8 <HAL_PCD_Init+0x7e>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bcc:	466e      	mov	r6, sp
 8000bce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	6033      	str	r3, [r6, #0]
 8000bd4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000bd8:	6820      	ldr	r0, [r4, #0]
 8000bda:	f001 fa70 	bl	80020be <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8000bde:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000be0:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000be4:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000be8:	69e3      	ldr	r3, [r4, #28]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d102      	bne.n	8000bf4 <HAL_PCD_Init+0xca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f000 fbb0 	bl	8001354 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8000bf4:	6a23      	ldr	r3, [r4, #32]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d102      	bne.n	8000c00 <HAL_PCD_Init+0xd6>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f000 fb96 	bl	800132c <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	f001 fd48 	bl	8002696 <USB_DevDisconnect>

  return HAL_OK;
 8000c06:	2000      	movs	r0, #0
}
 8000c08:	b006      	add	sp, #24
 8000c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e7fa      	b.n	8000c08 <HAL_PCD_Init+0xde>

08000c12 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000c12:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8000c16:	2b01      	cmp	r3, #1
{
 8000c18:	b510      	push	{r4, lr}
 8000c1a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c1c:	d00c      	beq.n	8000c38 <HAL_PCD_Start+0x26>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 8000c24:	6800      	ldr	r0, [r0, #0]
 8000c26:	f001 fd2b 	bl	8002680 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000c2a:	6820      	ldr	r0, [r4, #0]
 8000c2c:	f001 fa30 	bl	8002090 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000c30:	2000      	movs	r0, #0
 8000c32:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000c36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c38:	2002      	movs	r0, #2
}
 8000c3a:	bd10      	pop	{r4, pc}

08000c3c <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000c3c:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000c40:	2a01      	cmp	r2, #1
{
 8000c42:	b510      	push	{r4, lr}
 8000c44:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c46:	d00b      	beq.n	8000c60 <HAL_PCD_SetAddress+0x24>
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000c4e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c52:	6800      	ldr	r0, [r0, #0]
 8000c54:	f001 fd0e 	bl	8002674 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000c5e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c60:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000c62:	bd10      	pop	{r4, pc}

08000c64 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	4604      	mov	r4, r0
 8000c68:	f001 000f 	and.w	r0, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c6c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000c70:	b2c5      	uxtb	r5, r0
 8000c72:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000c76:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 8000c7a:	bf15      	itete	ne
 8000c7c:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
    ep->is_in = 0U;
 8000c80:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000c84:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8000c86:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 1U;
 8000c8a:	bf15      	itete	ne
 8000c8c:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8000c8e:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8000c90:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 8000c94:	f885 6229 	strbeq.w	r6, [r5, #553]	; 0x229
  }

  ep->num = ep_addr & 0xFU;
  ep->maxpacket = ep_mps;
 8000c98:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8000c9a:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8000c9c:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8000c9e:	b2c0      	uxtb	r0, r0
 8000ca0:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8000ca2:	b102      	cbz	r2, 8000ca6 <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000ca4:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000ca6:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8000ca8:	bf04      	itt	eq
 8000caa:	2300      	moveq	r3, #0
 8000cac:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000cae:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d009      	beq.n	8000cca <HAL_PCD_EP_Open+0x66>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cbc:	6820      	ldr	r0, [r4, #0]
 8000cbe:	f001 fa1b 	bl	80020f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428

  return ret;
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000cca:	2002      	movs	r0, #2
}
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}

08000cce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cce:	f001 030f 	and.w	r3, r1, #15
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cd2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000cdc:	fb01 0102 	mla	r1, r1, r2, r0
{
 8000ce0:	b510      	push	{r4, lr}
 8000ce2:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8000ce4:	bf19      	ittee	ne
 8000ce6:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000cea:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8000cec:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 8000cf0:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 8000cf4:	bf15      	itete	ne
 8000cf6:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8000cf8:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8000cfa:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 8000cfe:	f882 0229 	strbeq.w	r0, [r2, #553]	; 0x229
  }
  ep->num   = ep_addr & 0xFU;
 8000d02:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8000d04:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d009      	beq.n	8000d20 <HAL_PCD_EP_Close+0x52>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d12:	6820      	ldr	r0, [r4, #0]
 8000d14:	f001 fb66 	bl	80023e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000d1e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d20:	2002      	movs	r0, #2
}
 8000d22:	bd10      	pop	{r4, pc}

08000d24 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d2a:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8000d2e:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000d30:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & 0xFU;
 8000d32:	f886 1228 	strb.w	r1, [r6, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8000d36:	f504 710a 	add.w	r1, r4, #552	; 0x228
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d3a:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000d3c:	f8c6 223c 	str.w	r2, [r6, #572]	; 0x23c
  ep->xfer_len = len;
 8000d40:	f8c6 3240 	str.w	r3, [r6, #576]	; 0x240
  ep->xfer_count = 0U;
 8000d44:	f8c6 5244 	str.w	r5, [r6, #580]	; 0x244
  ep->is_in = 0U;
 8000d48:	f886 5229 	strb.w	r5, [r6, #553]	; 0x229
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d4c:	6800      	ldr	r0, [r0, #0]
 8000d4e:	f001 fcc3 	bl	80026d8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000d52:	4628      	mov	r0, r5
 8000d54:	bd70      	pop	{r4, r5, r6, pc}

08000d56 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 8000d56:	f001 010f 	and.w	r1, r1, #15
 8000d5a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000d5e:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000d62:	4770      	bx	lr

08000d64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d64:	b570      	push	{r4, r5, r6, lr}
 8000d66:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d6a:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8000d6e:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8000d70:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 8000d72:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000d74:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 8000d76:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000d7a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d7e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000d80:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000d82:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8000d84:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d88:	6800      	ldr	r0, [r0, #0]
 8000d8a:	f001 fca5 	bl	80026d8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000d8e:	4630      	mov	r0, r6
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d94 <HAL_PCD_IRQHandler>:
{
 8000d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d98:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d9a:	6800      	ldr	r0, [r0, #0]
 8000d9c:	f001 fc83 	bl	80026a6 <USB_ReadInterrupts>
 8000da0:	0400      	lsls	r0, r0, #16
 8000da2:	f100 8230 	bmi.w	8001206 <HAL_PCD_IRQHandler+0x472>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000da6:	6820      	ldr	r0, [r4, #0]
 8000da8:	f001 fc7d 	bl	80026a6 <USB_ReadInterrupts>
 8000dac:	0541      	lsls	r1, r0, #21
 8000dae:	d50f      	bpl.n	8000dd0 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000db0:	6822      	ldr	r2, [r4, #0]
 8000db2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000db6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dba:	041b      	lsls	r3, r3, #16
 8000dbc:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8000dbe:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dc0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000dc4:	f002 ff09 	bl	8003bda <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f7ff ff36 	bl	8000c3c <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000dd0:	6820      	ldr	r0, [r4, #0]
 8000dd2:	f001 fc68 	bl	80026a6 <USB_ReadInterrupts>
 8000dd6:	0443      	lsls	r3, r0, #17
 8000dd8:	d508      	bpl.n	8000dec <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dda:	6822      	ldr	r2, [r4, #0]
 8000ddc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000de4:	041b      	lsls	r3, r3, #16
 8000de6:	0c1b      	lsrs	r3, r3, #16
 8000de8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dec:	6820      	ldr	r0, [r4, #0]
 8000dee:	f001 fc5a 	bl	80026a6 <USB_ReadInterrupts>
 8000df2:	0487      	lsls	r7, r0, #18
 8000df4:	d508      	bpl.n	8000e08 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000df6:	6822      	ldr	r2, [r4, #0]
 8000df8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e08:	6820      	ldr	r0, [r4, #0]
 8000e0a:	f001 fc4c 	bl	80026a6 <USB_ReadInterrupts>
 8000e0e:	04c6      	lsls	r6, r0, #19
 8000e10:	d526      	bpl.n	8000e60 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e18:	f023 0304 	bic.w	r3, r3, #4
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e24:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e28:	f023 0308 	bic.w	r3, r3, #8
 8000e2c:	041b      	lsls	r3, r3, #16
 8000e2e:	0c1b      	lsrs	r3, r3, #16
 8000e30:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8000e34:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d105      	bne.n	8000e48 <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e42:	4620      	mov	r0, r4
 8000e44:	f002 ffc8 	bl	8003dd8 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f002 fee3 	bl	8003c14 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e4e:	6822      	ldr	r2, [r4, #0]
 8000e50:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e58:	041b      	lsls	r3, r3, #16
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e60:	6820      	ldr	r0, [r4, #0]
 8000e62:	f001 fc20 	bl	80026a6 <USB_ReadInterrupts>
 8000e66:	0505      	lsls	r5, r0, #20
 8000e68:	d51d      	bpl.n	8000ea6 <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e6a:	6820      	ldr	r0, [r4, #0]
 8000e6c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e7a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	0c1b      	lsrs	r3, r3, #16
 8000e86:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e8a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000e98:	f001 fc05 	bl	80026a6 <USB_ReadInterrupts>
 8000e9c:	04c0      	lsls	r0, r0, #19
 8000e9e:	d402      	bmi.n	8000ea6 <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f002 fea7 	bl	8003bf4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000ea6:	6820      	ldr	r0, [r4, #0]
 8000ea8:	f001 fbfd 	bl	80026a6 <USB_ReadInterrupts>
 8000eac:	0601      	lsls	r1, r0, #24
 8000eae:	d529      	bpl.n	8000f04 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eba:	0412      	lsls	r2, r2, #16
 8000ebc:	0c12      	lsrs	r2, r2, #16
 8000ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000ec2:	f894 2460 	ldrb.w	r2, [r4, #1120]	; 0x460
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	f040 81a2 	bne.w	8001210 <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000ecc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000ed0:	b292      	uxth	r2, r2
 8000ed2:	f042 0204 	orr.w	r2, r2, #4
 8000ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000eda:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	f042 0208 	orr.w	r2, r2, #8
 8000ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000ee8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000eec:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8000ef0:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000ef2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8000ef6:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000efa:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000efe:	4620      	mov	r0, r4
 8000f00:	f002 ff6a 	bl	8003dd8 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f04:	6820      	ldr	r0, [r4, #0]
 8000f06:	f001 fbce 	bl	80026a6 <USB_ReadInterrupts>
 8000f0a:	0582      	lsls	r2, r0, #22
 8000f0c:	d50b      	bpl.n	8000f26 <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f0e:	6822      	ldr	r2, [r4, #0]
 8000f10:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	0c1b      	lsrs	r3, r3, #16
 8000f1c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000f20:	4620      	mov	r0, r4
 8000f22:	f002 fe56 	bl	8003bd2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f26:	6820      	ldr	r0, [r4, #0]
 8000f28:	f001 fbbd 	bl	80026a6 <USB_ReadInterrupts>
 8000f2c:	05c3      	lsls	r3, r0, #23
 8000f2e:	d508      	bpl.n	8000f42 <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f30:	6822      	ldr	r2, [r4, #0]
 8000f32:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f3a:	041b      	lsls	r3, r3, #16
 8000f3c:	0c1b      	lsrs	r3, r3, #16
 8000f3e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8000f46:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8000f4a:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8000f4c:	f011 070f 	ands.w	r7, r1, #15
 8000f50:	f040 80a5 	bne.w	800109e <HAL_PCD_IRQHandler+0x30a>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f54:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f56:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f5a:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f5c:	d129      	bne.n	8000fb2 <HAL_PCD_IRQHandler+0x21e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f5e:	ea03 030a 	and.w	r3, r3, sl
 8000f62:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f64:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f68:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000f6c:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8000f70:	fa10 f083 	uxtah	r0, r0, r3
 8000f74:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8000f78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f7e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000f80:	4413      	add	r3, r2
 8000f82:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f84:	4620      	mov	r0, r4
 8000f86:	f002 fe1d 	bl	8003bc4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f8a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f8e:	b153      	cbz	r3, 8000fa6 <HAL_PCD_IRQHandler+0x212>
 8000f90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f92:	b942      	cbnz	r2, 8000fa6 <HAL_PCD_IRQHandler+0x212>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f94:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f98:	6821      	ldr	r1, [r4, #0]
 8000f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000fa2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000fa6:	6820      	ldr	r0, [r4, #0]
 8000fa8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000fac:	041a      	lsls	r2, r3, #16
 8000fae:	d4ca      	bmi.n	8000f46 <HAL_PCD_IRQHandler+0x1b2>
 8000fb0:	e6f9      	b.n	8000da6 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000fb2:	051a      	lsls	r2, r3, #20
 8000fb4:	d51e      	bpl.n	8000ff4 <HAL_PCD_IRQHandler+0x260>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fb6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fba:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000fbe:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8000fc2:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8000fc6:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8000fca:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000fce:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 8000fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fd6:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8000fda:	f001 fc65 	bl	80028a8 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fde:	6822      	ldr	r2, [r4, #0]
 8000fe0:	8813      	ldrh	r3, [r2, #0]
 8000fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fe6:	051b      	lsls	r3, r3, #20
 8000fe8:	0d1b      	lsrs	r3, r3, #20
 8000fea:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000fec:	4620      	mov	r0, r4
 8000fee:	f002 fddb 	bl	8003ba8 <HAL_PCD_SetupStageCallback>
 8000ff2:	e7d8      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x212>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000ff4:	041f      	lsls	r7, r3, #16
 8000ff6:	d5d6      	bpl.n	8000fa6 <HAL_PCD_IRQHandler+0x212>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ff8:	8803      	ldrh	r3, [r0, #0]
 8000ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ffe:	051b      	lsls	r3, r3, #20
 8001000:	0d1b      	lsrs	r3, r3, #20
 8001002:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001004:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001008:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800100c:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001010:	fa11 f383 	uxtah	r3, r1, r3
 8001014:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800101c:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244

          if (ep->xfer_count != 0U)
 8001020:	b163      	cbz	r3, 800103c <HAL_PCD_IRQHandler+0x2a8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8001022:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 8001026:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800102a:	f001 fc3d 	bl	80028a8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800102e:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001032:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8001036:	4413      	add	r3, r2
 8001038:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800103c:	2100      	movs	r1, #0
 800103e:	4620      	mov	r0, r4
 8001040:	f002 fdb8 	bl	8003bb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001044:	6822      	ldr	r2, [r4, #0]
 8001046:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
 800104a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800104e:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8001052:	b289      	uxth	r1, r1
 8001054:	b953      	cbnz	r3, 800106c <HAL_PCD_IRQHandler+0x2d8>
 8001056:	5a6b      	ldrh	r3, [r5, r1]
 8001058:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800105c:	049b      	lsls	r3, r3, #18
 800105e:	0c9b      	lsrs	r3, r3, #18
 8001060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001068:	526b      	strh	r3, [r5, r1]
 800106a:	e007      	b.n	800107c <HAL_PCD_IRQHandler+0x2e8>
 800106c:	2b3d      	cmp	r3, #61	; 0x3d
 800106e:	d811      	bhi.n	8001094 <HAL_PCD_IRQHandler+0x300>
 8001070:	0858      	lsrs	r0, r3, #1
 8001072:	07de      	lsls	r6, r3, #31
 8001074:	bf48      	it	mi
 8001076:	3001      	addmi	r0, #1
 8001078:	0280      	lsls	r0, r0, #10
 800107a:	5268      	strh	r0, [r5, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800107c:	8813      	ldrh	r3, [r2, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	ea03 030b 	and.w	r3, r3, fp
 8001084:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	8013      	strh	r3, [r2, #0]
 8001092:	e788      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x212>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001094:	4860      	ldr	r0, [pc, #384]	; (8001218 <HAL_PCD_IRQHandler+0x484>)
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	ea40 2383 	orr.w	r3, r0, r3, lsl #10
 800109c:	e7e4      	b.n	8001068 <HAL_PCD_IRQHandler+0x2d4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800109e:	b23e      	sxth	r6, r7
 80010a0:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 80010a4:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010a8:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 80010ac:	d03e      	beq.n	800112c <HAL_PCD_IRQHandler+0x398>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010ae:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80010b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010b6:	051b      	lsls	r3, r3, #20
 80010b8:	0d1b      	lsrs	r3, r3, #20
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80010ba:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010be:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80010c2:	eb04 0108 	add.w	r1, r4, r8
 80010c6:	f891 3234 	ldrb.w	r3, [r1, #564]	; 0x234
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d157      	bne.n	800117e <HAL_PCD_IRQHandler+0x3ea>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010ce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010d2:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80010d6:	f200 4506 	addw	r5, r0, #1030	; 0x406
 80010da:	fa15 f383 	uxtah	r3, r5, r3
 80010de:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80010e2:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80010e6:	b135      	cbz	r5, 80010f6 <HAL_PCD_IRQHandler+0x362>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80010e8:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 80010ec:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80010f0:	462b      	mov	r3, r5
 80010f2:	f001 fbd9 	bl	80028a8 <USB_ReadPMA>
 80010f6:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 80010fa:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 80010fe:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8001102:	442a      	add	r2, r5
 8001104:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        ep->xfer_buff += count;
 8001108:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 800110c:	442a      	add	r2, r5
 800110e:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001112:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001116:	b11b      	cbz	r3, 8001120 <HAL_PCD_IRQHandler+0x38c>
 8001118:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 800111c:	4285      	cmp	r5, r0
 800111e:	d269      	bcs.n	80011f4 <HAL_PCD_IRQHandler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001120:	44a0      	add	r8, r4
 8001122:	4620      	mov	r0, r4
 8001124:	f898 1228 	ldrb.w	r1, [r8, #552]	; 0x228
 8001128:	f002 fd44 	bl	8003bb4 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800112c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001130:	f43f af39 	beq.w	8000fa6 <HAL_PCD_IRQHandler+0x212>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800113a:	b292      	uxth	r2, r2
 800113c:	ea02 020a 	and.w	r2, r2, sl
 8001140:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001144:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8001148:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800114c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001150:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001154:	fa13 f382 	uxtah	r3, r3, r2
 8001158:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 800115c:	f833 2031 	ldrh.w	r2, [r3, r1, lsl #3]
 8001160:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001164:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001168:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800116c:	441a      	add	r2, r3
 800116e:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001170:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001172:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8001174:	2b00      	cmp	r3, #0
 8001176:	d143      	bne.n	8001200 <HAL_PCD_IRQHandler+0x46c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001178:	f002 fd24 	bl	8003bc4 <HAL_PCD_DataInStageCallback>
 800117c:	e713      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x212>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800117e:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8001182:	b213      	sxth	r3, r2
 8001184:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8001188:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800118c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001190:	d022      	beq.n	80011d8 <HAL_PCD_IRQHandler+0x444>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001192:	f200 4502 	addw	r5, r0, #1026	; 0x402
 8001196:	fa15 f383 	uxtah	r3, r5, r3
 800119a:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 800119e:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80011a2:	b135      	cbz	r5, 80011b2 <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80011a4:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 80011a8:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011aa:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80011ae:	f001 fb7b 	bl	80028a8 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 80011b2:	eb04 0308 	add.w	r3, r4, r8
 80011b6:	6822      	ldr	r2, [r4, #0]
 80011b8:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80011bc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80011c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011d2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80011d6:	e78e      	b.n	80010f6 <HAL_PCD_IRQHandler+0x362>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80011d8:	f200 4506 	addw	r5, r0, #1030	; 0x406
 80011dc:	fa15 f383 	uxtah	r3, r5, r3
 80011e0:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80011e4:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80011e8:	2d00      	cmp	r5, #0
 80011ea:	d0e2      	beq.n	80011b2 <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011ec:	462b      	mov	r3, r5
 80011ee:	f8b1 2232 	ldrh.w	r2, [r1, #562]	; 0x232
 80011f2:	e7da      	b.n	80011aa <HAL_PCD_IRQHandler+0x416>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80011f4:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 80011f8:	4620      	mov	r0, r4
 80011fa:	f7ff fd93 	bl	8000d24 <HAL_PCD_EP_Receive>
 80011fe:	e795      	b.n	800112c <HAL_PCD_IRQHandler+0x398>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001200:	f7ff fdb0 	bl	8000d64 <HAL_PCD_EP_Transmit>
 8001204:	e6cf      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x212>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001206:	f8df a014 	ldr.w	sl, [pc, #20]	; 800121c <HAL_PCD_IRQHandler+0x488>
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800120a:	f8df b014 	ldr.w	fp, [pc, #20]	; 8001220 <HAL_PCD_IRQHandler+0x48c>
 800120e:	e6ca      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x212>
      HAL_PCD_SuspendCallback(hpcd);
 8001210:	4620      	mov	r0, r4
 8001212:	f002 fcef 	bl	8003bf4 <HAL_PCD_SuspendCallback>
 8001216:	e675      	b.n	8000f04 <HAL_PCD_IRQHandler+0x170>
 8001218:	ffff8000 	.word	0xffff8000
 800121c:	ffff8f0f 	.word	0xffff8f0f
 8001220:	ffffbf8f 	.word	0xffffbf8f

08001224 <HAL_PCD_EP_SetStall>:
{
 8001224:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8001226:	6843      	ldr	r3, [r0, #4]
 8001228:	f001 050f 	and.w	r5, r1, #15
 800122c:	429d      	cmp	r5, r3
{
 800122e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8001230:	d82d      	bhi.n	800128e <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8001232:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001236:	f04f 0320 	mov.w	r3, #32
 800123a:	d01e      	beq.n	800127a <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 800123c:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001240:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8001244:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001246:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8001248:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 800124c:	2201      	movs	r2, #1
 800124e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8001250:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001252:	f894 1428 	ldrb.w	r1, [r4, #1064]	; 0x428
 8001256:	4291      	cmp	r1, r2
 8001258:	d01b      	beq.n	8001292 <HAL_PCD_EP_SetStall+0x6e>
 800125a:	f884 2428 	strb.w	r2, [r4, #1064]	; 0x428
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800125e:	4619      	mov	r1, r3
 8001260:	6820      	ldr	r0, [r4, #0]
 8001262:	f001 f99f 	bl	80025a4 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8001266:	b925      	cbnz	r5, 8001272 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001268:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 800126c:	6820      	ldr	r0, [r4, #0]
 800126e:	f001 fa1e 	bl	80026ae <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001272:	2000      	movs	r0, #0
 8001274:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001278:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800127a:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 800127e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001282:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001284:	f503 730a 	add.w	r3, r3, #552	; 0x228
    ep->is_in = 0U;
 8001288:	f881 2229 	strb.w	r2, [r1, #553]	; 0x229
 800128c:	e7de      	b.n	800124c <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
 8001290:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001292:	2002      	movs	r0, #2
}
 8001294:	bd38      	pop	{r3, r4, r5, pc}

08001296 <HAL_PCD_EP_ClrStall>:
{
 8001296:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001298:	6843      	ldr	r3, [r0, #4]
 800129a:	f001 020f 	and.w	r2, r1, #15
 800129e:	429a      	cmp	r2, r3
{
 80012a0:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80012a2:	d827      	bhi.n	80012f4 <HAL_PCD_EP_ClrStall+0x5e>
  if ((0x80U & ep_addr) == 0x80U)
 80012a4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80012a8:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80012ac:	fb01 0102 	mla	r1, r1, r2, r0
 80012b0:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep->is_in = 1U;
 80012b4:	bf19      	ittee	ne
 80012b6:	181b      	addne	r3, r3, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80012b8:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80012ba:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 80012be:	191b      	addeq	r3, r3, r4
    ep->is_in = 1U;
 80012c0:	bf14      	ite	ne
 80012c2:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80012c4:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 80012c6:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80012ca:	bf14      	ite	ne
 80012cc:	f883 0029 	strbne.w	r0, [r3, #41]	; 0x29
    ep->is_in = 0U;
 80012d0:	f883 0229 	strbeq.w	r0, [r3, #553]	; 0x229
  ep->is_stall = 0U;
 80012d4:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 80012d6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80012d8:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d00b      	beq.n	80012f8 <HAL_PCD_EP_ClrStall+0x62>
 80012e0:	2301      	movs	r3, #1
 80012e2:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012e6:	6820      	ldr	r0, [r4, #0]
 80012e8:	f001 f97d 	bl	80025e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012ec:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
  return HAL_OK;
 80012f0:	4628      	mov	r0, r5
 80012f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80012f4:	2001      	movs	r0, #1
 80012f6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80012f8:	2002      	movs	r0, #2
}
 80012fa:	bd38      	pop	{r3, r4, r5, pc}

080012fc <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80012fc:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001300:	bf1b      	ittet	ne
 8001302:	f001 010f 	andne.w	r1, r1, #15
 8001306:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800130a:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800130e:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001310:	bf08      	it	eq
 8001312:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001316:	b91a      	cbnz	r2, 8001320 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001318:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800131a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800131c:	2000      	movs	r0, #0
 800131e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001320:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001322:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001324:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001326:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001328:	8143      	strh	r3, [r0, #10]
 800132a:	e7f7      	b.n	800131c <HAL_PCDEx_PMAConfig+0x20>

0800132c <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_TypeDef *USBx = hpcd->Instance;
 800132c:	6802      	ldr	r2, [r0, #0]
  hpcd->battery_charging_active = 1U;
 800132e:	2301      	movs	r3, #1
 8001330:	f8c0 346c 	str.w	r3, [r0, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001334:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8001338:	b29b      	uxth	r3, r3
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8001342:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8001346:	b29b      	uxth	r3, r3
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58

  return HAL_OK;
}
 8001350:	2000      	movs	r0, #0
 8001352:	4770      	bx	lr

08001354 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001354:	6802      	ldr	r2, [r0, #0]
{
 8001356:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001358:	2101      	movs	r1, #1
 800135a:	f8c0 1468 	str.w	r1, [r0, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 800135e:	2000      	movs	r0, #0
 8001360:	f883 0460 	strb.w	r0, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001364:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001368:	b29b      	uxth	r3, r3
 800136a:	430b      	orrs	r3, r1
 800136c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001370:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001374:	b29b      	uxth	r3, r3
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800137e:	4770      	bx	lr

08001380 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001380:	4a02      	ldr	r2, [pc, #8]	; (800138c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001382:	6813      	ldr	r3, [r2, #0]
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4770      	bx	lr
 800138c:	40007000 	.word	0x40007000

08001390 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <HAL_PWREx_GetVoltageRange+0xc>)
 8001392:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001394:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40007000 	.word	0x40007000

080013a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ac:	d11c      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ae:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80013b2:	d015      	beq.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80013ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013be:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013c0:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80013c2:	6811      	ldr	r1, [r2, #0]
 80013c4:	2232      	movs	r2, #50	; 0x32
 80013c6:	434a      	muls	r2, r1
 80013c8:	490f      	ldr	r1, [pc, #60]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80013ca:	fbb2 f2f1 	udiv	r2, r2, r1
 80013ce:	4619      	mov	r1, r3
 80013d0:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d2:	6958      	ldr	r0, [r3, #20]
 80013d4:	0540      	lsls	r0, r0, #21
 80013d6:	d500      	bpl.n	80013da <HAL_PWREx_ControlVoltageScaling+0x3a>
 80013d8:	b922      	cbnz	r2, 80013e4 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013da:	694b      	ldr	r3, [r1, #20]
 80013dc:	055b      	lsls	r3, r3, #21
 80013de:	d40d      	bmi.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013e0:	2000      	movs	r0, #0
 80013e2:	4770      	bx	lr
        wait_loop_index--;
 80013e4:	3a01      	subs	r2, #1
 80013e6:	e7f4      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ec:	bf1f      	itttt	ne
 80013ee:	681a      	ldrne	r2, [r3, #0]
 80013f0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80013f4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80013f8:	601a      	strne	r2, [r3, #0]
 80013fa:	e7f1      	b.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80013fc:	2003      	movs	r0, #3
}
 80013fe:	4770      	bx	lr
 8001400:	40007000 	.word	0x40007000
 8001404:	20000110 	.word	0x20000110
 8001408:	000f4240 	.word	0x000f4240

0800140c <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800140c:	4a02      	ldr	r2, [pc, #8]	; (8001418 <HAL_PWREx_EnableVddUSB+0xc>)
 800140e:	6853      	ldr	r3, [r2, #4]
 8001410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001414:	6053      	str	r3, [r2, #4]
 8001416:	4770      	bx	lr
 8001418:	40007000 	.word	0x40007000

0800141c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800141c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800141e:	4d1e      	ldr	r5, [pc, #120]	; (8001498 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001420:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001422:	00da      	lsls	r2, r3, #3
{
 8001424:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001426:	d518      	bpl.n	800145a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001428:	f7ff ffb2 	bl	8001390 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001430:	d123      	bne.n	800147a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001432:	2c80      	cmp	r4, #128	; 0x80
 8001434:	d929      	bls.n	800148a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001436:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001438:	bf8c      	ite	hi
 800143a:	2002      	movhi	r0, #2
 800143c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001440:	6813      	ldr	r3, [r2, #0]
 8001442:	f023 0307 	bic.w	r3, r3, #7
 8001446:	4303      	orrs	r3, r0
 8001448:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800144a:	6813      	ldr	r3, [r2, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001450:	1a18      	subs	r0, r3, r0
 8001452:	bf18      	it	ne
 8001454:	2001      	movne	r0, #1
 8001456:	b003      	add	sp, #12
 8001458:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	65ab      	str	r3, [r5, #88]	; 0x58
 8001462:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800146c:	f7ff ff90 	bl	8001390 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001470:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001476:	65ab      	str	r3, [r5, #88]	; 0x58
 8001478:	e7d8      	b.n	800142c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800147a:	2c80      	cmp	r4, #128	; 0x80
 800147c:	d807      	bhi.n	800148e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800147e:	d008      	beq.n	8001492 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001480:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001484:	4258      	negs	r0, r3
 8001486:	4158      	adcs	r0, r3
 8001488:	e7d9      	b.n	800143e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800148a:	2000      	movs	r0, #0
 800148c:	e7d7      	b.n	800143e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800148e:	2003      	movs	r0, #3
 8001490:	e7d5      	b.n	800143e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001492:	2002      	movs	r0, #2
 8001494:	e7d3      	b.n	800143e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40022000 	.word	0x40022000

080014a0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_RCC_GetSysClockFreq+0x98>)
 80014a2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014a6:	f012 020c 	ands.w	r2, r2, #12
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_GetSysClockFreq+0x18>
 80014ac:	2a0c      	cmp	r2, #12
 80014ae:	d115      	bne.n	80014dc <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80014b4:	2901      	cmp	r1, #1
 80014b6:	d118      	bne.n	80014ea <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014b8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80014ba:	4820      	ldr	r0, [pc, #128]	; (800153c <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014bc:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014be:	bf55      	itete	pl
 80014c0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80014c4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014c6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80014ca:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80014ce:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014d2:	b382      	cbz	r2, 8001536 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80014d4:	2a0c      	cmp	r2, #12
 80014d6:	d009      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x4c>
 80014d8:	2000      	movs	r0, #0
  return sysclockfreq;
 80014da:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80014dc:	2a04      	cmp	r2, #4
 80014de:	d029      	beq.n	8001534 <HAL_RCC_GetSysClockFreq+0x94>
 80014e0:	2a08      	cmp	r2, #8
 80014e2:	4817      	ldr	r0, [pc, #92]	; (8001540 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014e4:	bf18      	it	ne
 80014e6:	2000      	movne	r0, #0
 80014e8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014ea:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014ec:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014ee:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014f0:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014f4:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 80014f8:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014fa:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80014fe:	d005      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0x6c>
 8001500:	2903      	cmp	r1, #3
 8001502:	d012      	beq.n	800152a <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001504:	68d9      	ldr	r1, [r3, #12]
 8001506:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800150a:	e003      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800150c:	68d9      	ldr	r1, [r3, #12]
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001510:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001514:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001516:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800151a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800151e:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001520:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001522:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001524:	fbb0 f0f3 	udiv	r0, r0, r3
 8001528:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800152a:	68d9      	ldr	r1, [r3, #12]
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <HAL_RCC_GetSysClockFreq+0xa0>)
 800152e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001532:	e7ef      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000
 800153c:	08004838 	.word	0x08004838
 8001540:	007a1200 	.word	0x007a1200
 8001544:	00f42400 	.word	0x00f42400

08001548 <HAL_RCC_OscConfig>:
{
 8001548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800154c:	4605      	mov	r5, r0
 800154e:	b908      	cbnz	r0, 8001554 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
 8001552:	e046      	b.n	80015e2 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001554:	4ca8      	ldr	r4, [pc, #672]	; (80017f8 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001556:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001558:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800155c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800155e:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001562:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001566:	d572      	bpl.n	800164e <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001568:	b11e      	cbz	r6, 8001572 <HAL_RCC_OscConfig+0x2a>
 800156a:	2e0c      	cmp	r6, #12
 800156c:	d151      	bne.n	8001612 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800156e:	2f01      	cmp	r7, #1
 8001570:	d14f      	bne.n	8001612 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	0798      	lsls	r0, r3, #30
 8001576:	d502      	bpl.n	800157e <HAL_RCC_OscConfig+0x36>
 8001578:	69ab      	ldr	r3, [r5, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0e8      	beq.n	8001550 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	6a28      	ldr	r0, [r5, #32]
 8001582:	0719      	lsls	r1, r3, #28
 8001584:	bf56      	itet	pl
 8001586:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800158a:	6823      	ldrmi	r3, [r4, #0]
 800158c:	091b      	lsrpl	r3, r3, #4
 800158e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001592:	4283      	cmp	r3, r0
 8001594:	d228      	bcs.n	80015e8 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001596:	f7ff ff41 	bl	800141c <RCC_SetFlashLatencyFromMSIRange>
 800159a:	2800      	cmp	r0, #0
 800159c:	d1d8      	bne.n	8001550 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6023      	str	r3, [r4, #0]
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	6a2a      	ldr	r2, [r5, #32]
 80015aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015ae:	4313      	orrs	r3, r2
 80015b0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b2:	6863      	ldr	r3, [r4, #4]
 80015b4:	69ea      	ldr	r2, [r5, #28]
 80015b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015be:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015c0:	f7ff ff6e 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 80015c4:	68a3      	ldr	r3, [r4, #8]
 80015c6:	4a8d      	ldr	r2, [pc, #564]	; (80017fc <HAL_RCC_OscConfig+0x2b4>)
 80015c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	40d8      	lsrs	r0, r3
 80015d4:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <HAL_RCC_OscConfig+0x2b8>)
 80015d6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80015d8:	2000      	movs	r0, #0
 80015da:	f7fe fe51 	bl	8000280 <HAL_InitTick>
        if(status != HAL_OK)
 80015de:	2800      	cmp	r0, #0
 80015e0:	d035      	beq.n	800164e <HAL_RCC_OscConfig+0x106>
}
 80015e2:	b003      	add	sp, #12
 80015e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6023      	str	r3, [r4, #0]
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015f6:	4303      	orrs	r3, r0
 80015f8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fa:	6863      	ldr	r3, [r4, #4]
 80015fc:	69ea      	ldr	r2, [r5, #28]
 80015fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001602:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001606:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001608:	f7ff ff08 	bl	800141c <RCC_SetFlashLatencyFromMSIRange>
 800160c:	2800      	cmp	r0, #0
 800160e:	d0d7      	beq.n	80015c0 <HAL_RCC_OscConfig+0x78>
 8001610:	e79e      	b.n	8001550 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001612:	69ab      	ldr	r3, [r5, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d03a      	beq.n	800168e <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001620:	f7fe fe5e 	bl	80002e0 <HAL_GetTick>
 8001624:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	079a      	lsls	r2, r3, #30
 800162a:	d528      	bpl.n	800167e <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	6023      	str	r3, [r4, #0]
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	6a2a      	ldr	r2, [r5, #32]
 8001638:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800163c:	4313      	orrs	r3, r2
 800163e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	69ea      	ldr	r2, [r5, #28]
 8001644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001648:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800164c:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	682b      	ldr	r3, [r5, #0]
 8001650:	07d8      	lsls	r0, r3, #31
 8001652:	d42d      	bmi.n	80016b0 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	0799      	lsls	r1, r3, #30
 8001658:	d46b      	bmi.n	8001732 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	0718      	lsls	r0, r3, #28
 800165e:	f100 80a0 	bmi.w	80017a2 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001662:	682b      	ldr	r3, [r5, #0]
 8001664:	0759      	lsls	r1, r3, #29
 8001666:	f100 80cd 	bmi.w	8001804 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800166a:	682b      	ldr	r3, [r5, #0]
 800166c:	0699      	lsls	r1, r3, #26
 800166e:	f100 8136 	bmi.w	80018de <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001672:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	f040 815c 	bne.w	8001932 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 800167a:	2000      	movs	r0, #0
 800167c:	e7b1      	b.n	80015e2 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800167e:	f7fe fe2f 	bl	80002e0 <HAL_GetTick>
 8001682:	eba0 0008 	sub.w	r0, r0, r8
 8001686:	2802      	cmp	r0, #2
 8001688:	d9cd      	bls.n	8001626 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 800168a:	2003      	movs	r0, #3
 800168c:	e7a9      	b.n	80015e2 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001696:	f7fe fe23 	bl	80002e0 <HAL_GetTick>
 800169a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	079b      	lsls	r3, r3, #30
 80016a0:	d5d5      	bpl.n	800164e <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a2:	f7fe fe1d 	bl	80002e0 <HAL_GetTick>
 80016a6:	eba0 0008 	sub.w	r0, r0, r8
 80016aa:	2802      	cmp	r0, #2
 80016ac:	d9f6      	bls.n	800169c <HAL_RCC_OscConfig+0x154>
 80016ae:	e7ec      	b.n	800168a <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016b0:	2e08      	cmp	r6, #8
 80016b2:	d003      	beq.n	80016bc <HAL_RCC_OscConfig+0x174>
 80016b4:	2e0c      	cmp	r6, #12
 80016b6:	d108      	bne.n	80016ca <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80016b8:	2f03      	cmp	r7, #3
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	039a      	lsls	r2, r3, #14
 80016c0:	d5c8      	bpl.n	8001654 <HAL_RCC_OscConfig+0x10c>
 80016c2:	686b      	ldr	r3, [r5, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1c5      	bne.n	8001654 <HAL_RCC_OscConfig+0x10c>
 80016c8:	e742      	b.n	8001550 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ca:	686b      	ldr	r3, [r5, #4]
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d110      	bne.n	80016f4 <HAL_RCC_OscConfig+0x1ac>
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016da:	f7fe fe01 	bl	80002e0 <HAL_GetTick>
 80016de:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	039b      	lsls	r3, r3, #14
 80016e4:	d4b6      	bmi.n	8001654 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e6:	f7fe fdfb 	bl	80002e0 <HAL_GetTick>
 80016ea:	eba0 0008 	sub.w	r0, r0, r8
 80016ee:	2864      	cmp	r0, #100	; 0x64
 80016f0:	d9f6      	bls.n	80016e0 <HAL_RCC_OscConfig+0x198>
 80016f2:	e7ca      	b.n	800168a <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f8:	d104      	bne.n	8001704 <HAL_RCC_OscConfig+0x1bc>
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6023      	str	r3, [r4, #0]
 8001702:	e7e6      	b.n	80016d2 <HAL_RCC_OscConfig+0x18a>
 8001704:	6822      	ldr	r2, [r4, #0]
 8001706:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800170a:	6022      	str	r2, [r4, #0]
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001712:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e0      	bne.n	80016da <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001718:	f7fe fde2 	bl	80002e0 <HAL_GetTick>
 800171c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	0398      	lsls	r0, r3, #14
 8001722:	d597      	bpl.n	8001654 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7fe fddc 	bl	80002e0 <HAL_GetTick>
 8001728:	eba0 0008 	sub.w	r0, r0, r8
 800172c:	2864      	cmp	r0, #100	; 0x64
 800172e:	d9f6      	bls.n	800171e <HAL_RCC_OscConfig+0x1d6>
 8001730:	e7ab      	b.n	800168a <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001732:	2e04      	cmp	r6, #4
 8001734:	d003      	beq.n	800173e <HAL_RCC_OscConfig+0x1f6>
 8001736:	2e0c      	cmp	r6, #12
 8001738:	d110      	bne.n	800175c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 800173a:	2f02      	cmp	r7, #2
 800173c:	d10e      	bne.n	800175c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	0559      	lsls	r1, r3, #21
 8001742:	d503      	bpl.n	800174c <HAL_RCC_OscConfig+0x204>
 8001744:	68eb      	ldr	r3, [r5, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f43f af02 	beq.w	8001550 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	692a      	ldr	r2, [r5, #16]
 8001750:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001754:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001758:	6063      	str	r3, [r4, #4]
 800175a:	e77e      	b.n	800165a <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175c:	68eb      	ldr	r3, [r5, #12]
 800175e:	b17b      	cbz	r3, 8001780 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001768:	f7fe fdba 	bl	80002e0 <HAL_GetTick>
 800176c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	055a      	lsls	r2, r3, #21
 8001772:	d4eb      	bmi.n	800174c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001774:	f7fe fdb4 	bl	80002e0 <HAL_GetTick>
 8001778:	1bc0      	subs	r0, r0, r7
 800177a:	2802      	cmp	r0, #2
 800177c:	d9f7      	bls.n	800176e <HAL_RCC_OscConfig+0x226>
 800177e:	e784      	b.n	800168a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001786:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001788:	f7fe fdaa 	bl	80002e0 <HAL_GetTick>
 800178c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	055b      	lsls	r3, r3, #21
 8001792:	f57f af62 	bpl.w	800165a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001796:	f7fe fda3 	bl	80002e0 <HAL_GetTick>
 800179a:	1bc0      	subs	r0, r0, r7
 800179c:	2802      	cmp	r0, #2
 800179e:	d9f6      	bls.n	800178e <HAL_RCC_OscConfig+0x246>
 80017a0:	e773      	b.n	800168a <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a2:	696b      	ldr	r3, [r5, #20]
 80017a4:	b19b      	cbz	r3, 80017ce <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80017a6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80017b2:	f7fe fd95 	bl	80002e0 <HAL_GetTick>
 80017b6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017bc:	079a      	lsls	r2, r3, #30
 80017be:	f53f af50 	bmi.w	8001662 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c2:	f7fe fd8d 	bl	80002e0 <HAL_GetTick>
 80017c6:	1bc0      	subs	r0, r0, r7
 80017c8:	2802      	cmp	r0, #2
 80017ca:	d9f5      	bls.n	80017b8 <HAL_RCC_OscConfig+0x270>
 80017cc:	e75d      	b.n	800168a <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 80017ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80017da:	f7fe fd81 	bl	80002e0 <HAL_GetTick>
 80017de:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017e4:	079b      	lsls	r3, r3, #30
 80017e6:	f57f af3c 	bpl.w	8001662 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ea:	f7fe fd79 	bl	80002e0 <HAL_GetTick>
 80017ee:	1bc0      	subs	r0, r0, r7
 80017f0:	2802      	cmp	r0, #2
 80017f2:	d9f5      	bls.n	80017e0 <HAL_RCC_OscConfig+0x298>
 80017f4:	e749      	b.n	800168a <HAL_RCC_OscConfig+0x142>
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	08004827 	.word	0x08004827
 8001800:	20000110 	.word	0x20000110
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001804:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001806:	00d8      	lsls	r0, r3, #3
 8001808:	d429      	bmi.n	800185e <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	65a3      	str	r3, [r4, #88]	; 0x58
 8001812:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800181c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001820:	4f71      	ldr	r7, [pc, #452]	; (80019e8 <HAL_RCC_OscConfig+0x4a0>)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	05d9      	lsls	r1, r3, #23
 8001826:	d51d      	bpl.n	8001864 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001828:	68ab      	ldr	r3, [r5, #8]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d12b      	bne.n	8001886 <HAL_RCC_OscConfig+0x33e>
 800182e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800183a:	f7fe fd51 	bl	80002e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001842:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001844:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001848:	079b      	lsls	r3, r3, #30
 800184a:	d542      	bpl.n	80018d2 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 800184c:	f1b8 0f00 	cmp.w	r8, #0
 8001850:	f43f af0b 	beq.w	800166a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185a:	65a3      	str	r3, [r4, #88]	; 0x58
 800185c:	e705      	b.n	800166a <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 800185e:	f04f 0800 	mov.w	r8, #0
 8001862:	e7dd      	b.n	8001820 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800186c:	f7fe fd38 	bl	80002e0 <HAL_GetTick>
 8001870:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	05da      	lsls	r2, r3, #23
 8001876:	d4d7      	bmi.n	8001828 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001878:	f7fe fd32 	bl	80002e0 <HAL_GetTick>
 800187c:	eba0 0009 	sub.w	r0, r0, r9
 8001880:	2802      	cmp	r0, #2
 8001882:	d9f6      	bls.n	8001872 <HAL_RCC_OscConfig+0x32a>
 8001884:	e701      	b.n	800168a <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001886:	2b05      	cmp	r3, #5
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x350>
 800188a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001896:	e7ca      	b.n	800182e <HAL_RCC_OscConfig+0x2e6>
 8001898:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800189c:	f022 0201 	bic.w	r2, r2, #1
 80018a0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80018a4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80018a8:	f022 0204 	bic.w	r2, r2, #4
 80018ac:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1c2      	bne.n	800183a <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 80018b4:	f7fe fd14 	bl	80002e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018bc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80018c2:	0798      	lsls	r0, r3, #30
 80018c4:	d5c2      	bpl.n	800184c <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7fe fd0b 	bl	80002e0 <HAL_GetTick>
 80018ca:	1bc0      	subs	r0, r0, r7
 80018cc:	4548      	cmp	r0, r9
 80018ce:	d9f6      	bls.n	80018be <HAL_RCC_OscConfig+0x376>
 80018d0:	e6db      	b.n	800168a <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7fe fd05 	bl	80002e0 <HAL_GetTick>
 80018d6:	1bc0      	subs	r0, r0, r7
 80018d8:	4548      	cmp	r0, r9
 80018da:	d9b3      	bls.n	8001844 <HAL_RCC_OscConfig+0x2fc>
 80018dc:	e6d5      	b.n	800168a <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80018e0:	b19b      	cbz	r3, 800190a <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 80018e2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80018ee:	f7fe fcf7 	bl	80002e0 <HAL_GetTick>
 80018f2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018f4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80018f8:	079a      	lsls	r2, r3, #30
 80018fa:	f53f aeba 	bmi.w	8001672 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fe:	f7fe fcef 	bl	80002e0 <HAL_GetTick>
 8001902:	1bc0      	subs	r0, r0, r7
 8001904:	2802      	cmp	r0, #2
 8001906:	d9f5      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3ac>
 8001908:	e6bf      	b.n	800168a <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 800190a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001916:	f7fe fce3 	bl	80002e0 <HAL_GetTick>
 800191a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800191c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001920:	079b      	lsls	r3, r3, #30
 8001922:	f57f aea6 	bpl.w	8001672 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001926:	f7fe fcdb 	bl	80002e0 <HAL_GetTick>
 800192a:	1bc0      	subs	r0, r0, r7
 800192c:	2802      	cmp	r0, #2
 800192e:	d9f5      	bls.n	800191c <HAL_RCC_OscConfig+0x3d4>
 8001930:	e6ab      	b.n	800168a <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001932:	2e0c      	cmp	r6, #12
 8001934:	f43f ae0c 	beq.w	8001550 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001938:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001940:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001942:	d136      	bne.n	80019b2 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8001944:	f7fe fccc 	bl	80002e0 <HAL_GetTick>
 8001948:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	0198      	lsls	r0, r3, #6
 800194e:	d42a      	bmi.n	80019a6 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001950:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001952:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001954:	06db      	lsls	r3, r3, #27
 8001956:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800195a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800195c:	4313      	orrs	r3, r2
 800195e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001960:	3a01      	subs	r2, #1
 8001962:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001966:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001968:	0852      	lsrs	r2, r2, #1
 800196a:	3a01      	subs	r2, #1
 800196c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001970:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001972:	0852      	lsrs	r2, r2, #1
 8001974:	3a01      	subs	r2, #1
 8001976:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800197a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001984:	68e3      	ldr	r3, [r4, #12]
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800198c:	f7fe fca8 	bl	80002e0 <HAL_GetTick>
 8001990:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	0199      	lsls	r1, r3, #6
 8001996:	f53f ae70 	bmi.w	800167a <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7fe fca1 	bl	80002e0 <HAL_GetTick>
 800199e:	1b40      	subs	r0, r0, r5
 80019a0:	2802      	cmp	r0, #2
 80019a2:	d9f6      	bls.n	8001992 <HAL_RCC_OscConfig+0x44a>
 80019a4:	e671      	b.n	800168a <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7fe fc9b 	bl	80002e0 <HAL_GetTick>
 80019aa:	1b80      	subs	r0, r0, r6
 80019ac:	2802      	cmp	r0, #2
 80019ae:	d9cc      	bls.n	800194a <HAL_RCC_OscConfig+0x402>
 80019b0:	e66b      	b.n	800168a <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019b6:	bf5e      	ittt	pl
 80019b8:	68e3      	ldrpl	r3, [r4, #12]
 80019ba:	f023 0303 	bicpl.w	r3, r3, #3
 80019be:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019c0:	68e3      	ldr	r3, [r4, #12]
 80019c2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80019cc:	f7fe fc88 	bl	80002e0 <HAL_GetTick>
 80019d0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	019b      	lsls	r3, r3, #6
 80019d6:	f57f ae50 	bpl.w	800167a <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019da:	f7fe fc81 	bl	80002e0 <HAL_GetTick>
 80019de:	1b40      	subs	r0, r0, r5
 80019e0:	2802      	cmp	r0, #2
 80019e2:	d9f6      	bls.n	80019d2 <HAL_RCC_OscConfig+0x48a>
 80019e4:	e651      	b.n	800168a <HAL_RCC_OscConfig+0x142>
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_RCC_ClockConfig>:
{
 80019ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80019f2:	4604      	mov	r4, r0
 80019f4:	b910      	cbnz	r0, 80019fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019f6:	2001      	movs	r0, #1
 80019f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <HAL_RCC_ClockConfig+0x114>)
 80019fe:	6813      	ldr	r3, [r2, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	428b      	cmp	r3, r1
 8001a06:	d329      	bcc.n	8001a5c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	07d9      	lsls	r1, r3, #31
 8001a0c:	d431      	bmi.n	8001a72 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0e:	6821      	ldr	r1, [r4, #0]
 8001a10:	078a      	lsls	r2, r1, #30
 8001a12:	d45b      	bmi.n	8001acc <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4a3a      	ldr	r2, [pc, #232]	; (8001b00 <HAL_RCC_ClockConfig+0x114>)
 8001a16:	6813      	ldr	r3, [r2, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	429e      	cmp	r6, r3
 8001a1e:	d35d      	bcc.n	8001adc <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	f011 0f04 	tst.w	r1, #4
 8001a24:	4d37      	ldr	r5, [pc, #220]	; (8001b04 <HAL_RCC_ClockConfig+0x118>)
 8001a26:	d164      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a28:	070b      	lsls	r3, r1, #28
 8001a2a:	d506      	bpl.n	8001a3a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2c:	68ab      	ldr	r3, [r5, #8]
 8001a2e:	6922      	ldr	r2, [r4, #16]
 8001a30:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a34:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a38:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a3a:	f7ff fd31 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 8001a3e:	68ab      	ldr	r3, [r5, #8]
 8001a40:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <HAL_RCC_ClockConfig+0x11c>)
 8001a42:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	40d8      	lsrs	r0, r3
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_RCC_ClockConfig+0x120>)
 8001a54:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7fe bc12 	b.w	8000280 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
 8001a62:	430b      	orrs	r3, r1
 8001a64:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4299      	cmp	r1, r3
 8001a6e:	d1c2      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xa>
 8001a70:	e7ca      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a72:	6862      	ldr	r2, [r4, #4]
 8001a74:	4d23      	ldr	r5, [pc, #140]	; (8001b04 <HAL_RCC_ClockConfig+0x118>)
 8001a76:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a78:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7a:	d11b      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a80:	d0b9      	beq.n	80019f6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	68ab      	ldr	r3, [r5, #8]
 8001a84:	f023 0303 	bic.w	r3, r3, #3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001a8c:	f7fe fc28 	bl	80002e0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a94:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	68ab      	ldr	r3, [r5, #8]
 8001a98:	6862      	ldr	r2, [r4, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001aa2:	d0b4      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7fe fc1c 	bl	80002e0 <HAL_GetTick>
 8001aa8:	1bc0      	subs	r0, r0, r7
 8001aaa:	4540      	cmp	r0, r8
 8001aac:	d9f3      	bls.n	8001a96 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001aae:	2003      	movs	r0, #3
}
 8001ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab4:	2a02      	cmp	r2, #2
 8001ab6:	d102      	bne.n	8001abe <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001abc:	e7e0      	b.n	8001a80 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001abe:	b912      	cbnz	r2, 8001ac6 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac0:	f013 0f02 	tst.w	r3, #2
 8001ac4:	e7dc      	b.n	8001a80 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001aca:	e7d9      	b.n	8001a80 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_RCC_ClockConfig+0x118>)
 8001ace:	68a0      	ldr	r0, [r4, #8]
 8001ad0:	6893      	ldr	r3, [r2, #8]
 8001ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad6:	4303      	orrs	r3, r0
 8001ad8:	6093      	str	r3, [r2, #8]
 8001ada:	e79b      	b.n	8001a14 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001adc:	6813      	ldr	r3, [r2, #0]
 8001ade:	f023 0307 	bic.w	r3, r3, #7
 8001ae2:	4333      	orrs	r3, r6
 8001ae4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	429e      	cmp	r6, r3
 8001aee:	d182      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xa>
 8001af0:	e796      	b.n	8001a20 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af2:	68ab      	ldr	r3, [r5, #8]
 8001af4:	68e2      	ldr	r2, [r4, #12]
 8001af6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60ab      	str	r3, [r5, #8]
 8001afe:	e793      	b.n	8001a28 <HAL_RCC_ClockConfig+0x3c>
 8001b00:	40022000 	.word	0x40022000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08004827 	.word	0x08004827
 8001b0c:	20000110 	.word	0x20000110

08001b10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b12:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <RCCEx_PLLSAI1_Config+0x114>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	f012 0f03 	tst.w	r2, #3
{
 8001b1a:	4605      	mov	r5, r0
 8001b1c:	460e      	mov	r6, r1
 8001b1e:	461c      	mov	r4, r3
 8001b20:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b22:	d039      	beq.n	8001b98 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	f002 0203 	and.w	r2, r2, #3
 8001b2a:	4282      	cmp	r2, r0
 8001b2c:	d14b      	bne.n	8001bc6 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8001b2e:	2a00      	cmp	r2, #0
 8001b30:	d049      	beq.n	8001bc6 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001b32:	68db      	ldr	r3, [r3, #12]
       ||
 8001b34:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001b36:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001b3a:	3301      	adds	r3, #1
       ||
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d142      	bne.n	8001bc6 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b46:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7fe fbca 	bl	80002e0 <HAL_GetTick>
 8001b4c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	011a      	lsls	r2, r3, #4
 8001b52:	d441      	bmi.n	8001bd8 <RCCEx_PLLSAI1_Config+0xc8>
 8001b54:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001b56:	2e00      	cmp	r6, #0
 8001b58:	d045      	beq.n	8001be6 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001b5a:	2e01      	cmp	r6, #1
 8001b5c:	d14f      	bne.n	8001bfe <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b5e:	6922      	ldr	r2, [r4, #16]
 8001b60:	6928      	ldr	r0, [r5, #16]
 8001b62:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001b66:	0840      	lsrs	r0, r0, #1
 8001b68:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001b6c:	3801      	subs	r0, #1
 8001b6e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001b72:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001b76:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b7e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7fe fbae 	bl	80002e0 <HAL_GetTick>
 8001b84:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	d545      	bpl.n	8001c18 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001b8c:	6923      	ldr	r3, [r4, #16]
 8001b8e:	69aa      	ldr	r2, [r5, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	6123      	str	r3, [r4, #16]
 8001b94:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d010      	beq.n	8001bbe <RCCEx_PLLSAI1_Config+0xae>
 8001b9c:	2803      	cmp	r0, #3
 8001b9e:	d014      	beq.n	8001bca <RCCEx_PLLSAI1_Config+0xba>
 8001ba0:	2801      	cmp	r0, #1
 8001ba2:	d110      	bne.n	8001bc6 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	079f      	lsls	r7, r3, #30
 8001ba8:	d5f5      	bpl.n	8001b96 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001baa:	68e3      	ldr	r3, [r4, #12]
 8001bac:	686a      	ldr	r2, [r5, #4]
 8001bae:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001bb2:	3a01      	subs	r2, #1
 8001bb4:	4318      	orrs	r0, r3
 8001bb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001bba:	60e0      	str	r0, [r4, #12]
 8001bbc:	e7c0      	b.n	8001b40 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001bc4:	d1f1      	bne.n	8001baa <RCCEx_PLLSAI1_Config+0x9a>
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	0391      	lsls	r1, r2, #14
 8001bce:	d4ec      	bmi.n	8001baa <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001bd6:	e7f5      	b.n	8001bc4 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001bd8:	f7fe fb82 	bl	80002e0 <HAL_GetTick>
 8001bdc:	1bc0      	subs	r0, r0, r7
 8001bde:	2802      	cmp	r0, #2
 8001be0:	d9b5      	bls.n	8001b4e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001be2:	2003      	movs	r0, #3
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001be6:	6922      	ldr	r2, [r4, #16]
 8001be8:	68e9      	ldr	r1, [r5, #12]
 8001bea:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001bee:	06c9      	lsls	r1, r1, #27
 8001bf0:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001bf4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001bf8:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001bfa:	6123      	str	r3, [r4, #16]
 8001bfc:	e7bc      	b.n	8001b78 <RCCEx_PLLSAI1_Config+0x68>
 8001bfe:	6923      	ldr	r3, [r4, #16]
 8001c00:	6968      	ldr	r0, [r5, #20]
 8001c02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001c06:	0840      	lsrs	r0, r0, #1
 8001c08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001c0c:	3801      	subs	r0, #1
 8001c0e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001c12:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001c16:	e7f0      	b.n	8001bfa <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001c18:	f7fe fb62 	bl	80002e0 <HAL_GetTick>
 8001c1c:	1b80      	subs	r0, r0, r6
 8001c1e:	2802      	cmp	r0, #2
 8001c20:	d9b1      	bls.n	8001b86 <RCCEx_PLLSAI1_Config+0x76>
 8001c22:	e7de      	b.n	8001be2 <RCCEx_PLLSAI1_Config+0xd2>
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c2c:	6805      	ldr	r5, [r0, #0]
 8001c2e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001c32:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c34:	d00e      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c36:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001c38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001c3c:	d053      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001c3e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001c42:	d055      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8001c44:	2900      	cmp	r1, #0
 8001c46:	d15e      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c48:	3004      	adds	r0, #4
 8001c4a:	f7ff ff61 	bl	8001b10 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8001c4e:	4605      	mov	r5, r0
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d04d      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	039e      	lsls	r6, r3, #14
 8001c58:	d563      	bpl.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c5a:	4ead      	ldr	r6, [pc, #692]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001c5c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c5e:	00d8      	lsls	r0, r3, #3
 8001c60:	f140 814a 	bpl.w	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    FlagStatus       pwrclkchanged = RESET;
 8001c64:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c66:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8001f14 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8001c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001c76:	f7fe fb33 	bl	80002e0 <HAL_GetTick>
 8001c7a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8001c80:	05d9      	lsls	r1, r3, #23
 8001c82:	d542      	bpl.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 8001c84:	2d00      	cmp	r5, #0
 8001c86:	d147      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c88:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c8c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c90:	d014      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x94>
 8001c92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d011      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c98:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c9c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001ca0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ca4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ca8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cb4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001cb8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cbc:	07da      	lsls	r2, r3, #31
 8001cbe:	d509      	bpl.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 8001cc0:	f7fe fb0e 	bl	80002e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001cc8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cca:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001cce:	079b      	lsls	r3, r3, #30
 8001cd0:	f140 80e9 	bpl.w	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cd4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001cd8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001ce4:	e018      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001ce6:	4a8a      	ldr	r2, [pc, #552]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ce8:	68d3      	ldr	r3, [r2, #12]
 8001cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cee:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cf0:	4a87      	ldr	r2, [pc, #540]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001cf2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001cf4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cf8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d02:	2500      	movs	r5, #0
 8001d04:	e7a6      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001d06:	2501      	movs	r5, #1
 8001d08:	e7a4      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7fe fae9 	bl	80002e0 <HAL_GetTick>
 8001d0e:	eba0 0009 	sub.w	r0, r0, r9
 8001d12:	2802      	cmp	r0, #2
 8001d14:	d9b2      	bls.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 8001d16:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001d18:	b11f      	cbz	r7, 8001d22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d20:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	07d8      	lsls	r0, r3, #31
 8001d26:	d508      	bpl.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d28:	4979      	ldr	r1, [pc, #484]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d2a:	6a20      	ldr	r0, [r4, #32]
 8001d2c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d30:	f022 0203 	bic.w	r2, r2, #3
 8001d34:	4302      	orrs	r2, r0
 8001d36:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d3a:	0799      	lsls	r1, r3, #30
 8001d3c:	d508      	bpl.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d3e:	4974      	ldr	r1, [pc, #464]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d40:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001d42:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d46:	f022 020c 	bic.w	r2, r2, #12
 8001d4a:	4302      	orrs	r2, r0
 8001d4c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d50:	075a      	lsls	r2, r3, #29
 8001d52:	d508      	bpl.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d54:	496e      	ldr	r1, [pc, #440]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d5c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001d60:	4302      	orrs	r2, r0
 8001d62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d66:	069f      	lsls	r7, r3, #26
 8001d68:	d508      	bpl.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d6a:	4969      	ldr	r1, [pc, #420]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001d6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d76:	4302      	orrs	r2, r0
 8001d78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d7c:	059e      	lsls	r6, r3, #22
 8001d7e:	d508      	bpl.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d80:	4963      	ldr	r1, [pc, #396]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001d84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d88:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001d8c:	4302      	orrs	r2, r0
 8001d8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d92:	0558      	lsls	r0, r3, #21
 8001d94:	d508      	bpl.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d96:	495e      	ldr	r1, [pc, #376]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d98:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001d9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d9e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001da2:	4302      	orrs	r2, r0
 8001da4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001da8:	0659      	lsls	r1, r3, #25
 8001daa:	d508      	bpl.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dac:	4958      	ldr	r1, [pc, #352]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001dae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001db0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001db4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001db8:	4302      	orrs	r2, r0
 8001dba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001dbe:	061a      	lsls	r2, r3, #24
 8001dc0:	d508      	bpl.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001dc2:	4953      	ldr	r1, [pc, #332]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001dc4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001dce:	4302      	orrs	r2, r0
 8001dd0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dd4:	05df      	lsls	r7, r3, #23
 8001dd6:	d508      	bpl.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dd8:	494d      	ldr	r1, [pc, #308]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001dda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001ddc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001de0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001de4:	4302      	orrs	r2, r0
 8001de6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dea:	049e      	lsls	r6, r3, #18
 8001dec:	d50f      	bpl.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dee:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001df0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001df2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001df6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001dfa:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001dfc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e04:	d157      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e06:	68d3      	ldr	r3, [r2, #12]
 8001e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	0318      	lsls	r0, r3, #12
 8001e12:	d50f      	bpl.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e14:	4a3e      	ldr	r2, [pc, #248]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e16:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001e18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e1c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e20:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e22:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e2a:	d14f      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e2c:	68d3      	ldr	r3, [r2, #12]
 8001e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e32:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	0359      	lsls	r1, r3, #13
 8001e38:	d50f      	bpl.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e3a:	4a35      	ldr	r2, [pc, #212]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e3c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001e3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e42:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e46:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e48:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e50:	d147      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e52:	68d3      	ldr	r3, [r2, #12]
 8001e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e58:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	045a      	lsls	r2, r3, #17
 8001e5e:	d512      	bpl.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e60:	492b      	ldr	r1, [pc, #172]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e62:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e64:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e68:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e6c:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e6e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e76:	d106      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e78:	2102      	movs	r1, #2
 8001e7a:	1d20      	adds	r0, r4, #4
 8001e7c:	f7ff fe48 	bl	8001b10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001e80:	2800      	cmp	r0, #0
 8001e82:	bf18      	it	ne
 8001e84:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	d508      	bpl.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001e90:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	b003      	add	sp, #12
 8001ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7fe fa1b 	bl	80002e0 <HAL_GetTick>
 8001eaa:	eba0 0008 	sub.w	r0, r0, r8
 8001eae:	4548      	cmp	r0, r9
 8001eb0:	f67f af0b 	bls.w	8001cca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001eb4:	e72f      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001eb6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001eba:	d1a8      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	1d20      	adds	r0, r4, #4
 8001ec0:	f7ff fe26 	bl	8001b10 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	bf18      	it	ne
 8001ec8:	4605      	movne	r5, r0
 8001eca:	e7a0      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001ecc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001ed0:	d1b0      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	1d20      	adds	r0, r4, #4
 8001ed6:	f7ff fe1b 	bl	8001b10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001eda:	2800      	cmp	r0, #0
 8001edc:	bf18      	it	ne
 8001ede:	4605      	movne	r5, r0
 8001ee0:	e7a8      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001ee2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001ee6:	d1b8      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x232>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ee8:	2101      	movs	r1, #1
 8001eea:	1d20      	adds	r0, r4, #4
 8001eec:	f7ff fe10 	bl	8001b10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	bf18      	it	ne
 8001ef4:	4605      	movne	r5, r0
 8001ef6:	e7b0      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x232>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	65b3      	str	r3, [r6, #88]	; 0x58
 8001f00:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f0a:	2701      	movs	r7, #1
 8001f0c:	e6ab      	b.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000

08001f18 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001f18:	4a02      	ldr	r2, [pc, #8]	; (8001f24 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4770      	bx	lr
 8001f24:	40021000 	.word	0x40021000

08001f28 <HAL_RCCEx_CRSConfig>:
  __HAL_RCC_CRS_FORCE_RESET();
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_RCCEx_CRSConfig+0x44>)
 8001f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8001f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f34:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8001f3a:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	6882      	ldr	r2, [r0, #8]
 8001f42:	4313      	orrs	r3, r2
  value |= pInit->ReloadValue;
 8001f44:	68c2      	ldr	r2, [r0, #12]
 8001f46:	4313      	orrs	r3, r2
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8001f48:	6902      	ldr	r2, [r0, #16]
 8001f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  WRITE_REG(CRS->CFGR, value);
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_RCCEx_CRSConfig+0x48>)
 8001f50:	6053      	str	r3, [r2, #4]
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8001f52:	6813      	ldr	r3, [r2, #0]
 8001f54:	6941      	ldr	r1, [r0, #20]
 8001f56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f5a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f5e:	6013      	str	r3, [r2, #0]
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8001f60:	6813      	ldr	r3, [r2, #0]
 8001f62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40006000 	.word	0x40006000

08001f74 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001f74:	6802      	ldr	r2, [r0, #0]
{
 8001f76:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001f78:	68d3      	ldr	r3, [r2, #12]
 8001f7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f7e:	60d3      	str	r3, [r2, #12]
{
 8001f80:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8001f82:	f7fe f9ad 	bl	80002e0 <HAL_GetTick>
 8001f86:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	069b      	lsls	r3, r3, #26
 8001f8e:	d501      	bpl.n	8001f94 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001f90:	2000      	movs	r0, #0
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001f94:	f7fe f9a4 	bl	80002e0 <HAL_GetTick>
 8001f98:	1b40      	subs	r0, r0, r5
 8001f9a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f9e:	d9f3      	bls.n	8001f88 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001fa0:	2003      	movs	r0, #3
}
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}

08001fa4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001fa4:	b538      	push	{r3, r4, r5, lr}
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001fa6:	6803      	ldr	r3, [r0, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	0652      	lsls	r2, r2, #25
{
 8001fac:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001fae:	d501      	bpl.n	8001fb4 <RTC_EnterInitMode+0x10>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001fba:	f7fe f991 	bl	80002e0 <HAL_GetTick>
 8001fbe:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	065b      	lsls	r3, r3, #25
 8001fc6:	d4f3      	bmi.n	8001fb0 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001fc8:	f7fe f98a 	bl	80002e0 <HAL_GetTick>
 8001fcc:	1b40      	subs	r0, r0, r5
 8001fce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fd2:	d9f5      	bls.n	8001fc0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001fd4:	2003      	movs	r0, #3
}
 8001fd6:	bd38      	pop	{r3, r4, r5, pc}

08001fd8 <HAL_RTC_Init>:
{
 8001fd8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 8001fda:	4604      	mov	r4, r0
 8001fdc:	b1d8      	cbz	r0, 8002016 <HAL_RTC_Init+0x3e>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8001fde:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fe6:	b91b      	cbnz	r3, 8001ff0 <HAL_RTC_Init+0x18>
      hrtc->Lock = HAL_UNLOCKED;
 8001fe8:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8001fec:	f001 fcf4 	bl	80039d8 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	22ca      	movs	r2, #202	; 0xca
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8001ffc:	2253      	movs	r2, #83	; 0x53
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff ffcf 	bl	8001fa4 <RTC_EnterInitMode>
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	4605      	mov	r5, r0
 800200a:	b138      	cbz	r0, 800201c <HAL_RTC_Init+0x44>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002010:	2304      	movs	r3, #4
 8002012:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  HAL_StatusTypeDef status = HAL_ERROR;
 8002016:	2501      	movs	r5, #1
}
 8002018:	4628      	mov	r0, r5
 800201a:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800201c:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800201e:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002020:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002028:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800202a:	6862      	ldr	r2, [r4, #4]
 800202c:	6899      	ldr	r1, [r3, #8]
 800202e:	4302      	orrs	r2, r0
 8002030:	69a0      	ldr	r0, [r4, #24]
 8002032:	4302      	orrs	r2, r0
 8002034:	430a      	orrs	r2, r1
 8002036:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002038:	68e2      	ldr	r2, [r4, #12]
 800203a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	68a1      	ldr	r1, [r4, #8]
 8002040:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002044:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800204c:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	069b      	lsls	r3, r3, #26
 8002052:	d405      	bmi.n	8002060 <HAL_RTC_Init+0x88>
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff ff8d 	bl	8001f74 <HAL_RTC_WaitForSynchro>
 800205a:	b108      	cbz	r0, 8002060 <HAL_RTC_Init+0x88>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	e7d5      	b.n	800200c <HAL_RTC_Init+0x34>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002060:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002062:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002066:	f022 0203 	bic.w	r2, r2, #3
 800206a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800206c:	69e2      	ldr	r2, [r4, #28]
 800206e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002070:	4302      	orrs	r2, r0
 8002072:	430a      	orrs	r2, r1
 8002074:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002076:	22ff      	movs	r2, #255	; 0xff
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 800207a:	2301      	movs	r3, #1
 800207c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  return status;
 8002080:	e7ca      	b.n	8002018 <HAL_RTC_Init+0x40>

08002082 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002082:	b084      	sub	sp, #16
 8002084:	a801      	add	r0, sp, #4
 8002086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800208a:	b004      	add	sp, #16
 800208c:	2000      	movs	r0, #0
 800208e:	4770      	bx	lr

08002090 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002090:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002094:	b29b      	uxth	r3, r3
 8002096:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800209a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80020a2:	2000      	movs	r0, #0
 80020a4:	4770      	bx	lr

080020a6 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80020a6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80020aa:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80020ae:	045b      	lsls	r3, r3, #17
 80020b0:	0c5b      	lsrs	r3, r3, #17
 80020b2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80020b6:	2000      	movs	r0, #0
 80020b8:	4770      	bx	lr

080020ba <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80020ba:	2000      	movs	r0, #0
 80020bc:	4770      	bx	lr

080020be <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80020be:	b084      	sub	sp, #16
 80020c0:	b510      	push	{r4, lr}
 80020c2:	ac03      	add	r4, sp, #12
 80020c4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80020c8:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80020d0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80020d4:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80020d8:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80020dc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80020e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80020ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80020f2:	b004      	add	sp, #16
 80020f4:	4610      	mov	r0, r2
 80020f6:	4770      	bx	lr

080020f8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80020fa:	780c      	ldrb	r4, [r1, #0]
 80020fc:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002100:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 8002104:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002106:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800210a:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800210c:	0412      	lsls	r2, r2, #16
 800210e:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8002110:	2803      	cmp	r0, #3
 8002112:	d850      	bhi.n	80021b6 <USB_ActivateEndpoint+0xbe>
 8002114:	e8df f000 	tbb	[pc, r0]
 8002118:	49044c02 	.word	0x49044c02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800211c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002120:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 8002122:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002126:	780e      	ldrb	r6, [r1, #0]
 8002128:	4cab      	ldr	r4, [pc, #684]	; (80023d8 <USB_ActivateEndpoint+0x2e0>)
 800212a:	b235      	sxth	r5, r6
 800212c:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002130:	b292      	uxth	r2, r2
 8002132:	4022      	ands	r2, r4
 8002134:	4332      	orrs	r2, r6
 8002136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800213a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800213e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8002142:	7b0d      	ldrb	r5, [r1, #12]
 8002144:	780a      	ldrb	r2, [r1, #0]
 8002146:	2d00      	cmp	r5, #0
 8002148:	f040 8082 	bne.w	8002250 <USB_ActivateEndpoint+0x158>
  {
    if (ep->is_in != 0U)
 800214c:	784f      	ldrb	r7, [r1, #1]
 800214e:	88ce      	ldrh	r6, [r1, #6]
 8002150:	2508      	movs	r5, #8
 8002152:	b397      	cbz	r7, 80021ba <USB_ActivateEndpoint+0xc2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002154:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8002158:	fb15 3202 	smlabb	r2, r5, r2, r3
 800215c:	fa12 f287 	uxtah	r2, r2, r7
 8002160:	f026 0601 	bic.w	r6, r6, #1
 8002164:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002168:	780d      	ldrb	r5, [r1, #0]
 800216a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800216e:	0656      	lsls	r6, r2, #25
 8002170:	d509      	bpl.n	8002186 <USB_ActivateEndpoint+0x8e>
 8002172:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002176:	b292      	uxth	r2, r2
 8002178:	4014      	ands	r4, r2
 800217a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800217e:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8002182:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002186:	78ca      	ldrb	r2, [r1, #3]
 8002188:	7809      	ldrb	r1, [r1, #0]
 800218a:	4c94      	ldr	r4, [pc, #592]	; (80023dc <USB_ActivateEndpoint+0x2e4>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800218c:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 800218e:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002190:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002194:	b292      	uxth	r2, r2
 8002196:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 800219a:	d001      	beq.n	80021a0 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800219c:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80021a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a8:	e0c5      	b.n	8002336 <USB_ActivateEndpoint+0x23e>
      wEpRegVal |= USB_EP_INTERRUPT;
 80021aa:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80021ae:	e7b7      	b.n	8002120 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80021b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021b4:	e7b4      	b.n	8002120 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80021b6:	2001      	movs	r0, #1
 80021b8:	e7b3      	b.n	8002122 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80021ba:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80021be:	fb15 3202 	smlabb	r2, r5, r2, r3
 80021c2:	fa12 f284 	uxtah	r2, r2, r4
 80021c6:	f026 0601 	bic.w	r6, r6, #1
 80021ca:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80021ce:	780a      	ldrb	r2, [r1, #0]
 80021d0:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80021d4:	690c      	ldr	r4, [r1, #16]
 80021d6:	fb15 3202 	smlabb	r2, r5, r2, r3
 80021da:	b2b6      	uxth	r6, r6
 80021dc:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80021e0:	b954      	cbnz	r4, 80021f8 <USB_ActivateEndpoint+0x100>
 80021e2:	5b94      	ldrh	r4, [r2, r6]
 80021e4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 80021e8:	04a4      	lsls	r4, r4, #18
 80021ea:	0ca4      	lsrs	r4, r4, #18
 80021ec:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80021f0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80021f4:	5394      	strh	r4, [r2, r6]
 80021f6:	e007      	b.n	8002208 <USB_ActivateEndpoint+0x110>
 80021f8:	2c3d      	cmp	r4, #61	; 0x3d
 80021fa:	d824      	bhi.n	8002246 <USB_ActivateEndpoint+0x14e>
 80021fc:	0865      	lsrs	r5, r4, #1
 80021fe:	07e4      	lsls	r4, r4, #31
 8002200:	bf48      	it	mi
 8002202:	3501      	addmi	r5, #1
 8002204:	02ad      	lsls	r5, r5, #10
 8002206:	5395      	strh	r5, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002208:	780c      	ldrb	r4, [r1, #0]
 800220a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800220e:	0452      	lsls	r2, r2, #17
 8002210:	d50d      	bpl.n	800222e <USB_ActivateEndpoint+0x136>
 8002212:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002216:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800221a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800221e:	0412      	lsls	r2, r2, #16
 8002220:	0c12      	lsrs	r2, r2, #16
 8002222:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800222a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800222e:	7809      	ldrb	r1, [r1, #0]
 8002230:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002234:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002238:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800223c:	0412      	lsls	r2, r2, #16
 800223e:	0c12      	lsrs	r2, r2, #16
 8002240:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002244:	e7ac      	b.n	80021a0 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002246:	4d66      	ldr	r5, [pc, #408]	; (80023e0 <USB_ActivateEndpoint+0x2e8>)
 8002248:	0964      	lsrs	r4, r4, #5
 800224a:	ea45 2484 	orr.w	r4, r5, r4, lsl #10
 800224e:	e7d1      	b.n	80021f4 <USB_ActivateEndpoint+0xfc>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002250:	b212      	sxth	r2, r2
 8002252:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002256:	b2ad      	uxth	r5, r5
 8002258:	4025      	ands	r5, r4
 800225a:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 800225e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002262:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002266:	780e      	ldrb	r6, [r1, #0]
 8002268:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800226c:	2208      	movs	r2, #8
 800226e:	fb12 3606 	smlabb	r6, r2, r6, r3
 8002272:	fa16 f585 	uxtah	r5, r6, r5
 8002276:	890e      	ldrh	r6, [r1, #8]
 8002278:	f026 0601 	bic.w	r6, r6, #1
 800227c:	f8a5 6400 	strh.w	r6, [r5, #1024]	; 0x400
 8002280:	780e      	ldrb	r6, [r1, #0]
 8002282:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002286:	fb12 3206 	smlabb	r2, r2, r6, r3
 800228a:	fa12 f285 	uxtah	r2, r2, r5
 800228e:	894d      	ldrh	r5, [r1, #10]
 8002290:	f025 0501 	bic.w	r5, r5, #1
 8002294:	f8a2 5404 	strh.w	r5, [r2, #1028]	; 0x404
 8002298:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800229a:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800229c:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 800229e:	2d00      	cmp	r5, #0
 80022a0:	d14c      	bne.n	800233c <USB_ActivateEndpoint+0x244>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022a2:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80022a6:	046f      	lsls	r7, r5, #17
 80022a8:	d509      	bpl.n	80022be <USB_ActivateEndpoint+0x1c6>
 80022aa:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80022ae:	b2ad      	uxth	r5, r5
 80022b0:	402c      	ands	r4, r5
 80022b2:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80022b6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80022ba:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022be:	780c      	ldrb	r4, [r1, #0]
 80022c0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022c4:	0656      	lsls	r6, r2, #25
 80022c6:	d50d      	bpl.n	80022e4 <USB_ActivateEndpoint+0x1ec>
 80022c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80022d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022d4:	0412      	lsls	r2, r2, #16
 80022d6:	0c12      	lsrs	r2, r2, #16
 80022d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80022e0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80022e4:	780c      	ldrb	r4, [r1, #0]
 80022e6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022ea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80022ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022f2:	0412      	lsls	r2, r2, #16
 80022f4:	0c12      	lsrs	r2, r2, #16
 80022f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022fa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80022fe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002302:	780d      	ldrb	r5, [r1, #0]
 8002304:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800230c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002310:	0412      	lsls	r2, r2, #16
 8002312:	0c12      	lsrs	r2, r2, #16
 8002314:	f248 0480 	movw	r4, #32896	; 0x8080
 8002318:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800231c:	4322      	orrs	r2, r4
 800231e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002322:	7809      	ldrb	r1, [r1, #0]
 8002324:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002328:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800232c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002330:	0412      	lsls	r2, r2, #16
 8002332:	0c12      	lsrs	r2, r2, #16
 8002334:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002336:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 800233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800233c:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002340:	046d      	lsls	r5, r5, #17
 8002342:	d509      	bpl.n	8002358 <USB_ActivateEndpoint+0x260>
 8002344:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002348:	b2ad      	uxth	r5, r5
 800234a:	402c      	ands	r4, r5
 800234c:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8002350:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002354:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002358:	780c      	ldrb	r4, [r1, #0]
 800235a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800235e:	0652      	lsls	r2, r2, #25
 8002360:	d50d      	bpl.n	800237e <USB_ActivateEndpoint+0x286>
 8002362:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002366:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800236a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800236e:	0412      	lsls	r2, r2, #16
 8002370:	0c12      	lsrs	r2, r2, #16
 8002372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002376:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800237a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800237e:	780c      	ldrb	r4, [r1, #0]
 8002380:	4d16      	ldr	r5, [pc, #88]	; (80023dc <USB_ActivateEndpoint+0x2e4>)
 8002382:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002386:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800238a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800238e:	0412      	lsls	r2, r2, #16
 8002390:	0c12      	lsrs	r2, r2, #16
 8002392:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800239a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800239e:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 80023a0:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80023a2:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 80023a4:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80023a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023aa:	b292      	uxth	r2, r2
 80023ac:	ea02 0205 	and.w	r2, r2, r5
 80023b0:	bf18      	it	ne
 80023b2:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80023b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023be:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80023c2:	7809      	ldrb	r1, [r1, #0]
 80023c4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80023c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023d0:	0412      	lsls	r2, r2, #16
 80023d2:	0c12      	lsrs	r2, r2, #16
 80023d4:	e6e4      	b.n	80021a0 <USB_ActivateEndpoint+0xa8>
 80023d6:	bf00      	nop
 80023d8:	ffff8f8f 	.word	0xffff8f8f
 80023dc:	ffff8fbf 	.word	0xffff8fbf
 80023e0:	ffff8000 	.word	0xffff8000

080023e4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80023e4:	b510      	push	{r4, lr}
 80023e6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80023e8:	7b0c      	ldrb	r4, [r1, #12]
 80023ea:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023ec:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 80023ee:	2c00      	cmp	r4, #0
 80023f0:	d13d      	bne.n	800246e <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 80023f2:	b312      	cbz	r2, 800243a <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023f4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80023f8:	0652      	lsls	r2, r2, #25
 80023fa:	d50d      	bpl.n	8002418 <USB_DeactivateEndpoint+0x34>
 80023fc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002400:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002404:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002408:	0412      	lsls	r2, r2, #16
 800240a:	0c12      	lsrs	r2, r2, #16
 800240c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002410:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002414:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002418:	780a      	ldrb	r2, [r1, #0]
 800241a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800241e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002432:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002436:	2000      	movs	r0, #0
 8002438:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800243a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800243e:	0454      	lsls	r4, r2, #17
 8002440:	d50d      	bpl.n	800245e <USB_DeactivateEndpoint+0x7a>
 8002442:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002446:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800244a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800244e:	0412      	lsls	r2, r2, #16
 8002450:	0c12      	lsrs	r2, r2, #16
 8002452:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800245a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800245e:	780a      	ldrb	r2, [r1, #0]
 8002460:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246c:	e7db      	b.n	8002426 <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 800246e:	2a00      	cmp	r2, #0
 8002470:	d14e      	bne.n	8002510 <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002472:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002476:	0452      	lsls	r2, r2, #17
 8002478:	d50d      	bpl.n	8002496 <USB_DeactivateEndpoint+0xb2>
 800247a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800247e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002482:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002486:	0412      	lsls	r2, r2, #16
 8002488:	0c12      	lsrs	r2, r2, #16
 800248a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800248e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002492:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002496:	780a      	ldrb	r2, [r1, #0]
 8002498:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800249c:	065c      	lsls	r4, r3, #25
 800249e:	d50d      	bpl.n	80024bc <USB_DeactivateEndpoint+0xd8>
 80024a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80024bc:	780a      	ldrb	r2, [r1, #0]
 80024be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	041b      	lsls	r3, r3, #16
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024da:	780c      	ldrb	r4, [r1, #0]
 80024dc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80024e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	f248 0280 	movw	r2, #32896	; 0x8080
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024f6:	7809      	ldrb	r1, [r1, #0]
 80024f8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80024fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	0c1b      	lsrs	r3, r3, #16
 8002508:	4313      	orrs	r3, r2
 800250a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800250e:	e792      	b.n	8002436 <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002510:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002514:	0452      	lsls	r2, r2, #17
 8002516:	d50d      	bpl.n	8002534 <USB_DeactivateEndpoint+0x150>
 8002518:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800251c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002520:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002524:	0412      	lsls	r2, r2, #16
 8002526:	0c12      	lsrs	r2, r2, #16
 8002528:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800252c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002530:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002534:	780a      	ldrb	r2, [r1, #0]
 8002536:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800253a:	065b      	lsls	r3, r3, #25
 800253c:	d50d      	bpl.n	800255a <USB_DeactivateEndpoint+0x176>
 800253e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002552:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002556:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800255a:	780a      	ldrb	r2, [r1, #0]
 800255c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	0c1b      	lsrs	r3, r3, #16
 800256c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002574:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002578:	780c      	ldrb	r4, [r1, #0]
 800257a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800257e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002586:	041b      	lsls	r3, r3, #16
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	f248 0280 	movw	r2, #32896	; 0x8080
 800258e:	4313      	orrs	r3, r2
 8002590:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002594:	7809      	ldrb	r1, [r1, #0]
 8002596:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800259a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800259e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a2:	e7af      	b.n	8002504 <USB_DeactivateEndpoint+0x120>

080025a4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80025a4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80025a6:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80025a8:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 80025aa:	b18b      	cbz	r3, 80025d0 <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80025ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80025c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80025cc:	2000      	movs	r0, #0
 80025ce:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80025d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	0c1b      	lsrs	r3, r3, #16
 80025e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025e4:	e7ec      	b.n	80025c0 <USB_EPSetStall+0x1c>

080025e6 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80025e6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80025e8:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80025ea:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 80025ec:	b323      	cbz	r3, 8002638 <USB_EPClearStall+0x52>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80025ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025f2:	065b      	lsls	r3, r3, #25
 80025f4:	d50d      	bpl.n	8002612 <USB_EPClearStall+0x2c>
 80025f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800260e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002612:	780a      	ldrb	r2, [r1, #0]
 8002614:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800261c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	0c1b      	lsrs	r3, r3, #16
 8002624:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002630:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002634:	2000      	movs	r0, #0
 8002636:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002638:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800263c:	045b      	lsls	r3, r3, #17
 800263e:	d50d      	bpl.n	800265c <USB_EPClearStall+0x76>
 8002640:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002658:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800265c:	780a      	ldrb	r2, [r1, #0]
 800265e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002672:	e7d9      	b.n	8002628 <USB_EPClearStall+0x42>

08002674 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002674:	b911      	cbnz	r1, 800267c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800267c:	2000      	movs	r0, #0
 800267e:	4770      	bx	lr

08002680 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8002680:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8002684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268c:	b29b      	uxth	r3, r3
 800268e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8002692:	2000      	movs	r0, #0
 8002694:	4770      	bx	lr

08002696 <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8002696:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800269a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800269e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 80026a2:	2000      	movs	r0, #0
 80026a4:	4770      	bx	lr

080026a6 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80026a6:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80026aa:	b280      	uxth	r0, r0
 80026ac:	4770      	bx	lr

080026ae <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80026ae:	2000      	movs	r0, #0
 80026b0:	4770      	bx	lr

080026b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80026b2:	b510      	push	{r4, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80026b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80026b8:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80026ba:	4410      	add	r0, r2
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	4602      	mov	r2, r0
 80026c2:	4403      	add	r3, r0
 80026c4:	1a14      	subs	r4, r2, r0

  for (i = n; i != 0U; i--)
 80026c6:	429a      	cmp	r2, r3
 80026c8:	440c      	add	r4, r1
 80026ca:	d100      	bne.n	80026ce <USB_WritePMA+0x1c>
    {
      pdwVal++;
    }
    pBuf++;
  }
}
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	8824      	ldrh	r4, [r4, #0]
    *pdwVal = (uint16_t)temp2;
 80026d0:	f822 4b02 	strh.w	r4, [r2], #2
 80026d4:	e7f6      	b.n	80026c4 <USB_WritePMA+0x12>
	...

080026d8 <USB_EPStartXfer>:
{
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 80026dc:	7848      	ldrb	r0, [r1, #1]
  uint32_t len = ep->xfer_len;
 80026de:	698a      	ldr	r2, [r1, #24]
 80026e0:	690b      	ldr	r3, [r1, #16]
 80026e2:	7b0f      	ldrb	r7, [r1, #12]
  if (ep->is_in == 1U)
 80026e4:	2801      	cmp	r0, #1
{
 80026e6:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 80026e8:	d16b      	bne.n	80027c2 <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 80026ea:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80026ec:	bf97      	itett	ls
 80026ee:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80026f0:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80026f2:	618b      	strls	r3, [r1, #24]
 80026f4:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80026f6:	bf88      	it	hi
 80026f8:	618a      	strhi	r2, [r1, #24]
 80026fa:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 80026fc:	bb0f      	cbnz	r7, 8002742 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80026fe:	88ca      	ldrh	r2, [r1, #6]
 8002700:	6949      	ldr	r1, [r1, #20]
 8002702:	4633      	mov	r3, r6
 8002704:	4620      	mov	r0, r4
 8002706:	f7ff ffd4 	bl	80026b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800270a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800270e:	782a      	ldrb	r2, [r5, #0]
 8002710:	f204 4102 	addw	r1, r4, #1026	; 0x402
 8002714:	fa11 f383 	uxtah	r3, r1, r3
 8002718:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800271c:	782a      	ldrb	r2, [r5, #0]
 800271e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 800273e:	2000      	movs	r0, #0
 8002740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002742:	7809      	ldrb	r1, [r1, #0]
 8002744:	b20a      	sxth	r2, r1
 8002746:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 800274a:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800274e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002752:	bf15      	itete	ne
 8002754:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002758:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800275c:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002760:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002764:	bf15      	itete	ne
 8002766:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800276a:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 800276e:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8002770:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002772:	6969      	ldr	r1, [r5, #20]
 8002774:	4633      	mov	r3, r6
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff ff9b 	bl	80026b2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800277c:	786b      	ldrb	r3, [r5, #1]
 800277e:	782a      	ldrb	r2, [r5, #0]
 8002780:	b97b      	cbnz	r3, 80027a2 <USB_EPStartXfer+0xca>
 8002782:	b212      	sxth	r2, r2
 8002784:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002798:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800279c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80027a0:	e7bc      	b.n	800271c <USB_EPStartXfer+0x44>
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d1ba      	bne.n	800271c <USB_EPStartXfer+0x44>
 80027a6:	b212      	sxth	r2, r2
 80027a8:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80027ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c0:	e7ec      	b.n	800279c <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 80027c2:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80027c4:	bf95      	itete	ls
 80027c6:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80027c8:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80027ca:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 80027cc:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 80027ce:	bf98      	it	ls
 80027d0:	4613      	movls	r3, r2
 80027d2:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 80027d4:	b9a7      	cbnz	r7, 8002800 <USB_EPStartXfer+0x128>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80027d6:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80027da:	f204 4006 	addw	r0, r4, #1030	; 0x406
 80027de:	fa10 f282 	uxtah	r2, r0, r2
 80027e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d137      	bne.n	800285a <USB_EPStartXfer+0x182>
 80027ea:	8813      	ldrh	r3, [r2, #0]
 80027ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027f0:	049b      	lsls	r3, r3, #18
 80027f2:	0c9b      	lsrs	r3, r3, #18
 80027f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fc:	8013      	strh	r3, [r2, #0]
 80027fe:	e034      	b.n	800286a <USB_EPStartXfer+0x192>
 8002800:	b990      	cbnz	r0, 8002828 <USB_EPStartXfer+0x150>
 8002802:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002806:	f204 4002 	addw	r0, r4, #1026	; 0x402
 800280a:	fa10 f282 	uxtah	r2, r0, r2
 800280e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002812:	b9ab      	cbnz	r3, 8002840 <USB_EPStartXfer+0x168>
 8002814:	8811      	ldrh	r1, [r2, #0]
 8002816:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800281a:	0489      	lsls	r1, r1, #18
 800281c:	0c89      	lsrs	r1, r1, #18
 800281e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002822:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002826:	8011      	strh	r1, [r2, #0]
 8002828:	786a      	ldrb	r2, [r5, #1]
 800282a:	7828      	ldrb	r0, [r5, #0]
 800282c:	bb72      	cbnz	r2, 800288c <USB_EPStartXfer+0x1b4>
 800282e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002832:	f204 4106 	addw	r1, r4, #1030	; 0x406
 8002836:	fa11 f282 	uxtah	r2, r1, r2
 800283a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800283e:	e7d2      	b.n	80027e6 <USB_EPStartXfer+0x10e>
 8002840:	2b3d      	cmp	r3, #61	; 0x3d
 8002842:	d805      	bhi.n	8002850 <USB_EPStartXfer+0x178>
 8002844:	0859      	lsrs	r1, r3, #1
 8002846:	07d8      	lsls	r0, r3, #31
 8002848:	bf48      	it	mi
 800284a:	3101      	addmi	r1, #1
 800284c:	0289      	lsls	r1, r1, #10
 800284e:	e7ea      	b.n	8002826 <USB_EPStartXfer+0x14e>
 8002850:	4814      	ldr	r0, [pc, #80]	; (80028a4 <USB_EPStartXfer+0x1cc>)
 8002852:	0959      	lsrs	r1, r3, #5
 8002854:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8002858:	e7e5      	b.n	8002826 <USB_EPStartXfer+0x14e>
 800285a:	2b3d      	cmp	r3, #61	; 0x3d
 800285c:	d811      	bhi.n	8002882 <USB_EPStartXfer+0x1aa>
 800285e:	0859      	lsrs	r1, r3, #1
 8002860:	07db      	lsls	r3, r3, #31
 8002862:	bf48      	it	mi
 8002864:	3101      	addmi	r1, #1
 8002866:	0289      	lsls	r1, r1, #10
 8002868:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800286a:	782a      	ldrb	r2, [r5, #0]
 800286c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002880:	e757      	b.n	8002732 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002882:	0959      	lsrs	r1, r3, #5
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <USB_EPStartXfer+0x1cc>)
 8002886:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800288a:	e7b7      	b.n	80027fc <USB_EPStartXfer+0x124>
 800288c:	2a01      	cmp	r2, #1
 800288e:	bf01      	itttt	eq
 8002890:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8002894:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8002898:	fa12 f181 	uxtaheq	r1, r2, r1
 800289c:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 80028a0:	e7e3      	b.n	800286a <USB_EPStartXfer+0x192>
 80028a2:	bf00      	nop
 80028a4:	ffff8000 	.word	0xffff8000

080028a8 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80028a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 80028ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80028ae:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 80028b0:	085d      	lsrs	r5, r3, #1
 80028b2:	460a      	mov	r2, r1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80028b4:	4607      	mov	r7, r0

  for (i = n; i != 0U; i--)
 80028b6:	462e      	mov	r6, r5
 80028b8:	3202      	adds	r2, #2
 80028ba:	b936      	cbnz	r6, 80028ca <USB_ReadPMA+0x22>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 80028bc:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80028be:	bf44      	itt	mi
 80028c0:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
 80028c4:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 80028c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *pdwVal;
 80028ca:	f837 4b02 	ldrh.w	r4, [r7], #2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80028ce:	f802 4c02 	strb.w	r4, [r2, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80028d2:	0a24      	lsrs	r4, r4, #8
 80028d4:	f802 4c01 	strb.w	r4, [r2, #-1]
  for (i = n; i != 0U; i--)
 80028d8:	3e01      	subs	r6, #1
 80028da:	e7ed      	b.n	80028b8 <USB_ReadPMA+0x10>

080028dc <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80028dc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 80028e0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80028e2:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80028e6:	b15b      	cbz	r3, 8002900 <USBD_CDC_EP0_RxReady+0x24>
 80028e8:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80028ec:	28ff      	cmp	r0, #255	; 0xff
 80028ee:	d007      	beq.n	8002900 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80028f6:	4621      	mov	r1, r4
 80028f8:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80028fa:	23ff      	movs	r3, #255	; 0xff
 80028fc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8002900:	2000      	movs	r0, #0
 8002902:	bd10      	pop	{r4, pc}

08002904 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002904:	2343      	movs	r3, #67	; 0x43
 8002906:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002908:	4800      	ldr	r0, [pc, #0]	; (800290c <USBD_CDC_GetFSCfgDesc+0x8>)
 800290a:	4770      	bx	lr
 800290c:	20000038 	.word	0x20000038

08002910 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002910:	2343      	movs	r3, #67	; 0x43
 8002912:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002914:	4800      	ldr	r0, [pc, #0]	; (8002918 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002916:	4770      	bx	lr
 8002918:	2000007c 	.word	0x2000007c

0800291c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800291c:	2343      	movs	r3, #67	; 0x43
 800291e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002920:	4800      	ldr	r0, [pc, #0]	; (8002924 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002922:	4770      	bx	lr
 8002924:	200000cc 	.word	0x200000cc

08002928 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002928:	230a      	movs	r3, #10
 800292a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800292c:	4800      	ldr	r0, [pc, #0]	; (8002930 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800292e:	4770      	bx	lr
 8002930:	200000c0 	.word	0x200000c0

08002934 <USBD_CDC_DataOut>:
{
 8002934:	b538      	push	{r3, r4, r5, lr}
 8002936:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002938:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800293c:	f001 fa46 	bl	8003dcc <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002940:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002944:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002948:	b14b      	cbz	r3, 800295e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800294a:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 800294e:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002958:	4798      	blx	r3
    return USBD_OK;
 800295a:	2000      	movs	r0, #0
 800295c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800295e:	2002      	movs	r0, #2
}
 8002960:	bd38      	pop	{r3, r4, r5, pc}

08002962 <USBD_CDC_DataIn>:
{
 8002962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8002964:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8002968:	b1ce      	cbz	r6, 800299e <USBD_CDC_DataIn+0x3c>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800296a:	2314      	movs	r3, #20
 800296c:	fb03 0301 	mla	r3, r3, r1, r0
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	b182      	cbz	r2, 8002996 <USBD_CDC_DataIn+0x34>
 8002974:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8002978:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 800297c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800297e:	fbb2 f4f5 	udiv	r4, r2, r5
 8002982:	fb05 2414 	mls	r4, r5, r4, r2
 8002986:	b934      	cbnz	r4, 8002996 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8002988:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800298a:	4622      	mov	r2, r4
 800298c:	4623      	mov	r3, r4
 800298e:	f001 fa01 	bl	8003d94 <USBD_LL_Transmit>
    return USBD_OK;
 8002992:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8002994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002996:	2000      	movs	r0, #0
 8002998:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800299c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800299e:	2002      	movs	r0, #2
}
 80029a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029a2 <USBD_CDC_Setup>:
{
 80029a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029a6:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80029a8:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 80029ac:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029b0:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80029b4:	4605      	mov	r5, r0
 80029b6:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 80029b8:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80029bc:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029c0:	d028      	beq.n	8002a14 <USBD_CDC_Setup+0x72>
 80029c2:	2c20      	cmp	r4, #32
 80029c4:	d147      	bne.n	8002a56 <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 80029c6:	88cc      	ldrh	r4, [r1, #6]
 80029c8:	784b      	ldrb	r3, [r1, #1]
 80029ca:	b1e4      	cbz	r4, 8002a06 <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 80029cc:	0612      	lsls	r2, r2, #24
 80029ce:	d511      	bpl.n	80029f4 <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80029d0:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80029d4:	4639      	mov	r1, r7
 80029d6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80029da:	4618      	mov	r0, r3
 80029dc:	4622      	mov	r2, r4
 80029de:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80029e0:	88f2      	ldrh	r2, [r6, #6]
 80029e2:	4639      	mov	r1, r7
 80029e4:	4628      	mov	r0, r5
 80029e6:	f000 fc3f 	bl	8003268 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80029ea:	4644      	mov	r4, r8
}
 80029ec:	4620      	mov	r0, r4
 80029ee:	b003      	add	sp, #12
 80029f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 80029f4:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80029f8:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80029fc:	4622      	mov	r2, r4
 80029fe:	4639      	mov	r1, r7
 8002a00:	f000 fc47 	bl	8003292 <USBD_CtlPrepareRx>
 8002a04:	e7f1      	b.n	80029ea <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002a06:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	6895      	ldr	r5, [r2, #8]
 8002a0e:	4622      	mov	r2, r4
 8002a10:	47a8      	blx	r5
 8002a12:	e7eb      	b.n	80029ec <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 8002a14:	784f      	ldrb	r7, [r1, #1]
 8002a16:	2f0a      	cmp	r7, #10
 8002a18:	d00d      	beq.n	8002a36 <USBD_CDC_Setup+0x94>
 8002a1a:	2f0b      	cmp	r7, #11
 8002a1c:	d015      	beq.n	8002a4a <USBD_CDC_Setup+0xa8>
 8002a1e:	b9d7      	cbnz	r7, 8002a56 <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a20:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d114      	bne.n	8002a52 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f10d 0106 	add.w	r1, sp, #6
 8002a2e:	f000 fc1b 	bl	8003268 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002a32:	463c      	mov	r4, r7
 8002a34:	e7da      	b.n	80029ec <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a36:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d109      	bne.n	8002a52 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f10d 0105 	add.w	r1, sp, #5
 8002a44:	f000 fc10 	bl	8003268 <USBD_CtlSendData>
 8002a48:	e7d0      	b.n	80029ec <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002a4a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d0cc      	beq.n	80029ec <USBD_CDC_Setup+0x4a>
        USBD_CtlError (pdev, req);
 8002a52:	4631      	mov	r1, r6
 8002a54:	4628      	mov	r0, r5
    USBD_CtlError (pdev, req);
 8002a56:	f000 fbe0 	bl	800321a <USBD_CtlError>
    ret = USBD_FAIL;
 8002a5a:	2402      	movs	r4, #2
    break;
 8002a5c:	e7c6      	b.n	80029ec <USBD_CDC_Setup+0x4a>

08002a5e <USBD_CDC_DeInit>:
{
 8002a5e:	b538      	push	{r3, r4, r5, lr}
 8002a60:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002a62:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002a64:	2181      	movs	r1, #129	; 0x81
 8002a66:	f001 f94d 	bl	8003d04 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002a6a:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002a6c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f001 f948 	bl	8003d04 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002a74:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002a78:	2182      	movs	r1, #130	; 0x82
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f001 f942 	bl	8003d04 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002a80:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002a84:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8002a86:	b14b      	cbz	r3, 8002a9c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002a88:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002a90:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8002a94:	f001 f9c8 	bl	8003e28 <USBD_static_free>
    pdev->pClassData = NULL;
 8002a98:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}

08002aa0 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002aa0:	7c03      	ldrb	r3, [r0, #16]
{
 8002aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa6:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002aa8:	bbcb      	cbnz	r3, 8002b1e <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aae:	2202      	movs	r2, #2
 8002ab0:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002ab2:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002ab4:	f001 f916 	bl	8003ce4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002ab8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002aba:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002abe:	4629      	mov	r1, r5
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f001 f90e 	bl	8003ce4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002ac8:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002acc:	2308      	movs	r3, #8
 8002ace:	2203      	movs	r2, #3
 8002ad0:	2182      	movs	r1, #130	; 0x82
 8002ad2:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002ad4:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002ad6:	f001 f905 	bl	8003ce4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002ada:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002adc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002ae0:	f001 f99e 	bl	8003e20 <USBD_static_malloc>
 8002ae4:	4606      	mov	r6, r0
 8002ae6:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8002aea:	b358      	cbz	r0, 8002b44 <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002aec:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002af4:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8002af8:	2700      	movs	r7, #0
 8002afa:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8002afe:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002b02:	f1b8 0f00 	cmp.w	r8, #0
 8002b06:	d113      	bne.n	8002b30 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002b10:	4629      	mov	r1, r5
 8002b12:	4620      	mov	r0, r4
 8002b14:	f001 f94c 	bl	8003db0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002b18:	4640      	mov	r0, r8
 8002b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002b1e:	2340      	movs	r3, #64	; 0x40
 8002b20:	2202      	movs	r2, #2
 8002b22:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002b24:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002b26:	f001 f8dd 	bl	8003ce4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002b2a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002b2c:	2340      	movs	r3, #64	; 0x40
 8002b2e:	e7c6      	b.n	8002abe <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002b30:	2340      	movs	r3, #64	; 0x40
 8002b32:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002b36:	4629      	mov	r1, r5
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f001 f939 	bl	8003db0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002b3e:	4638      	mov	r0, r7
 8002b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8002b44:	4628      	mov	r0, r5
}
 8002b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b4a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8002b4a:	b119      	cbz	r1, 8002b54 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002b4c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8002b50:	2000      	movs	r0, #0
 8002b52:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002b54:	2002      	movs	r0, #2
  }

  return ret;
}
 8002b56:	4770      	bx	lr

08002b58 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b58:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8002b5c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002b5e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002b62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002b66:	4770      	bx	lr

08002b68 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8002b68:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8002b6c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002b6e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002b72:	4770      	bx	lr

08002b74 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b74:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8002b78:	b510      	push	{r4, lr}

  if(pdev->pClassData != NULL)
 8002b7a:	b182      	cbz	r2, 8002b9e <USBD_CDC_TransmitPacket+0x2a>
  {
    if(hcdc->TxState == 0U)
 8002b7c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002b80:	2301      	movs	r3, #1
 8002b82:	b974      	cbnz	r4, 8002ba2 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8002b84:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8002b88:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8002b8c:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002b8e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2181      	movs	r1, #129	; 0x81
 8002b96:	f001 f8fd 	bl	8003d94 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002ba2:	4618      	mov	r0, r3
  }
}
 8002ba4:	bd10      	pop	{r4, pc}

08002ba6 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002ba6:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8002baa:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002bac:	b162      	cbz	r2, 8002bc8 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8002bae:	7c04      	ldrb	r4, [r0, #16]
 8002bb0:	b944      	cbnz	r4, 8002bc4 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002bb6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002bba:	2101      	movs	r1, #1
 8002bbc:	f001 f8f8 	bl	8003db0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002bc4:	2340      	movs	r3, #64	; 0x40
 8002bc6:	e7f6      	b.n	8002bb6 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002bc8:	2002      	movs	r0, #2
  }
}
 8002bca:	bd10      	pop	{r4, pc}

08002bcc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002bcc:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002bce:	b180      	cbz	r0, 8002bf2 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002bd0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002bd4:	b113      	cbz	r3, 8002bdc <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002bdc:	b109      	cbz	r1, 8002be2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002bde:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8002be8:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002bea:	f001 f827 	bl	8003c3c <USBD_LL_Init>

  return USBD_OK;
 8002bee:	2000      	movs	r0, #0
 8002bf0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002bf2:	2002      	movs	r0, #2
}
 8002bf4:	bd08      	pop	{r3, pc}

08002bf6 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002bf6:	b119      	cbz	r1, 8002c00 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002bf8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002c00:	2002      	movs	r0, #2
  }

  return status;
}
 8002c02:	4770      	bx	lr

08002c04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002c04:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002c06:	f001 f85f 	bl	8003cc8 <USBD_LL_Start>

  return USBD_OK;
}
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	bd08      	pop	{r3, pc}

08002c0e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002c0e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8002c10:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002c14:	b90b      	cbnz	r3, 8002c1a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002c16:	2002      	movs	r0, #2
 8002c18:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4798      	blx	r3
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d1f9      	bne.n	8002c16 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002c22:	bd08      	pop	{r3, pc}

08002c24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002c24:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002c26:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4798      	blx	r3
  return USBD_OK;
}
 8002c2e:	2000      	movs	r0, #0
 8002c30:	bd08      	pop	{r3, pc}

08002c32 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002c32:	b538      	push	{r3, r4, r5, lr}
 8002c34:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c36:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f000 fad9 	bl	80031f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002c40:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002c42:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8002c46:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8002c4a:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8002c4e:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8002c52:	f001 031f 	and.w	r3, r1, #31
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d00e      	beq.n	8002c78 <USBD_LL_SetupStage+0x46>
 8002c5a:	d307      	bcc.n	8002c6c <USBD_LL_SetupStage+0x3a>
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d010      	beq.n	8002c82 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002c60:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002c64:	4620      	mov	r0, r4
 8002c66:	f001 f85b 	bl	8003d20 <USBD_LL_StallEP>
    break;
 8002c6a:	e003      	b.n	8002c74 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f000 f8f0 	bl	8002e54 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002c74:	2000      	movs	r0, #0
 8002c76:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f000 fa0c 	bl	8003098 <USBD_StdItfReq>
    break;
 8002c80:	e7f8      	b.n	8002c74 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8002c82:	4629      	mov	r1, r5
 8002c84:	4620      	mov	r0, r4
 8002c86:	f000 fa2c 	bl	80030e2 <USBD_StdEPReq>
    break;
 8002c8a:	e7f3      	b.n	8002c74 <USBD_LL_SetupStage+0x42>

08002c8c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	4605      	mov	r5, r0
 8002c90:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8002c92:	bb39      	cbnz	r1, 8002ce4 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002c94:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d11e      	bne.n	8002cda <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002c9c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8002ca0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d90b      	bls.n	8002cc0 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002ca8:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8002caa:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002cac:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8002cb0:	bf8c      	ite	hi
 8002cb2:	b29a      	uxthhi	r2, r3
 8002cb4:	b292      	uxthls	r2, r2
 8002cb6:	4631      	mov	r1, r6
 8002cb8:	f000 fafa 	bl	80032b0 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002cbc:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002cc0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	b123      	cbz	r3, 8002cd2 <USBD_LL_DataOutStage+0x46>
 8002cc8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002ccc:	2a03      	cmp	r2, #3
 8002cce:	d100      	bne.n	8002cd2 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8002cd0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f000 faf4 	bl	80032c0 <USBD_CtlSendStatus>
 8002cd8:	e7f0      	b.n	8002cbc <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d1ee      	bne.n	8002cbc <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 8002cde:	f001 f81f 	bl	8003d20 <USBD_LL_StallEP>
 8002ce2:	e7eb      	b.n	8002cbc <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8002ce4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	b12b      	cbz	r3, 8002cf8 <USBD_LL_DataOutStage+0x6c>
 8002cec:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002cf0:	2a03      	cmp	r2, #3
 8002cf2:	d101      	bne.n	8002cf8 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8002cf4:	4798      	blx	r3
 8002cf6:	e7e1      	b.n	8002cbc <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002cf8:	2002      	movs	r0, #2
}
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}

08002cfc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	4613      	mov	r3, r2
 8002d00:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8002d02:	460e      	mov	r6, r1
 8002d04:	2900      	cmp	r1, #0
 8002d06:	d148      	bne.n	8002d9a <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002d08:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8002d0c:	2a02      	cmp	r2, #2
 8002d0e:	d13d      	bne.n	8002d8c <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8002d10:	6a05      	ldr	r5, [r0, #32]
 8002d12:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d914      	bls.n	8002d42 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002d18:	1aaa      	subs	r2, r5, r2
 8002d1a:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	b292      	uxth	r2, r2
 8002d20:	f000 faaf 	bl	8003282 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002d24:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002d26:	461a      	mov	r2, r3
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f001 f840 	bl	8003db0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002d30:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f04f 0000 	mov.w	r0, #0
 8002d3a:	d13a      	bne.n	8002db2 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002d3c:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8002d40:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8002d42:	69c3      	ldr	r3, [r0, #28]
 8002d44:	fbb3 f5f2 	udiv	r5, r3, r2
 8002d48:	fb02 3515 	mls	r5, r2, r5, r3
 8002d4c:	b965      	cbnz	r5, 8002d68 <USBD_LL_DataInStage+0x6c>
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d80a      	bhi.n	8002d68 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002d52:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d206      	bcs.n	8002d68 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002d5a:	462a      	mov	r2, r5
 8002d5c:	f000 fa91 	bl	8003282 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002d60:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002d64:	462b      	mov	r3, r5
 8002d66:	e7de      	b.n	8002d26 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002d68:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	b12b      	cbz	r3, 8002d7c <USBD_LL_DataInStage+0x80>
 8002d70:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8002d74:	2a03      	cmp	r2, #3
 8002d76:	d101      	bne.n	8002d7c <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8002d78:	4620      	mov	r0, r4
 8002d7a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f000 ffce 	bl	8003d20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002d84:	4620      	mov	r0, r4
 8002d86:	f000 faa6 	bl	80032d6 <USBD_CtlReceiveStatus>
 8002d8a:	e7d1      	b.n	8002d30 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002d8c:	f032 0304 	bics.w	r3, r2, #4
 8002d90:	d1ce      	bne.n	8002d30 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	f000 ffc4 	bl	8003d20 <USBD_LL_StallEP>
 8002d98:	e7ca      	b.n	8002d30 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8002d9a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	b133      	cbz	r3, 8002db0 <USBD_LL_DataInStage+0xb4>
 8002da2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002da6:	2a03      	cmp	r2, #3
 8002da8:	d102      	bne.n	8002db0 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002daa:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002dac:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8002db0:	2002      	movs	r0, #2
}
 8002db2:	bd70      	pop	{r4, r5, r6, pc}

08002db4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002db4:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002db6:	2200      	movs	r2, #0
{
 8002db8:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002dba:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002dbc:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002dbe:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002dc0:	2340      	movs	r3, #64	; 0x40
 8002dc2:	f000 ff8f 	bl	8003ce4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002dc6:	4633      	mov	r3, r6
 8002dc8:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002dca:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002dce:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f000 ff85 	bl	8003ce4 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002dda:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002dde:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8002de0:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002de2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002de4:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8002de8:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8002dec:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002dee:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8002df2:	b123      	cbz	r3, 8002dfe <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002df4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002df8:	4620      	mov	r0, r4
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002dfe:	2000      	movs	r0, #0
 8002e00:	bd70      	pop	{r4, r5, r6, pc}

08002e02 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002e02:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002e04:	2000      	movs	r0, #0
 8002e06:	4770      	bx	lr

08002e08 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002e08:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002e0c:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002e10:	2304      	movs	r3, #4
 8002e12:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002e16:	2000      	movs	r0, #0
 8002e18:	4770      	bx	lr

08002e1a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8002e1a:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8002e1e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002e22:	2000      	movs	r0, #0
 8002e24:	4770      	bx	lr

08002e26 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002e26:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e28:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002e2c:	2a03      	cmp	r2, #3
 8002e2e:	d104      	bne.n	8002e3a <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002e30:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	b103      	cbz	r3, 8002e3a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002e38:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	bd08      	pop	{r3, pc}

08002e3e <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002e3e:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8002e40:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002e42:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8002e44:	f000 ff6c 	bl	8003d20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002e48:	4620      	mov	r0, r4
 8002e4a:	2100      	movs	r1, #0
}
 8002e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8002e50:	f000 bf66 	b.w	8003d20 <USBD_LL_StallEP>

08002e54 <USBD_StdDevReq>:
{
 8002e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e56:	780b      	ldrb	r3, [r1, #0]
 8002e58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002e5c:	2b20      	cmp	r3, #32
{
 8002e5e:	4604      	mov	r4, r0
 8002e60:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e62:	d014      	beq.n	8002e8e <USBD_StdDevReq+0x3a>
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d012      	beq.n	8002e8e <USBD_StdDevReq+0x3a>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 8095 	bne.w	8002f98 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 8002e6e:	784b      	ldrb	r3, [r1, #1]
 8002e70:	2b09      	cmp	r3, #9
 8002e72:	f200 8090 	bhi.w	8002f96 <USBD_StdDevReq+0x142>
 8002e76:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e7a:	00e7      	.short	0x00e7
 8002e7c:	008e0101 	.word	0x008e0101
 8002e80:	008e00fa 	.word	0x008e00fa
 8002e84:	00130082 	.word	0x00130082
 8002e88:	00d2008e 	.word	0x00d2008e
 8002e8c:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 8002e8e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002e92:	4629      	mov	r1, r5
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4620      	mov	r0, r4
 8002e98:	4798      	blx	r3
}
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	b003      	add	sp, #12
 8002e9e:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8002ea0:	884b      	ldrh	r3, [r1, #2]
 8002ea2:	0a1a      	lsrs	r2, r3, #8
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	2a0e      	cmp	r2, #14
 8002ea8:	d875      	bhi.n	8002f96 <USBD_StdDevReq+0x142>
 8002eaa:	e8df f002 	tbb	[pc, r2]
 8002eae:	2824      	.short	0x2824
 8002eb0:	55747435 	.word	0x55747435
 8002eb4:	7474745e 	.word	0x7474745e
 8002eb8:	74747474 	.word	0x74747474
 8002ebc:	08          	.byte	0x08
 8002ebd:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8002ebe:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002ec2:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002ec4:	7c20      	ldrb	r0, [r4, #16]
 8002ec6:	f10d 0106 	add.w	r1, sp, #6
 8002eca:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8002ecc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002ed0:	b152      	cbz	r2, 8002ee8 <USBD_StdDevReq+0x94>
 8002ed2:	88eb      	ldrh	r3, [r5, #6]
 8002ed4:	b143      	cbz	r3, 8002ee8 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	bf28      	it	cs
 8002eda:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8002edc:	4601      	mov	r1, r0
 8002ede:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8002ee0:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8002ee4:	f000 f9c0 	bl	8003268 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8002ee8:	88eb      	ldrh	r3, [r5, #6]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1d5      	bne.n	8002e9a <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f000 f9e6 	bl	80032c0 <USBD_CtlSendStatus>
 8002ef4:	e7d1      	b.n	8002e9a <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002ef6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	e7e2      	b.n	8002ec4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8002efe:	7c02      	ldrb	r2, [r0, #16]
 8002f00:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002f04:	b932      	cbnz	r2, 8002f14 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002f08:	f10d 0006 	add.w	r0, sp, #6
 8002f0c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002f0e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f10:	7043      	strb	r3, [r0, #1]
 8002f12:	e7db      	b.n	8002ecc <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	e7f7      	b.n	8002f08 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d83b      	bhi.n	8002f96 <USBD_StdDevReq+0x142>
 8002f1e:	e8df f003 	tbb	[pc, r3]
 8002f22:	0703      	.short	0x0703
 8002f24:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8002f28:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	e7c9      	b.n	8002ec4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002f30:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	e7c5      	b.n	8002ec4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002f38:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	e7c1      	b.n	8002ec4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002f40:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	e7bd      	b.n	8002ec4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002f48:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	e7b9      	b.n	8002ec4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002f50:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	e7b5      	b.n	8002ec4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002f58:	7c03      	ldrb	r3, [r0, #16]
 8002f5a:	b9e3      	cbnz	r3, 8002f96 <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002f5c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002f60:	f10d 0006 	add.w	r0, sp, #6
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	4798      	blx	r3
 8002f68:	e7b0      	b.n	8002ecc <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8002f6a:	7c03      	ldrb	r3, [r0, #16]
 8002f6c:	b99b      	cbnz	r3, 8002f96 <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002f6e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002f72:	f10d 0006 	add.w	r0, sp, #6
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	e7c8      	b.n	8002f10 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002f7e:	888b      	ldrh	r3, [r1, #4]
 8002f80:	b94b      	cbnz	r3, 8002f96 <USBD_StdDevReq+0x142>
 8002f82:	88cb      	ldrh	r3, [r1, #6]
 8002f84:	b93b      	cbnz	r3, 8002f96 <USBD_StdDevReq+0x142>
 8002f86:	884d      	ldrh	r5, [r1, #2]
 8002f88:	2d7f      	cmp	r5, #127	; 0x7f
 8002f8a:	d804      	bhi.n	8002f96 <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f8c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002f90:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002f92:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f94:	d103      	bne.n	8002f9e <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 8002f96:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002f98:	f7ff ff51 	bl	8002e3e <USBD_CtlError.constprop.1>
    break;
 8002f9c:	e77d      	b.n	8002e9a <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8002f9e:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002fa2:	f000 fee9 	bl	8003d78 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f000 f98a 	bl	80032c0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002fac:	b11d      	cbz	r5, 8002fb6 <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002fae:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002fb0:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8002fb4:	e771      	b.n	8002e9a <USBD_StdDevReq+0x46>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e7fa      	b.n	8002fb0 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 8002fba:	7889      	ldrb	r1, [r1, #2]
 8002fbc:	4d35      	ldr	r5, [pc, #212]	; (8003094 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002fbe:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002fc0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002fc2:	d8e8      	bhi.n	8002f96 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8002fc4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d008      	beq.n	8002fde <USBD_StdDevReq+0x18a>
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d014      	beq.n	8002ffa <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8002fd0:	f7ff ff35 	bl	8002e3e <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8002fd4:	7829      	ldrb	r1, [r5, #0]
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff fe24 	bl	8002c24 <USBD_ClrClassConfig>
 8002fdc:	e75d      	b.n	8002e9a <USBD_StdDevReq+0x46>
      if (cfgidx)
 8002fde:	2900      	cmp	r1, #0
 8002fe0:	d085      	beq.n	8002eee <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8002fe2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002fe4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002fe6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002fe8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fe0e 	bl	8002c0e <USBD_SetClassConfig>
 8002ff2:	2802      	cmp	r0, #2
 8002ff4:	f47f af7b 	bne.w	8002eee <USBD_StdDevReq+0x9a>
 8002ff8:	e7cd      	b.n	8002f96 <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8002ffa:	b931      	cbnz	r1, 800300a <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8003002:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8003004:	f7ff fe0e 	bl	8002c24 <USBD_ClrClassConfig>
 8003008:	e771      	b.n	8002eee <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 800300a:	6841      	ldr	r1, [r0, #4]
 800300c:	2901      	cmp	r1, #1
 800300e:	f43f af6e 	beq.w	8002eee <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003012:	b2c9      	uxtb	r1, r1
 8003014:	f7ff fe06 	bl	8002c24 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003018:	7829      	ldrb	r1, [r5, #0]
 800301a:	6061      	str	r1, [r4, #4]
 800301c:	e7e6      	b.n	8002fec <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 800301e:	88ca      	ldrh	r2, [r1, #6]
 8003020:	2a01      	cmp	r2, #1
 8003022:	d1b8      	bne.n	8002f96 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8003024:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0b4      	beq.n	8002f96 <USBD_StdDevReq+0x142>
 800302c:	2b02      	cmp	r3, #2
 800302e:	d903      	bls.n	8003038 <USBD_StdDevReq+0x1e4>
 8003030:	2b03      	cmp	r3, #3
 8003032:	d1b0      	bne.n	8002f96 <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003034:	1d01      	adds	r1, r0, #4
 8003036:	e003      	b.n	8003040 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8003038:	4601      	mov	r1, r0
 800303a:	2300      	movs	r3, #0
 800303c:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003040:	4620      	mov	r0, r4
 8003042:	f000 f911 	bl	8003268 <USBD_CtlSendData>
 8003046:	e728      	b.n	8002e9a <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8003048:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800304c:	3b01      	subs	r3, #1
 800304e:	2b02      	cmp	r3, #2
 8003050:	d8a1      	bhi.n	8002f96 <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 8003052:	88cb      	ldrh	r3, [r1, #6]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d19e      	bne.n	8002f96 <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003058:	2301      	movs	r3, #1
 800305a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800305c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8003060:	b10b      	cbz	r3, 8003066 <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003062:	2303      	movs	r3, #3
 8003064:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003066:	2202      	movs	r2, #2
 8003068:	f104 010c 	add.w	r1, r4, #12
 800306c:	e7e8      	b.n	8003040 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800306e:	884b      	ldrh	r3, [r1, #2]
 8003070:	2b01      	cmp	r3, #1
 8003072:	f47f af12 	bne.w	8002e9a <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8003076:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800307a:	e738      	b.n	8002eee <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 800307c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003080:	3b01      	subs	r3, #1
 8003082:	2b02      	cmp	r3, #2
 8003084:	d887      	bhi.n	8002f96 <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003086:	884b      	ldrh	r3, [r1, #2]
 8003088:	2b01      	cmp	r3, #1
 800308a:	f47f af06 	bne.w	8002e9a <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	e7f1      	b.n	8003076 <USBD_StdDevReq+0x222>
 8003092:	bf00      	nop
 8003094:	200001e8 	.word	0x200001e8

08003098 <USBD_StdItfReq>:
{
 8003098:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800309a:	780b      	ldrb	r3, [r1, #0]
 800309c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80030a0:	2b20      	cmp	r3, #32
{
 80030a2:	4604      	mov	r4, r0
 80030a4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030a6:	d002      	beq.n	80030ae <USBD_StdItfReq+0x16>
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d000      	beq.n	80030ae <USBD_StdItfReq+0x16>
 80030ac:	b9b3      	cbnz	r3, 80030dc <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 80030ae:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80030b2:	3b01      	subs	r3, #1
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d810      	bhi.n	80030da <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80030b8:	792b      	ldrb	r3, [r5, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d80d      	bhi.n	80030da <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80030be:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80030c2:	4629      	mov	r1, r5
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	4620      	mov	r0, r4
 80030c8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80030ca:	88eb      	ldrh	r3, [r5, #6]
 80030cc:	b91b      	cbnz	r3, 80030d6 <USBD_StdItfReq+0x3e>
 80030ce:	b910      	cbnz	r0, 80030d6 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 80030d0:	4620      	mov	r0, r4
 80030d2:	f000 f8f5 	bl	80032c0 <USBD_CtlSendStatus>
}
 80030d6:	2000      	movs	r0, #0
 80030d8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 80030da:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80030dc:	f7ff feaf 	bl	8002e3e <USBD_CtlError.constprop.1>
    break;
 80030e0:	e7f9      	b.n	80030d6 <USBD_StdItfReq+0x3e>

080030e2 <USBD_StdEPReq>:
{
 80030e2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030e4:	780a      	ldrb	r2, [r1, #0]
 80030e6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80030ea:	2a20      	cmp	r2, #32
{
 80030ec:	4604      	mov	r4, r0
 80030ee:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030f0:	d013      	beq.n	800311a <USBD_StdEPReq+0x38>
 80030f2:	2a40      	cmp	r2, #64	; 0x40
 80030f4:	d011      	beq.n	800311a <USBD_StdEPReq+0x38>
 80030f6:	b96a      	cbnz	r2, 8003114 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 80030f8:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80030fa:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 80030fc:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80030fe:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8003100:	d01f      	beq.n	8003142 <USBD_StdEPReq+0x60>
 8003102:	d335      	bcc.n	8003170 <USBD_StdEPReq+0x8e>
 8003104:	2d03      	cmp	r5, #3
 8003106:	d105      	bne.n	8003114 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8003108:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800310c:	2a02      	cmp	r2, #2
 800310e:	d026      	beq.n	800315e <USBD_StdEPReq+0x7c>
 8003110:	2a03      	cmp	r2, #3
 8003112:	d00a      	beq.n	800312a <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8003114:	f7ff fe93 	bl	8002e3e <USBD_CtlError.constprop.1>
    break;
 8003118:	e005      	b.n	8003126 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 800311a:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800311e:	4619      	mov	r1, r3
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	4620      	mov	r0, r4
 8003124:	4790      	blx	r2
}
 8003126:	2000      	movs	r0, #0
 8003128:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 800312a:	885a      	ldrh	r2, [r3, #2]
 800312c:	b92a      	cbnz	r2, 800313a <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800312e:	064a      	lsls	r2, r1, #25
 8003130:	d003      	beq.n	800313a <USBD_StdEPReq+0x58>
 8003132:	88db      	ldrh	r3, [r3, #6]
 8003134:	b90b      	cbnz	r3, 800313a <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8003136:	f000 fdf3 	bl	8003d20 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 800313a:	4620      	mov	r0, r4
 800313c:	f000 f8c0 	bl	80032c0 <USBD_CtlSendStatus>
        break;
 8003140:	e7f1      	b.n	8003126 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8003142:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003146:	2a02      	cmp	r2, #2
 8003148:	d009      	beq.n	800315e <USBD_StdEPReq+0x7c>
 800314a:	2a03      	cmp	r2, #3
 800314c:	d1e2      	bne.n	8003114 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800314e:	885b      	ldrh	r3, [r3, #2]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e8      	bne.n	8003126 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8003154:	064d      	lsls	r5, r1, #25
 8003156:	d0f0      	beq.n	800313a <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8003158:	f000 fdf0 	bl	8003d3c <USBD_LL_ClearStallEP>
 800315c:	e7ed      	b.n	800313a <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800315e:	064b      	lsls	r3, r1, #25
 8003160:	d017      	beq.n	8003192 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8003162:	f000 fddd 	bl	8003d20 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	4620      	mov	r0, r4
 800316a:	f000 fdd9 	bl	8003d20 <USBD_LL_StallEP>
 800316e:	e7da      	b.n	8003126 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8003170:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003174:	2b02      	cmp	r3, #2
 8003176:	d00e      	beq.n	8003196 <USBD_StdEPReq+0xb4>
 8003178:	2b03      	cmp	r3, #3
 800317a:	d1cb      	bne.n	8003114 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 800317c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003180:	f04f 0314 	mov.w	r3, #20
 8003184:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003188:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 800318c:	d012      	beq.n	80031b4 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800318e:	6992      	ldr	r2, [r2, #24]
 8003190:	b9da      	cbnz	r2, 80031ca <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8003192:	4620      	mov	r0, r4
 8003194:	e7be      	b.n	8003114 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003196:	0649      	lsls	r1, r1, #25
 8003198:	d1fb      	bne.n	8003192 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800319a:	0613      	lsls	r3, r2, #24
 800319c:	bf4c      	ite	mi
 800319e:	f100 0114 	addmi.w	r1, r0, #20
 80031a2:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80031aa:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80031ac:	4620      	mov	r0, r4
 80031ae:	f000 f85b 	bl	8003268 <USBD_CtlSendData>
          break;
 80031b2:	e7b8      	b.n	8003126 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80031b4:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d0ea      	beq.n	8003192 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80031bc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80031c0:	fb03 0505 	mla	r5, r3, r5, r0
 80031c4:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80031c8:	e004      	b.n	80031d4 <USBD_StdEPReq+0xf2>
 80031ca:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80031ce:	fb05 3503 	mla	r5, r5, r3, r3
 80031d2:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80031d4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80031d8:	d103      	bne.n	80031e2 <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 80031da:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80031dc:	2202      	movs	r2, #2
 80031de:	4629      	mov	r1, r5
 80031e0:	e7e4      	b.n	80031ac <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80031e2:	4620      	mov	r0, r4
 80031e4:	f000 fdb8 	bl	8003d58 <USBD_LL_IsStallEP>
 80031e8:	b108      	cbz	r0, 80031ee <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e7f5      	b.n	80031da <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 80031ee:	6028      	str	r0, [r5, #0]
 80031f0:	e7f4      	b.n	80031dc <USBD_StdEPReq+0xfa>

080031f2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80031f2:	780b      	ldrb	r3, [r1, #0]
 80031f4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80031f6:	784b      	ldrb	r3, [r1, #1]
 80031f8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80031fa:	78ca      	ldrb	r2, [r1, #3]
 80031fc:	788b      	ldrb	r3, [r1, #2]
 80031fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003202:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003204:	794a      	ldrb	r2, [r1, #5]
 8003206:	790b      	ldrb	r3, [r1, #4]
 8003208:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800320c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800320e:	79ca      	ldrb	r2, [r1, #7]
 8003210:	798b      	ldrb	r3, [r1, #6]
 8003212:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003216:	80c3      	strh	r3, [r0, #6]
 8003218:	4770      	bx	lr

0800321a <USBD_CtlError>:
{
 800321a:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 800321c:	2180      	movs	r1, #128	; 0x80
{
 800321e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8003220:	f000 fd7e 	bl	8003d20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003224:	4620      	mov	r0, r4
 8003226:	2100      	movs	r1, #0
}
 8003228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800322c:	f000 bd78 	b.w	8003d20 <USBD_LL_StallEP>

08003230 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003230:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003232:	b188      	cbz	r0, 8003258 <USBD_GetString+0x28>
 8003234:	4605      	mov	r5, r0
 8003236:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8003238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2c00      	cmp	r4, #0
 8003240:	d1f9      	bne.n	8003236 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003248:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800324a:	2303      	movs	r3, #3
 800324c:	704b      	strb	r3, [r1, #1]
 800324e:	3801      	subs	r0, #1
 8003250:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003252:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003256:	b905      	cbnz	r5, 800325a <USBD_GetString+0x2a>
 8003258:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8003260:	3302      	adds	r3, #2
 8003262:	b2db      	uxtb	r3, r3
 8003264:	548c      	strb	r4, [r1, r2]
 8003266:	e7f4      	b.n	8003252 <USBD_GetString+0x22>

08003268 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003268:	b510      	push	{r4, lr}
 800326a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800326c:	2202      	movs	r2, #2
 800326e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8003272:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003274:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003276:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003278:	2100      	movs	r1, #0
 800327a:	f000 fd8b 	bl	8003d94 <USBD_LL_Transmit>

  return USBD_OK;
}
 800327e:	2000      	movs	r0, #0
 8003280:	bd10      	pop	{r4, pc}

08003282 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8003282:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003284:	4613      	mov	r3, r2
 8003286:	460a      	mov	r2, r1
 8003288:	2100      	movs	r1, #0
 800328a:	f000 fd83 	bl	8003d94 <USBD_LL_Transmit>

  return USBD_OK;
}
 800328e:	2000      	movs	r0, #0
 8003290:	bd08      	pop	{r3, pc}

08003292 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8003292:	b510      	push	{r4, lr}
 8003294:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003296:	2203      	movs	r2, #3
 8003298:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800329c:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80032a0:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80032a2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80032a6:	2100      	movs	r1, #0
 80032a8:	f000 fd82 	bl	8003db0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80032ac:	2000      	movs	r0, #0
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80032b0:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80032b2:	4613      	mov	r3, r2
 80032b4:	460a      	mov	r2, r1
 80032b6:	2100      	movs	r1, #0
 80032b8:	f000 fd7a 	bl	8003db0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80032bc:	2000      	movs	r0, #0
 80032be:	bd08      	pop	{r3, pc}

080032c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80032c0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80032c2:	2304      	movs	r3, #4
 80032c4:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80032c8:	2300      	movs	r3, #0
 80032ca:	461a      	mov	r2, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	f000 fd61 	bl	8003d94 <USBD_LL_Transmit>

  return USBD_OK;
}
 80032d2:	2000      	movs	r0, #0
 80032d4:	bd08      	pop	{r3, pc}

080032d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80032d6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80032d8:	2305      	movs	r3, #5
 80032da:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80032de:	2300      	movs	r3, #0
 80032e0:	461a      	mov	r2, r3
 80032e2:	4619      	mov	r1, r3
 80032e4:	f000 fd64 	bl	8003db0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80032e8:	2000      	movs	r0, #0
 80032ea:	bd08      	pop	{r3, pc}

080032ec <can_fifo_size>:
	return (can_fifo_size(pt) == (CAN_FIFO_SIZE-1));
}

uint8_t can_fifo_size(st_can_message_fifo_t *pt)
{
	return ((CAN_FIFO_SIZE + pt->head - pt->tail) % (CAN_FIFO_SIZE));
 80032ec:	f890 3280 	ldrb.w	r3, [r0, #640]	; 0x280
 80032f0:	f890 0281 	ldrb.w	r0, [r0, #641]	; 0x281
 80032f4:	3320      	adds	r3, #32
 80032f6:	1a18      	subs	r0, r3, r0
 80032f8:	4243      	negs	r3, r0
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	f000 001f 	and.w	r0, r0, #31
 8003302:	bf58      	it	pl
 8003304:	4258      	negpl	r0, r3
}
 8003306:	b2c0      	uxtb	r0, r0
 8003308:	4770      	bx	lr

0800330a <can_fifo_empty>:
{
 800330a:	b508      	push	{r3, lr}
	return (can_fifo_size(pt)==0);
 800330c:	f7ff ffee 	bl	80032ec <can_fifo_size>
}
 8003310:	fab0 f080 	clz	r0, r0
 8003314:	0940      	lsrs	r0, r0, #5
 8003316:	bd08      	pop	{r3, pc}

08003318 <can_fifo_full>:
{
 8003318:	b508      	push	{r3, lr}
	return (can_fifo_size(pt) == (CAN_FIFO_SIZE-1));
 800331a:	f7ff ffe7 	bl	80032ec <can_fifo_size>
}
 800331e:	f1a0 031f 	sub.w	r3, r0, #31
 8003322:	4258      	negs	r0, r3
 8003324:	4158      	adcs	r0, r3
 8003326:	bd08      	pop	{r3, pc}

08003328 <can_fifo_dequeue>:

st_can_message_t* can_fifo_dequeue(st_can_message_fifo_t *pt)
{
 8003328:	b508      	push	{r3, lr}
 800332a:	4602      	mov	r2, r0
	uint8_t tmp;

	if (!can_fifo_empty(pt)) {
 800332c:	f7ff ffed 	bl	800330a <can_fifo_empty>
 8003330:	b958      	cbnz	r0, 800334a <can_fifo_dequeue+0x22>
		tmp = pt->tail;
 8003332:	f892 0281 	ldrb.w	r0, [r2, #641]	; 0x281
		pt->tail = (pt->tail + 1) % CAN_FIFO_SIZE;
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	f003 031f 	and.w	r3, r3, #31
		return(&pt->can_msg[tmp]);
 800333c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		pt->tail = (pt->tail + 1) % CAN_FIFO_SIZE;
 8003340:	f882 3281 	strb.w	r3, [r2, #641]	; 0x281
		return(&pt->can_msg[tmp]);
 8003344:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003348:	bd08      	pop	{r3, pc}
	}

	return(0);
 800334a:	2000      	movs	r0, #0
}
 800334c:	bd08      	pop	{r3, pc}

0800334e <can_fifo_peek>:

st_can_message_t* can_fifo_peek(st_can_message_fifo_t *pt)
{
 800334e:	b508      	push	{r3, lr}
 8003350:	4602      	mov	r2, r0
	if (!can_fifo_empty(pt)) {
 8003352:	f7ff ffda 	bl	800330a <can_fifo_empty>
 8003356:	b930      	cbnz	r0, 8003366 <can_fifo_peek+0x18>
		return(&pt->can_msg[pt->tail]);
 8003358:	f892 0281 	ldrb.w	r0, [r2, #641]	; 0x281
 800335c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003360:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003364:	bd08      	pop	{r3, pc}
	} else {
		return(0);
 8003366:	2000      	movs	r0, #0
	}
}
 8003368:	bd08      	pop	{r3, pc}

0800336a <can_fifo_enqueue>:

uint8_t can_fifo_enqueue(st_can_message_fifo_t *pt, CAN_RxHeaderTypeDef *msg, uint8_t *data)
{
 800336a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336c:	4604      	mov	r4, r0
	uint8_t	cpt;
	st_can_message_t *curr;

	// copy can data into fifo, if there is room
	if (!can_fifo_full(pt)) {
 800336e:	f7ff ffd3 	bl	8003318 <can_fifo_full>
 8003372:	bb10      	cbnz	r0, 80033ba <can_fifo_enqueue+0x50>
		curr = &pt->can_msg[pt->head];
 8003374:	f894 3280 	ldrb.w	r3, [r4, #640]	; 0x280
		curr->ide = msg->IDE;
 8003378:	688d      	ldr	r5, [r1, #8]
 800337a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800337e:	0080      	lsls	r0, r0, #2
 8003380:	1826      	adds	r6, r4, r0

		if (msg->IDE == CAN_ID_EXT)
 8003382:	2d04      	cmp	r5, #4
		curr->ide = msg->IDE;
 8003384:	6075      	str	r5, [r6, #4]
			curr->id = msg->ExtId;
 8003386:	bf0c      	ite	eq
 8003388:	684d      	ldreq	r5, [r1, #4]
		else
			curr->id = msg->StdId;
 800338a:	680d      	ldrne	r5, [r1, #0]

		curr->dlc = msg->DLC;
 800338c:	690e      	ldr	r6, [r1, #16]
			curr->id = msg->StdId;
 800338e:	5025      	str	r5, [r4, r0]
		curr->dlc = msg->DLC;
 8003390:	2114      	movs	r1, #20
 8003392:	fb01 4103 	mla	r1, r1, r3, r4

		for (cpt=0;cpt<msg->DLC;cpt++)
 8003396:	2500      	movs	r5, #0
		curr->dlc = msg->DLC;
 8003398:	608e      	str	r6, [r1, #8]
 800339a:	b2e8      	uxtb	r0, r5
		for (cpt=0;cpt<msg->DLC;cpt++)
 800339c:	4286      	cmp	r6, r0
 800339e:	f105 0501 	add.w	r5, r5, #1
 80033a2:	d806      	bhi.n	80033b2 <can_fifo_enqueue+0x48>
			curr->data[cpt] = data[cpt];

		pt->head = (pt->head + 1) % CAN_FIFO_SIZE;
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	f884 3280 	strb.w	r3, [r4, #640]	; 0x280
		return (1);
 80033ae:	2001      	movs	r0, #1
 80033b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			curr->data[cpt] = data[cpt];
 80033b2:	5c17      	ldrb	r7, [r2, r0]
 80033b4:	4408      	add	r0, r1
 80033b6:	7307      	strb	r7, [r0, #12]
 80033b8:	e7ef      	b.n	800339a <can_fifo_enqueue+0x30>
	}

	return (0);
 80033ba:	2000      	movs	r0, #0
}
 80033bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033be <hex2int>:

uint32_t hex2int(char c)
{
  if (c >= '0' && c <= '9')
 80033be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	2a09      	cmp	r2, #9
 80033c6:	d801      	bhi.n	80033cc <hex2int+0xe>
  {
    return c - '0';
 80033c8:	4618      	mov	r0, r3
 80033ca:	4770      	bx	lr
  }
  else if (c >= 'a' && c <= 'f')
 80033cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d801      	bhi.n	80033d8 <hex2int+0x1a>
  {
    return c - 'a' + 10;
 80033d4:	3857      	subs	r0, #87	; 0x57
 80033d6:	4770      	bx	lr
  }
  else if (c >= 'A' && c <= 'F')
 80033d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80033dc:	2b05      	cmp	r3, #5
  {
    return c - 'A' + 10;
 80033de:	bf94      	ite	ls
 80033e0:	3837      	subls	r0, #55	; 0x37
  }

  return 0;
 80033e2:	2000      	movhi	r0, #0
}
 80033e4:	4770      	bx	lr
	...

080033e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033ec:	b0b7      	sub	sp, #220	; 0xdc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033ee:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033f0:	2244      	movs	r2, #68	; 0x44
 80033f2:	2100      	movs	r1, #0
 80033f4:	a80d      	add	r0, sp, #52	; 0x34
 80033f6:	f000 fdd8 	bl	8003faa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033fa:	2760      	movs	r7, #96	; 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033fc:	4622      	mov	r2, r4
 80033fe:	2100      	movs	r1, #0
 8003400:	a802      	add	r0, sp, #8
 8003402:	f000 fdd2 	bl	8003faa <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};

  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003406:	4e37      	ldr	r6, [pc, #220]	; (80034e4 <SystemClock_Config+0xfc>)
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003408:	463a      	mov	r2, r7
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800340a:	f04f 0918 	mov.w	r9, #24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800340e:	2100      	movs	r1, #0
 8003410:	a81e      	add	r0, sp, #120	; 0x78
 8003412:	f000 fdca 	bl	8003faa <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8003416:	464a      	mov	r2, r9
 8003418:	2100      	movs	r1, #0
 800341a:	a807      	add	r0, sp, #28
 800341c:	f000 fdc5 	bl	8003faa <memset>
  HAL_PWR_EnableBkUpAccess();
 8003420:	f7fd ffae 	bl	8001380 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003424:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003428:	f023 0318 	bic.w	r3, r3, #24
 800342c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003430:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003432:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003434:	9715      	str	r7, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003436:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003438:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 800343a:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800343c:	f04f 0807 	mov.w	r8, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003440:	a80d      	add	r0, sp, #52	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003442:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003444:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003446:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003448:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800344a:	9717      	str	r7, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800344c:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 1;
 800344e:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003450:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003454:	971c      	str	r7, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003456:	971d      	str	r7, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003458:	f7fe f876 	bl	8001548 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800345c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800345e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003460:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003462:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003464:	2303      	movs	r3, #3
 8003466:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003468:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800346a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800346c:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800346e:	f7fe fabd 	bl	80019ec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003472:	f44f 3308 	mov.w	r3, #139264	; 0x22000
 8003476:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800347c:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800347e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003482:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003484:	a81e      	add	r0, sp, #120	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003486:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800348a:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800348c:	951f      	str	r5, [sp, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800348e:	9520      	str	r5, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003490:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003494:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003498:	9723      	str	r7, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800349a:	9724      	str	r7, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800349c:	f7fe fbc4 	bl	8001c28 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80034a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034a4:	f7fd ff7c 	bl	80013a0 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80034a8:	f7fe fd36 	bl	8001f18 <HAL_RCCEx_EnableMSIPLLMode>
  /**Enable the SYSCFG APB clock 
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80034ac:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b2:	65b3      	str	r3, [r6, #88]	; 0x58
 80034b4:	6db3      	ldr	r3, [r6, #88]	; 0x58
  /**Configures CRS 
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80034b6:	9407      	str	r4, [sp, #28]
  __HAL_RCC_CRS_CLK_ENABLE();
 80034b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	9b01      	ldr	r3, [sp, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80034c0:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80034c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034c6:	9308      	str	r3, [sp, #32]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80034c8:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80034cc:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80034ce:	2322      	movs	r3, #34	; 0x22
 80034d0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80034d2:	a807      	add	r0, sp, #28
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80034d4:	2320      	movs	r3, #32
 80034d6:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80034d8:	f7fe fd26 	bl	8001f28 <HAL_RCCEx_CRSConfig>
}
 80034dc:	b037      	add	sp, #220	; 0xdc
 80034de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000

080034e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_txMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034e8:	b538      	push	{r3, r4, r5, lr}
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80034ea:	4d07      	ldr	r5, [pc, #28]	; (8003508 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80034ec:	4c07      	ldr	r4, [pc, #28]	; (800350c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80034ee:	462b      	mov	r3, r5
 80034f0:	4622      	mov	r2, r4
 80034f2:	2100      	movs	r1, #0
 80034f4:	f7fd f859 	bl	80005aa <HAL_CAN_GetRxMessage>

	// add message to rx fifo!
	if(can_fifo_enqueue(&rxCanFifo, &RxHeader, RxData)) {
 80034f8:	462a      	mov	r2, r5
 80034fa:	4621      	mov	r1, r4
 80034fc:	4804      	ldr	r0, [pc, #16]	; (8003510 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
		// indicate successful enqueue
		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	}
}
 80034fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if(can_fifo_enqueue(&rxCanFifo, &RxHeader, RxData)) {
 8003502:	f7ff bf32 	b.w	800336a <can_fifo_enqueue>
 8003506:	bf00      	nop
 8003508:	20000719 	.word	0x20000719
 800350c:	20000764 	.word	0x20000764
 8003510:	20000444 	.word	0x20000444

08003514 <parseInput>:

void parseInput(uint8_t ch) {

	if(newCommand == RESET)
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <parseInput+0x54>)
 8003516:	7811      	ldrb	r1, [r2, #0]
void parseInput(uint8_t ch) {
 8003518:	b530      	push	{r4, r5, lr}
	if(newCommand == RESET)
 800351a:	f001 04ff 	and.w	r4, r1, #255	; 0xff
 800351e:	b9f1      	cbnz	r1, 800355e <parseInput+0x4a>
	{
		if ((RxIndex > 0) && RxIndex < (USB_RX_BUFFER-1))
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <parseInput+0x58>)
 8003522:	7819      	ldrb	r1, [r3, #0]
 8003524:	1e4d      	subs	r5, r1, #1
 8003526:	2d1d      	cmp	r5, #29
			aRxCmdBuffer[RxIndex++] = ch;
 8003528:	bf9d      	ittte	ls
 800352a:	1c4c      	addls	r4, r1, #1
 800352c:	701c      	strbls	r4, [r3, #0]
 800352e:	4c10      	ldrls	r4, [pc, #64]	; (8003570 <parseInput+0x5c>)
		else
			RxIndex = 0;
 8003530:	701c      	strbhi	r4, [r3, #0]
			aRxCmdBuffer[RxIndex++] = ch;
 8003532:	bf98      	it	ls
 8003534:	5460      	strbls	r0, [r4, r1]


		switch(ch)
 8003536:	2854      	cmp	r0, #84	; 0x54
 8003538:	d004      	beq.n	8003544 <parseInput+0x30>
 800353a:	d808      	bhi.n	800354e <parseInput+0x3a>
 800353c:	280d      	cmp	r0, #13
 800353e:	d00a      	beq.n	8003556 <parseInput+0x42>
 8003540:	2851      	cmp	r0, #81	; 0x51
 8003542:	d103      	bne.n	800354c <parseInput+0x38>
		{
			case 't':
			case 'T':
			case 'V':
			case 'Q':
				aRxCmdBuffer[0] = ch;
 8003544:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <parseInput+0x5c>)
 8003546:	7010      	strb	r0, [r2, #0]
				RxIndex=1;
 8003548:	2201      	movs	r2, #1

	}
	else
	{
		if(ch == UART_EOL_TERMINATOR)
			issueBellResponse = SET;
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	bd30      	pop	{r4, r5, pc}
		switch(ch)
 800354e:	2856      	cmp	r0, #86	; 0x56
 8003550:	d0f8      	beq.n	8003544 <parseInput+0x30>
 8003552:	2874      	cmp	r0, #116	; 0x74
 8003554:	e7f5      	b.n	8003542 <parseInput+0x2e>
				newCommand = SET;
 8003556:	2101      	movs	r1, #1
 8003558:	7011      	strb	r1, [r2, #0]
				RxIndex=0;
 800355a:	2200      	movs	r2, #0
 800355c:	e7f5      	b.n	800354a <parseInput+0x36>
		if(ch == UART_EOL_TERMINATOR)
 800355e:	280d      	cmp	r0, #13
 8003560:	d1f4      	bne.n	800354c <parseInput+0x38>
			issueBellResponse = SET;
 8003562:	2201      	movs	r2, #1
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <parseInput+0x60>)
 8003566:	e7f0      	b.n	800354a <parseInput+0x36>
 8003568:	200001eb 	.word	0x200001eb
 800356c:	200001e9 	.word	0x200001e9
 8003570:	200006c8 	.word	0x200006c8
 8003574:	200001ea 	.word	0x200001ea

08003578 <CAN_Transmit>:
	}
}

uint8_t CAN_Transmit(char *msg) {
 8003578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t index;

	if (msg[0] == 't') {
 800357c:	7803      	ldrb	r3, [r0, #0]
 800357e:	4e39      	ldr	r6, [pc, #228]	; (8003664 <CAN_Transmit+0xec>)
 8003580:	2b74      	cmp	r3, #116	; 0x74
uint8_t CAN_Transmit(char *msg) {
 8003582:	4604      	mov	r4, r0
	if (msg[0] == 't') {
 8003584:	d12a      	bne.n	80035dc <CAN_Transmit+0x64>
		// std id
		TxHeader.IDE = CAN_ID_STD;
 8003586:	2300      	movs	r3, #0
 8003588:	60b3      	str	r3, [r6, #8]
		TxHeader.StdId =  (hex2int(*(msg+1)) << 8) | (hex2int(*(msg+2)) << 4) | (hex2int(*(msg+3)));
 800358a:	7840      	ldrb	r0, [r0, #1]
 800358c:	f7ff ff17 	bl	80033be <hex2int>
 8003590:	4605      	mov	r5, r0
 8003592:	78a0      	ldrb	r0, [r4, #2]
 8003594:	f7ff ff13 	bl	80033be <hex2int>
 8003598:	0100      	lsls	r0, r0, #4
 800359a:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
 800359e:	78e0      	ldrb	r0, [r4, #3]
 80035a0:	f7ff ff0d 	bl	80033be <hex2int>
 80035a4:	4328      	orrs	r0, r5
 80035a6:	6030      	str	r0, [r6, #0]
		// dlc
		TxHeader.DLC = hex2int(*(msg+4));
 80035a8:	7920      	ldrb	r0, [r4, #4]
 80035aa:	f7ff ff08 	bl	80033be <hex2int>

		index = 5;
 80035ae:	f04f 0905 	mov.w	r9, #5
		TxHeader.DLC = hex2int(*(msg+4));
 80035b2:	6130      	str	r0, [r6, #16]
	}

	// data
	for(int i=0; i < TxHeader.DLC; i++)
	{
		TxData[i] = (hex2int(*(msg+index)) << 4) | hex2int(*(msg+index+1));
 80035b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 800366c <CAN_Transmit+0xf4>
		index = 5;
 80035b8:	2700      	movs	r7, #0
	for(int i=0; i < TxHeader.DLC; i++)
 80035ba:	6933      	ldr	r3, [r6, #16]
 80035bc:	eb09 0547 	add.w	r5, r9, r7, lsl #1
 80035c0:	42bb      	cmp	r3, r7
 80035c2:	b2ed      	uxtb	r5, r5
 80035c4:	d840      	bhi.n	8003648 <CAN_Transmit+0xd0>
		index += 2;
	}

	// send
	if (HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox) != HAL_OK)
 80035c6:	4b28      	ldr	r3, [pc, #160]	; (8003668 <CAN_Transmit+0xf0>)
 80035c8:	4a28      	ldr	r2, [pc, #160]	; (800366c <CAN_Transmit+0xf4>)
 80035ca:	4926      	ldr	r1, [pc, #152]	; (8003664 <CAN_Transmit+0xec>)
 80035cc:	4828      	ldr	r0, [pc, #160]	; (8003670 <CAN_Transmit+0xf8>)
 80035ce:	f7fc ff9f 	bl	8000510 <HAL_CAN_AddTxMessage>
      /* Transmission Error */
      Error_Handler();
      return(0);
    }
    return(1);
}
 80035d2:	fab0 f080 	clz	r0, r0
 80035d6:	0940      	lsrs	r0, r0, #5
 80035d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TxHeader.IDE = CAN_ID_EXT;
 80035dc:	2304      	movs	r3, #4
 80035de:	60b3      	str	r3, [r6, #8]
		TxHeader.ExtId =  (hex2int(*(msg+1)) << 28) | (hex2int(*(msg+2)) << 24) | (hex2int(*(msg+3)) << 20) | (hex2int(*(msg+4)) << 16)
 80035e0:	7840      	ldrb	r0, [r0, #1]
 80035e2:	f7ff feec 	bl	80033be <hex2int>
 80035e6:	4605      	mov	r5, r0
 80035e8:	78a0      	ldrb	r0, [r4, #2]
 80035ea:	f7ff fee8 	bl	80033be <hex2int>
 80035ee:	0600      	lsls	r0, r0, #24
 80035f0:	ea40 7505 	orr.w	r5, r0, r5, lsl #28
 80035f4:	78e0      	ldrb	r0, [r4, #3]
 80035f6:	f7ff fee2 	bl	80033be <hex2int>
 80035fa:	4683      	mov	fp, r0
 80035fc:	7920      	ldrb	r0, [r4, #4]
 80035fe:	f7ff fede 	bl	80033be <hex2int>
 8003602:	4682      	mov	sl, r0
								| (hex2int(*(msg+5)) << 12) | (hex2int(*(msg+6)) << 8) | (hex2int(*(msg+7)) << 4) | (hex2int(*(msg+8)));
 8003604:	7960      	ldrb	r0, [r4, #5]
 8003606:	f7ff feda 	bl	80033be <hex2int>
 800360a:	4681      	mov	r9, r0
 800360c:	79a0      	ldrb	r0, [r4, #6]
 800360e:	f7ff fed6 	bl	80033be <hex2int>
 8003612:	4680      	mov	r8, r0
 8003614:	79e0      	ldrb	r0, [r4, #7]
 8003616:	f7ff fed2 	bl	80033be <hex2int>
 800361a:	4607      	mov	r7, r0
 800361c:	7a20      	ldrb	r0, [r4, #8]
 800361e:	f7ff fece 	bl	80033be <hex2int>
 8003622:	4328      	orrs	r0, r5
 8003624:	ea40 500b 	orr.w	r0, r0, fp, lsl #20
 8003628:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 800362c:	ea40 3009 	orr.w	r0, r0, r9, lsl #12
 8003630:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 8003634:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
		TxHeader.ExtId =  (hex2int(*(msg+1)) << 28) | (hex2int(*(msg+2)) << 24) | (hex2int(*(msg+3)) << 20) | (hex2int(*(msg+4)) << 16)
 8003638:	6070      	str	r0, [r6, #4]
		TxHeader.DLC = hex2int(*(msg+9));
 800363a:	7a60      	ldrb	r0, [r4, #9]
 800363c:	f7ff febf 	bl	80033be <hex2int>
		index = 10;
 8003640:	f04f 090a 	mov.w	r9, #10
		TxHeader.DLC = hex2int(*(msg+9));
 8003644:	6130      	str	r0, [r6, #16]
 8003646:	e7b5      	b.n	80035b4 <CAN_Transmit+0x3c>
		TxData[i] = (hex2int(*(msg+index)) << 4) | hex2int(*(msg+index+1));
 8003648:	5d60      	ldrb	r0, [r4, r5]
 800364a:	f7ff feb8 	bl	80033be <hex2int>
 800364e:	4425      	add	r5, r4
 8003650:	4680      	mov	r8, r0
 8003652:	7868      	ldrb	r0, [r5, #1]
 8003654:	f7ff feb3 	bl	80033be <hex2int>
 8003658:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
 800365c:	f807 000a 	strb.w	r0, [r7, sl]
	for(int i=0; i < TxHeader.DLC; i++)
 8003660:	3701      	adds	r7, #1
 8003662:	e7aa      	b.n	80035ba <CAN_Transmit+0x42>
 8003664:	2000074c 	.word	0x2000074c
 8003668:	20000714 	.word	0x20000714
 800366c:	2000070c 	.word	0x2000070c
 8003670:	20000724 	.word	0x20000724

08003674 <process_incoming_usb>:

void process_incoming_usb(char* msgBuffer)
{
 8003674:	b508      	push	{r3, lr}
	bool command_accepted = false;

	switch(msgBuffer[0])
 8003676:	7803      	ldrb	r3, [r0, #0]
 8003678:	2b54      	cmp	r3, #84	; 0x54
 800367a:	d008      	beq.n	800368e <process_incoming_usb+0x1a>
 800367c:	d803      	bhi.n	8003686 <process_incoming_usb+0x12>
 800367e:	2b51      	cmp	r3, #81	; 0x51
	{
		case 'T':
		case 't':
			if(CAN_Transmit(msgBuffer) == 1)
 8003680:	d118      	bne.n	80036b4 <process_incoming_usb+0x40>
		case 'V':
			sprintf(aTxBuffer,VERSION_RESPONSE);
			command_accepted = true;
			break;
		case 'Q':
			sprintf(aTxBuffer,OK_RESPONSE);
 8003682:	490d      	ldr	r1, [pc, #52]	; (80036b8 <process_incoming_usb+0x44>)
 8003684:	e008      	b.n	8003698 <process_incoming_usb+0x24>
	switch(msgBuffer[0])
 8003686:	2b56      	cmp	r3, #86	; 0x56
 8003688:	d005      	beq.n	8003696 <process_incoming_usb+0x22>
 800368a:	2b74      	cmp	r3, #116	; 0x74
 800368c:	d112      	bne.n	80036b4 <process_incoming_usb+0x40>
			if(CAN_Transmit(msgBuffer) == 1)
 800368e:	f7ff ff73 	bl	8003578 <CAN_Transmit>
 8003692:	2801      	cmp	r0, #1
 8003694:	e7f4      	b.n	8003680 <process_incoming_usb+0xc>
			sprintf(aTxBuffer,VERSION_RESPONSE);
 8003696:	4909      	ldr	r1, [pc, #36]	; (80036bc <process_incoming_usb+0x48>)
     {
		CDC_Transmit_FS((uint8_t *)aTxBuffer, strlen(aTxBuffer));
     }
	else
	{
		sprintf(aTxBuffer,BELL_RESPONSE);
 8003698:	4809      	ldr	r0, [pc, #36]	; (80036c0 <process_incoming_usb+0x4c>)
 800369a:	f000 fcb3 	bl	8004004 <strcpy>
		CDC_Transmit_FS((uint8_t *)aTxBuffer, strlen(aTxBuffer));
 800369e:	4808      	ldr	r0, [pc, #32]	; (80036c0 <process_incoming_usb+0x4c>)
 80036a0:	f7fc fd96 	bl	80001d0 <strlen>
 80036a4:	b281      	uxth	r1, r0
 80036a6:	4806      	ldr	r0, [pc, #24]	; (80036c0 <process_incoming_usb+0x4c>)
 80036a8:	f000 fa4a 	bl	8003b40 <CDC_Transmit_FS>
	}

	newCommand = RESET;
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <process_incoming_usb+0x50>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
}
 80036b2:	bd08      	pop	{r3, pc}
		sprintf(aTxBuffer,BELL_RESPONSE);
 80036b4:	4904      	ldr	r1, [pc, #16]	; (80036c8 <process_incoming_usb+0x54>)
 80036b6:	e7ef      	b.n	8003698 <process_incoming_usb+0x24>
 80036b8:	0800481c 	.word	0x0800481c
 80036bc:	0800481f 	.word	0x0800481f
 80036c0:	20000780 	.word	0x20000780
 80036c4:	200001eb 	.word	0x200001eb
 80036c8:	08004824 	.word	0x08004824

080036cc <process_incoming_can_message>:


void process_incoming_can_message(void) {
 80036cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char aTxBuffer[32];
	st_can_message_t *can_msg;
	uint8_t index;

	can_msg = can_fifo_peek(&rxCanFifo);
 80036d0:	481c      	ldr	r0, [pc, #112]	; (8003744 <process_incoming_can_message+0x78>)
void process_incoming_can_message(void) {
 80036d2:	b088      	sub	sp, #32
	can_msg = can_fifo_peek(&rxCanFifo);
 80036d4:	f7ff fe3b 	bl	800334e <can_fifo_peek>

	if(can_msg->ide == CAN_ID_EXT) {
 80036d8:	6843      	ldr	r3, [r0, #4]
		sprintf(aTxBuffer,"T%08X%d", (unsigned int)can_msg->id,(int)can_msg->dlc);
 80036da:	6802      	ldr	r2, [r0, #0]
	if(can_msg->ide == CAN_ID_EXT) {
 80036dc:	2b04      	cmp	r3, #4
	can_msg = can_fifo_peek(&rxCanFifo);
 80036de:	4604      	mov	r4, r0
		sprintf(aTxBuffer,"T%08X%d", (unsigned int)can_msg->id,(int)can_msg->dlc);
 80036e0:	6883      	ldr	r3, [r0, #8]
	if(can_msg->ide == CAN_ID_EXT) {
 80036e2:	d120      	bne.n	8003726 <process_incoming_can_message+0x5a>
		sprintf(aTxBuffer,"T%08X%d", (unsigned int)can_msg->id,(int)can_msg->dlc);
 80036e4:	4918      	ldr	r1, [pc, #96]	; (8003748 <process_incoming_can_message+0x7c>)
 80036e6:	4668      	mov	r0, sp
 80036e8:	f000 fc68 	bl	8003fbc <siprintf>
		index = 10;
 80036ec:	260a      	movs	r6, #10
		index = 5;
	}

	for (int cpt=0;cpt<can_msg->dlc;cpt++)
	{
		sprintf(aTxBuffer+index,"%02X", (unsigned int)can_msg->data[cpt]);
 80036ee:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003754 <process_incoming_can_message+0x88>
 80036f2:	f104 070c 	add.w	r7, r4, #12
		index = 10;
 80036f6:	2500      	movs	r5, #0
	for (int cpt=0;cpt<can_msg->dlc;cpt++)
 80036f8:	68a3      	ldr	r3, [r4, #8]
 80036fa:	eb06 0045 	add.w	r0, r6, r5, lsl #1
 80036fe:	42ab      	cmp	r3, r5
 8003700:	b2c0      	uxtb	r0, r0
 8003702:	d816      	bhi.n	8003732 <process_incoming_can_message+0x66>
		index += 2;
	}

	sprintf(aTxBuffer+index,"\r");
 8003704:	4911      	ldr	r1, [pc, #68]	; (800374c <process_incoming_can_message+0x80>)
 8003706:	4468      	add	r0, sp
 8003708:	f000 fc7c 	bl	8004004 <strcpy>
	CDC_Transmit_FS((uint8_t *)aTxBuffer, strlen(aTxBuffer));
 800370c:	4668      	mov	r0, sp
 800370e:	f7fc fd5f 	bl	80001d0 <strlen>
 8003712:	b281      	uxth	r1, r0
 8003714:	4668      	mov	r0, sp
 8003716:	f000 fa13 	bl	8003b40 <CDC_Transmit_FS>
    can_fifo_dequeue(&rxCanFifo);
 800371a:	480a      	ldr	r0, [pc, #40]	; (8003744 <process_incoming_can_message+0x78>)
 800371c:	f7ff fe04 	bl	8003328 <can_fifo_dequeue>
}
 8003720:	b008      	add	sp, #32
 8003722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sprintf(aTxBuffer,"t%3X%d", (unsigned int)can_msg->id,(int)can_msg->dlc);
 8003726:	490a      	ldr	r1, [pc, #40]	; (8003750 <process_incoming_can_message+0x84>)
 8003728:	4668      	mov	r0, sp
 800372a:	f000 fc47 	bl	8003fbc <siprintf>
		index = 5;
 800372e:	2605      	movs	r6, #5
 8003730:	e7dd      	b.n	80036ee <process_incoming_can_message+0x22>
		sprintf(aTxBuffer+index,"%02X", (unsigned int)can_msg->data[cpt]);
 8003732:	f817 2b01 	ldrb.w	r2, [r7], #1
 8003736:	4641      	mov	r1, r8
 8003738:	4468      	add	r0, sp
 800373a:	f000 fc3f 	bl	8003fbc <siprintf>
	for (int cpt=0;cpt<can_msg->dlc;cpt++)
 800373e:	3501      	adds	r5, #1
 8003740:	e7da      	b.n	80036f8 <process_incoming_can_message+0x2c>
 8003742:	bf00      	nop
 8003744:	20000444 	.word	0x20000444
 8003748:	08004808 	.word	0x08004808
 800374c:	08004825 	.word	0x08004825
 8003750:	08004810 	.word	0x08004810
 8003754:	08004817 	.word	0x08004817

08003758 <main>:
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800375c:	f7fc fda8 	bl	80002b0 <HAL_Init>
  SystemClock_Config();
 8003760:	f7ff fe42 	bl	80033e8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	2214      	movs	r2, #20
 8003766:	2100      	movs	r1, #0
 8003768:	eb0d 0002 	add.w	r0, sp, r2
 800376c:	f000 fc1d 	bl	8003faa <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003770:	4b60      	ldr	r3, [pc, #384]	; (80038f4 <main+0x19c>)
  HAL_GPIO_WritePin(GPIOH, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8003772:	4861      	ldr	r0, [pc, #388]	; (80038f8 <main+0x1a0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hcan1.Instance = CAN1;
 8003776:	4d61      	ldr	r5, [pc, #388]	; (80038fc <main+0x1a4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003778:	f042 0204 	orr.w	r2, r2, #4
 800377c:	64da      	str	r2, [r3, #76]	; 0x4c
 800377e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003780:	f002 0204 	and.w	r2, r2, #4
 8003784:	9201      	str	r2, [sp, #4]
 8003786:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800378a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800378e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003792:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003796:	9202      	str	r2, [sp, #8]
 8003798:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800379a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80037a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037a4:	f002 0201 	and.w	r2, r2, #1
 80037a8:	9203      	str	r2, [sp, #12]
 80037aa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ae:	f042 0202 	orr.w	r2, r2, #2
 80037b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOH, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 80037bc:	2201      	movs	r2, #1
 80037be:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOH, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 80037c2:	f7fd f9ad 	bl	8000b20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80037c6:	2201      	movs	r2, #1
 80037c8:	2102      	movs	r1, #2
 80037ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037ce:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80037d0:	f7fd f9a6 	bl	8000b20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80037d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80037d8:	a905      	add	r1, sp, #20
 80037da:	4849      	ldr	r0, [pc, #292]	; (8003900 <main+0x1a8>)
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80037dc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037de:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037e0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80037e4:	f7fd f8da 	bl	800099c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 80037e8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037ea:	a905      	add	r1, sp, #20
 80037ec:	4842      	ldr	r0, [pc, #264]	; (80038f8 <main+0x1a0>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 80037ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80037f0:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037f8:	f7fd f8d0 	bl	800099c <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80037fc:	a905      	add	r1, sp, #20
 80037fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003802:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003804:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800380a:	f7fd f8c7 	bl	800099c <HAL_GPIO_Init>
  hcan1.Init.Prescaler = 400;
 800380e:	4a3d      	ldr	r2, [pc, #244]	; (8003904 <main+0x1ac>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003810:	60ac      	str	r4, [r5, #8]
  hcan1.Init.Prescaler = 400;
 8003812:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003816:	e885 000c 	stmia.w	r5, {r2, r3}
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 800381a:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 800381e:	612b      	str	r3, [r5, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003820:	4628      	mov	r0, r5
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8003822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003826:	60ec      	str	r4, [r5, #12]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8003828:	616b      	str	r3, [r5, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800382a:	762c      	strb	r4, [r5, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800382c:	766c      	strb	r4, [r5, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800382e:	76ac      	strb	r4, [r5, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003830:	76ec      	strb	r4, [r5, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003832:	772c      	strb	r4, [r5, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003834:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003836:	f7fc fd59 	bl	80002ec <HAL_CAN_Init>
  hrtc.Instance = RTC;
 800383a:	4833      	ldr	r0, [pc, #204]	; (8003908 <main+0x1b0>)
 800383c:	4b33      	ldr	r3, [pc, #204]	; (800390c <main+0x1b4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800383e:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003840:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8003844:	237f      	movs	r3, #127	; 0x7f
 8003846:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003848:	23ff      	movs	r3, #255	; 0xff
 800384a:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800384c:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800384e:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003850:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003852:	f7fe fbc1 	bl	8001fd8 <HAL_RTC_Init>
  MX_USB_DEVICE_Init();
 8003856:	f000 f923 	bl	8003aa0 <MX_USB_DEVICE_Init>
  sFilterConfig.FilterBank = 0;
 800385a:	492d      	ldr	r1, [pc, #180]	; (8003910 <main+0x1b8>)
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800385c:	4628      	mov	r0, r5
  sFilterConfig.FilterBank = 0;
 800385e:	614c      	str	r4, [r1, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003860:	618c      	str	r4, [r1, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003862:	61ce      	str	r6, [r1, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8003864:	600c      	str	r4, [r1, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8003866:	604c      	str	r4, [r1, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003868:	608c      	str	r4, [r1, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800386a:	60cc      	str	r4, [r1, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 800386c:	610c      	str	r4, [r1, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800386e:	620e      	str	r6, [r1, #32]
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8003870:	f7fc fdb7 	bl	80003e2 <HAL_CAN_ConfigFilter>
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8003874:	4628      	mov	r0, r5
 8003876:	f7fc fe20 	bl	80004ba <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800387a:	4639      	mov	r1, r7
 800387c:	4628      	mov	r0, r5
 800387e:	f7fc ff0a 	bl	8000696 <HAL_CAN_ActivateNotification>
	  if(!can_fifo_empty(&rxCanFifo))
 8003882:	4f24      	ldr	r7, [pc, #144]	; (8003914 <main+0x1bc>)
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003884:	4c1c      	ldr	r4, [pc, #112]	; (80038f8 <main+0x1a0>)
		  sprintf(aTxBuffer,BELL_RESPONSE);
 8003886:	4e24      	ldr	r6, [pc, #144]	; (8003918 <main+0x1c0>)
	  if (newCommand == SET)
 8003888:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003928 <main+0x1d0>
	  if(!can_fifo_empty(&rxCanFifo))
 800388c:	4638      	mov	r0, r7
 800388e:	f7ff fd3c 	bl	800330a <can_fifo_empty>
 8003892:	4602      	mov	r2, r0
 8003894:	b950      	cbnz	r0, 80038ac <main+0x154>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003896:	2101      	movs	r1, #1
 8003898:	4620      	mov	r0, r4
 800389a:	f7fd f941 	bl	8000b20 <HAL_GPIO_WritePin>
		  process_incoming_can_message();
 800389e:	f7ff ff15 	bl	80036cc <process_incoming_can_message>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80038a2:	2201      	movs	r2, #1
 80038a4:	4611      	mov	r1, r2
 80038a6:	4620      	mov	r0, r4
 80038a8:	f7fd f93a 	bl	8000b20 <HAL_GPIO_WritePin>
	  if (newCommand == SET)
 80038ac:	f898 5000 	ldrb.w	r5, [r8]
 80038b0:	b2ed      	uxtb	r5, r5
 80038b2:	2d01      	cmp	r5, #1
 80038b4:	d10c      	bne.n	80038d0 <main+0x178>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2102      	movs	r1, #2
 80038ba:	4620      	mov	r0, r4
 80038bc:	f7fd f930 	bl	8000b20 <HAL_GPIO_WritePin>
		  process_incoming_usb(aRxCmdBuffer);
 80038c0:	4816      	ldr	r0, [pc, #88]	; (800391c <main+0x1c4>)
 80038c2:	f7ff fed7 	bl	8003674 <process_incoming_usb>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80038c6:	462a      	mov	r2, r5
 80038c8:	2102      	movs	r1, #2
 80038ca:	4620      	mov	r0, r4
 80038cc:	f7fd f928 	bl	8000b20 <HAL_GPIO_WritePin>
	  if (issueBellResponse == SET)
 80038d0:	4d13      	ldr	r5, [pc, #76]	; (8003920 <main+0x1c8>)
 80038d2:	782b      	ldrb	r3, [r5, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d1d9      	bne.n	800388c <main+0x134>
		  sprintf(aTxBuffer,BELL_RESPONSE);
 80038d8:	4912      	ldr	r1, [pc, #72]	; (8003924 <main+0x1cc>)
 80038da:	4630      	mov	r0, r6
 80038dc:	f000 fb92 	bl	8004004 <strcpy>
		  CDC_Transmit_FS((uint8_t *)aTxBuffer, strlen(aTxBuffer));
 80038e0:	4630      	mov	r0, r6
 80038e2:	f7fc fc75 	bl	80001d0 <strlen>
 80038e6:	b281      	uxth	r1, r0
 80038e8:	4630      	mov	r0, r6
 80038ea:	f000 f929 	bl	8003b40 <CDC_Transmit_FS>
		  issueBellResponse = RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	702b      	strb	r3, [r5, #0]
 80038f2:	e7c9      	b.n	8003888 <main+0x130>
 80038f4:	40021000 	.word	0x40021000
 80038f8:	48001c00 	.word	0x48001c00
 80038fc:	20000724 	.word	0x20000724
 8003900:	48000800 	.word	0x48000800
 8003904:	40006400 	.word	0x40006400
 8003908:	200006e8 	.word	0x200006e8
 800390c:	40002800 	.word	0x40002800
 8003910:	2000041c 	.word	0x2000041c
 8003914:	20000444 	.word	0x20000444
 8003918:	20000780 	.word	0x20000780
 800391c:	200006c8 	.word	0x200006c8
 8003920:	200001ea 	.word	0x200001ea
 8003924:	08004824 	.word	0x08004824
 8003928:	200001eb 	.word	0x200001eb

0800392c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800392c:	4770      	bx	lr
	...

08003930 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_MspInit+0x2c>)
 8003932:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
 800393a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800393c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393e:	f002 0201 	and.w	r2, r2, #1
 8003942:	9200      	str	r2, [sp, #0]
 8003944:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003948:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800394c:	659a      	str	r2, [r3, #88]	; 0x58
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003958:	b002      	add	sp, #8
 800395a:	4770      	bx	lr
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003966:	2214      	movs	r2, #20
 8003968:	2100      	movs	r1, #0
 800396a:	a803      	add	r0, sp, #12
 800396c:	f000 fb1d 	bl	8003faa <memset>
  if(hcan->Instance==CAN1)
 8003970:	6822      	ldr	r2, [r4, #0]
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <HAL_CAN_MspInit+0x70>)
 8003974:	429a      	cmp	r2, r3
 8003976:	d128      	bne.n	80039ca <HAL_CAN_MspInit+0x6a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003978:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397c:	a903      	add	r1, sp, #12
    __HAL_RCC_CAN1_CLK_ENABLE();
 800397e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003980:	4814      	ldr	r0, [pc, #80]	; (80039d4 <HAL_CAN_MspInit+0x74>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003982:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003986:	659a      	str	r2, [r3, #88]	; 0x58
 8003988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800398a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800398e:	9201      	str	r2, [sp, #4]
 8003990:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003994:	f042 0202 	orr.w	r2, r2, #2
 8003998:	64da      	str	r2, [r3, #76]	; 0x4c
 800399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ae:	2303      	movs	r3, #3
 80039b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039b2:	2309      	movs	r3, #9
 80039b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	f7fc fff1 	bl	800099c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2014      	movs	r0, #20
 80039be:	4611      	mov	r1, r2
 80039c0:	f7fc ff96 	bl	80008f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80039c4:	2014      	movs	r0, #20
 80039c6:	f7fc ffc7 	bl	8000958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80039ca:	b008      	add	sp, #32
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	bf00      	nop
 80039d0:	40006400 	.word	0x40006400
 80039d4:	48000400 	.word	0x48000400

080039d8 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80039d8:	6802      	ldr	r2, [r0, #0]
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RTC_MspInit+0x18>)
 80039dc:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039de:	bf01      	itttt	eq
 80039e0:	4a04      	ldreq	r2, [pc, #16]	; (80039f4 <HAL_RTC_MspInit+0x1c>)
 80039e2:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 80039e6:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 80039ea:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 80039ee:	4770      	bx	lr
 80039f0:	40002800 	.word	0x40002800
 80039f4:	40021000 	.word	0x40021000

080039f8 <NMI_Handler>:
 80039f8:	4770      	bx	lr

080039fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039fa:	e7fe      	b.n	80039fa <HardFault_Handler>

080039fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039fc:	e7fe      	b.n	80039fc <MemManage_Handler>

080039fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039fe:	e7fe      	b.n	80039fe <BusFault_Handler>

08003a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a00:	e7fe      	b.n	8003a00 <UsageFault_Handler>

08003a02 <SVC_Handler>:
 8003a02:	4770      	bx	lr

08003a04 <DebugMon_Handler>:
 8003a04:	4770      	bx	lr

08003a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a06:	4770      	bx	lr

08003a08 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a08:	f7fc bc62 	b.w	80002d0 <HAL_IncTick>

08003a0c <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003a0c:	4801      	ldr	r0, [pc, #4]	; (8003a14 <CAN1_RX0_IRQHandler+0x8>)
 8003a0e:	f7fc be5f 	b.w	80006d0 <HAL_CAN_IRQHandler>
 8003a12:	bf00      	nop
 8003a14:	20000724 	.word	0x20000724

08003a18 <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003a18:	4801      	ldr	r0, [pc, #4]	; (8003a20 <USB_IRQHandler+0x8>)
 8003a1a:	f7fd b9bb 	b.w	8000d94 <HAL_PCD_IRQHandler>
 8003a1e:	bf00      	nop
 8003a20:	2000120c 	.word	0x2000120c

08003a24 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003a24:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <_sbrk+0x2c>)
 8003a28:	6819      	ldr	r1, [r3, #0]
{
 8003a2a:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003a2c:	b909      	cbnz	r1, 8003a32 <_sbrk+0xe>
		heap_end = &end;
 8003a2e:	4909      	ldr	r1, [pc, #36]	; (8003a54 <_sbrk+0x30>)
 8003a30:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003a32:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003a34:	4669      	mov	r1, sp
 8003a36:	4402      	add	r2, r0
 8003a38:	428a      	cmp	r2, r1
 8003a3a:	d906      	bls.n	8003a4a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003a3c:	f000 fa80 	bl	8003f40 <__errno>
 8003a40:	230c      	movs	r3, #12
 8003a42:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003a4a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003a4c:	bd08      	pop	{r3, pc}
 8003a4e:	bf00      	nop
 8003a50:	200001ec 	.word	0x200001ec
 8003a54:	20001884 	.word	0x20001884

08003a58 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a58:	490f      	ldr	r1, [pc, #60]	; (8003a98 <SystemInit+0x40>)
 8003a5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003a5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <SystemInit+0x44>)
 8003a68:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003a6a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003a72:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003a7a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003a8e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a94:	608b      	str	r3, [r1, #8]
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003aa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	490a      	ldr	r1, [pc, #40]	; (8003ad0 <MX_USB_DEVICE_Init+0x30>)
 8003aa6:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <MX_USB_DEVICE_Init+0x34>)
 8003aa8:	f7ff f890 	bl	8002bcc <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8003aac:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <MX_USB_DEVICE_Init+0x38>)
 8003aae:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <MX_USB_DEVICE_Init+0x34>)
 8003ab0:	f7ff f8a1 	bl	8002bf6 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8003ab4:	4909      	ldr	r1, [pc, #36]	; (8003adc <MX_USB_DEVICE_Init+0x3c>)
 8003ab6:	4807      	ldr	r0, [pc, #28]	; (8003ad4 <MX_USB_DEVICE_Init+0x34>)
 8003ab8:	f7ff f847 	bl	8002b4a <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8003abc:	4805      	ldr	r0, [pc, #20]	; (8003ad4 <MX_USB_DEVICE_Init+0x34>)
 8003abe:	f000 f9b4 	bl	8003e2a <USBD_LL_BatteryCharging>
 8003ac2:	b120      	cbz	r0, 8003ace <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8003ac4:	4803      	ldr	r0, [pc, #12]	; (8003ad4 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 8003aca:	f7ff b89b 	b.w	8002c04 <USBD_Start>
 8003ace:	bd08      	pop	{r3, pc}
 8003ad0:	20000124 	.word	0x20000124
 8003ad4:	200007a0 	.word	0x200007a0
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	20000114 	.word	0x20000114

08003ae0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	4770      	bx	lr

08003ae4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	4770      	bx	lr

08003ae8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */
	uint32_t i;

	for (i =0; i != *Len; i++)
 8003aee:	4605      	mov	r5, r0
 8003af0:	6832      	ldr	r2, [r6, #0]
 8003af2:	1b2b      	subs	r3, r5, r4
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d108      	bne.n	8003b0a <CDC_Receive_FS+0x22>
		parseInput(Buf[i]);

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003af8:	4621      	mov	r1, r4
 8003afa:	4806      	ldr	r0, [pc, #24]	; (8003b14 <CDC_Receive_FS+0x2c>)
 8003afc:	f7ff f834 	bl	8002b68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003b00:	4804      	ldr	r0, [pc, #16]	; (8003b14 <CDC_Receive_FS+0x2c>)
 8003b02:	f7ff f850 	bl	8002ba6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003b06:	2000      	movs	r0, #0
 8003b08:	bd70      	pop	{r4, r5, r6, pc}
		parseInput(Buf[i]);
 8003b0a:	f815 0b01 	ldrb.w	r0, [r5], #1
 8003b0e:	f7ff fd01 	bl	8003514 <parseInput>
 8003b12:	e7ed      	b.n	8003af0 <CDC_Receive_FS+0x8>
 8003b14:	200007a0 	.word	0x200007a0

08003b18 <CDC_Init_FS>:
{
 8003b18:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003b1a:	4c06      	ldr	r4, [pc, #24]	; (8003b34 <CDC_Init_FS+0x1c>)
 8003b1c:	4906      	ldr	r1, [pc, #24]	; (8003b38 <CDC_Init_FS+0x20>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff f819 	bl	8002b58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003b26:	4905      	ldr	r1, [pc, #20]	; (8003b3c <CDC_Init_FS+0x24>)
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff f81d 	bl	8002b68 <USBD_CDC_SetRxBuffer>
}
 8003b2e:	2000      	movs	r0, #0
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	bf00      	nop
 8003b34:	200007a0 	.word	0x200007a0
 8003b38:	20000e24 	.word	0x20000e24
 8003b3c:	20000a3c 	.word	0x20000a3c

08003b40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003b40:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003b42:	4c09      	ldr	r4, [pc, #36]	; (8003b68 <CDC_Transmit_FS+0x28>)
 8003b44:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 8003b48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8003b4c:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8003b4e:	b943      	cbnz	r3, 8003b62 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003b50:	4601      	mov	r1, r0
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff f800 	bl	8002b58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003b58:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8003b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003b5e:	f7ff b809 	b.w	8002b74 <USBD_CDC_TransmitPacket>
}
 8003b62:	2001      	movs	r0, #1
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	bf00      	nop
 8003b68:	200007a0 	.word	0x200007a0

08003b6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003b6c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <HAL_PCD_MspInit+0x38>)
 8003b70:	6802      	ldr	r2, [r0, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d112      	bne.n	8003b9c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003b76:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003b7a:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_CLK_ENABLE();
 8003b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b82:	659a      	str	r2, [r3, #88]	; 0x58
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003b86:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003b88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b8c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003b8e:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003b90:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003b92:	f7fc fead 	bl	80008f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8003b96:	2043      	movs	r0, #67	; 0x43
 8003b98:	f7fc fede 	bl	8000958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003b9c:	b003      	add	sp, #12
 8003b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ba2:	bf00      	nop
 8003ba4:	40006800 	.word	0x40006800

08003ba8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003ba8:	f500 6186 	add.w	r1, r0, #1072	; 0x430
 8003bac:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003bb0:	f7ff b83f 	b.w	8002c32 <USBD_LL_SetupStage>

08003bb4 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003bb4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003bb8:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003bbc:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8003bc0:	f7ff b864 	b.w	8002c8c <USBD_LL_DataOutStage>

08003bc4 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003bc4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003bc8:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bce:	f7ff b895 	b.w	8002cfc <USBD_LL_DataInStage>

08003bd2 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003bd2:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003bd6:	f7ff b926 	b.w	8002e26 <USBD_LL_SOF>

08003bda <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003bda:	b510      	push	{r4, lr}
 8003bdc:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003bde:	2101      	movs	r1, #1
 8003be0:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003be4:	f7ff f90d 	bl	8002e02 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003be8:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8003bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003bf0:	f7ff b8e0 	b.w	8002db4 <USBD_LL_Reset>

08003bf4 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003bf8:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003bfc:	f7ff f904 	bl	8002e08 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003c00:	69a3      	ldr	r3, [r4, #24]
 8003c02:	b123      	cbz	r3, 8003c0e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c04:	4a02      	ldr	r2, [pc, #8]	; (8003c10 <HAL_PCD_SuspendCallback+0x1c>)
 8003c06:	6913      	ldr	r3, [r2, #16]
 8003c08:	f043 0306 	orr.w	r3, r3, #6
 8003c0c:	6113      	str	r3, [r2, #16]
 8003c0e:	bd10      	pop	{r4, pc}
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8003c14:	6983      	ldr	r3, [r0, #24]
{
 8003c16:	b510      	push	{r4, lr}
 8003c18:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8003c1a:	b133      	cbz	r3, 8003c2a <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c1c:	4a06      	ldr	r2, [pc, #24]	; (8003c38 <HAL_PCD_ResumeCallback+0x24>)
 8003c1e:	6913      	ldr	r3, [r2, #16]
 8003c20:	f023 0306 	bic.w	r3, r3, #6
 8003c24:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8003c26:	f7ff fbdf 	bl	80033e8 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c2a:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8003c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c32:	f7ff b8f2 	b.w	8002e1a <USBD_LL_Resume>
 8003c36:	bf00      	nop
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <USBD_LL_Init>:
{
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8003c40:	f7fd fbe4 	bl	800140c <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 8003c44:	481e      	ldr	r0, [pc, #120]	; (8003cc0 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003c46:	4a1f      	ldr	r2, [pc, #124]	; (8003cc4 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.pData = pdev;
 8003c48:	f8c0 4470 	str.w	r4, [r0, #1136]	; 0x470
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	e880 000c 	stmia.w	r0, {r2, r3}
  pdev->pData = &hpcd_USB_FS;
 8003c52:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003c56:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003c58:	2202      	movs	r2, #2
 8003c5a:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003c5c:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003c5e:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003c60:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003c62:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003c64:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003c66:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003c68:	f7fc ff5f 	bl	8000b2a <HAL_PCD_Init>
 8003c6c:	b108      	cbz	r0, 8003c72 <USBD_LL_Init+0x36>
    Error_Handler( );
 8003c6e:	f7ff fe5d 	bl	800392c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003c72:	2200      	movs	r2, #0
 8003c74:	4611      	mov	r1, r2
 8003c76:	2318      	movs	r3, #24
 8003c78:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003c7c:	f7fd fb3e 	bl	80012fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003c80:	2358      	movs	r3, #88	; 0x58
 8003c82:	2200      	movs	r2, #0
 8003c84:	2180      	movs	r1, #128	; 0x80
 8003c86:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003c8a:	f7fd fb37 	bl	80012fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003c8e:	23c0      	movs	r3, #192	; 0xc0
 8003c90:	2200      	movs	r2, #0
 8003c92:	2181      	movs	r1, #129	; 0x81
 8003c94:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003c98:	f7fd fb30 	bl	80012fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003c9c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003ca8:	f7fd fb28 	bl	80012fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2182      	movs	r1, #130	; 0x82
 8003cb4:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003cb8:	f7fd fb20 	bl	80012fc <HAL_PCDEx_PMAConfig>
}
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	bd10      	pop	{r4, pc}
 8003cc0:	2000120c 	.word	0x2000120c
 8003cc4:	40006800 	.word	0x40006800

08003cc8 <USBD_LL_Start>:
{
 8003cc8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003cca:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003cce:	f7fc ffa0 	bl	8000c12 <HAL_PCD_Start>
 8003cd2:	2803      	cmp	r0, #3
 8003cd4:	bf9a      	itte	ls
 8003cd6:	4b02      	ldrls	r3, [pc, #8]	; (8003ce0 <USBD_LL_Start+0x18>)
 8003cd8:	5c18      	ldrbls	r0, [r3, r0]
 8003cda:	2002      	movhi	r0, #2
}
 8003cdc:	bd08      	pop	{r3, pc}
 8003cde:	bf00      	nop
 8003ce0:	08004868 	.word	0x08004868

08003ce4 <USBD_LL_OpenEP>:
{
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003ce8:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003cec:	4613      	mov	r3, r2
 8003cee:	4622      	mov	r2, r4
 8003cf0:	f7fc ffb8 	bl	8000c64 <HAL_PCD_EP_Open>
 8003cf4:	2803      	cmp	r0, #3
 8003cf6:	bf9a      	itte	ls
 8003cf8:	4b01      	ldrls	r3, [pc, #4]	; (8003d00 <USBD_LL_OpenEP+0x1c>)
 8003cfa:	5c18      	ldrbls	r0, [r3, r0]
 8003cfc:	2002      	movhi	r0, #2
}
 8003cfe:	bd10      	pop	{r4, pc}
 8003d00:	08004868 	.word	0x08004868

08003d04 <USBD_LL_CloseEP>:
{
 8003d04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003d06:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003d0a:	f7fc ffe0 	bl	8000cce <HAL_PCD_EP_Close>
 8003d0e:	2803      	cmp	r0, #3
 8003d10:	bf9a      	itte	ls
 8003d12:	4b02      	ldrls	r3, [pc, #8]	; (8003d1c <USBD_LL_CloseEP+0x18>)
 8003d14:	5c18      	ldrbls	r0, [r3, r0]
 8003d16:	2002      	movhi	r0, #2
}
 8003d18:	bd08      	pop	{r3, pc}
 8003d1a:	bf00      	nop
 8003d1c:	08004868 	.word	0x08004868

08003d20 <USBD_LL_StallEP>:
{
 8003d20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d22:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003d26:	f7fd fa7d 	bl	8001224 <HAL_PCD_EP_SetStall>
 8003d2a:	2803      	cmp	r0, #3
 8003d2c:	bf9a      	itte	ls
 8003d2e:	4b02      	ldrls	r3, [pc, #8]	; (8003d38 <USBD_LL_StallEP+0x18>)
 8003d30:	5c18      	ldrbls	r0, [r3, r0]
 8003d32:	2002      	movhi	r0, #2
}
 8003d34:	bd08      	pop	{r3, pc}
 8003d36:	bf00      	nop
 8003d38:	08004868 	.word	0x08004868

08003d3c <USBD_LL_ClearStallEP>:
{
 8003d3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003d3e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003d42:	f7fd faa8 	bl	8001296 <HAL_PCD_EP_ClrStall>
 8003d46:	2803      	cmp	r0, #3
 8003d48:	bf9a      	itte	ls
 8003d4a:	4b02      	ldrls	r3, [pc, #8]	; (8003d54 <USBD_LL_ClearStallEP+0x18>)
 8003d4c:	5c18      	ldrbls	r0, [r3, r0]
 8003d4e:	2002      	movhi	r0, #2
}
 8003d50:	bd08      	pop	{r3, pc}
 8003d52:	bf00      	nop
 8003d54:	08004868 	.word	0x08004868

08003d58 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8003d58:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003d5a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d5e:	bf45      	ittet	mi
 8003d60:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003d64:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003d68:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d6c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003d70:	bf58      	it	pl
 8003d72:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
}
 8003d76:	4770      	bx	lr

08003d78 <USBD_LL_SetUSBAddress>:
{
 8003d78:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003d7a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003d7e:	f7fc ff5d 	bl	8000c3c <HAL_PCD_SetAddress>
 8003d82:	2803      	cmp	r0, #3
 8003d84:	bf9a      	itte	ls
 8003d86:	4b02      	ldrls	r3, [pc, #8]	; (8003d90 <USBD_LL_SetUSBAddress+0x18>)
 8003d88:	5c18      	ldrbls	r0, [r3, r0]
 8003d8a:	2002      	movhi	r0, #2
}
 8003d8c:	bd08      	pop	{r3, pc}
 8003d8e:	bf00      	nop
 8003d90:	08004868 	.word	0x08004868

08003d94 <USBD_LL_Transmit>:
{
 8003d94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003d96:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003d9a:	f7fc ffe3 	bl	8000d64 <HAL_PCD_EP_Transmit>
 8003d9e:	2803      	cmp	r0, #3
 8003da0:	bf9a      	itte	ls
 8003da2:	4b02      	ldrls	r3, [pc, #8]	; (8003dac <USBD_LL_Transmit+0x18>)
 8003da4:	5c18      	ldrbls	r0, [r3, r0]
 8003da6:	2002      	movhi	r0, #2
}
 8003da8:	bd08      	pop	{r3, pc}
 8003daa:	bf00      	nop
 8003dac:	08004868 	.word	0x08004868

08003db0 <USBD_LL_PrepareReceive>:
{
 8003db0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003db2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003db6:	f7fc ffb5 	bl	8000d24 <HAL_PCD_EP_Receive>
 8003dba:	2803      	cmp	r0, #3
 8003dbc:	bf9a      	itte	ls
 8003dbe:	4b02      	ldrls	r3, [pc, #8]	; (8003dc8 <USBD_LL_PrepareReceive+0x18>)
 8003dc0:	5c18      	ldrbls	r0, [r3, r0]
 8003dc2:	2002      	movhi	r0, #2
}
 8003dc4:	bd08      	pop	{r3, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08004868 	.word	0x08004868

08003dcc <USBD_LL_GetRxDataSize>:
{
 8003dcc:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003dce:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003dd2:	f7fc ffc0 	bl	8000d56 <HAL_PCD_EP_GetRxCount>
}
 8003dd6:	bd08      	pop	{r3, pc}

08003dd8 <HAL_PCDEx_LPM_Callback>:
{
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	4604      	mov	r4, r0
  switch (msg)
 8003ddc:	b111      	cbz	r1, 8003de4 <HAL_PCDEx_LPM_Callback+0xc>
 8003dde:	2901      	cmp	r1, #1
 8003de0:	d00f      	beq.n	8003e02 <HAL_PCDEx_LPM_Callback+0x2a>
 8003de2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8003de4:	6983      	ldr	r3, [r0, #24]
 8003de6:	b133      	cbz	r3, 8003df6 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 8003de8:	f7ff fafe 	bl	80033e8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <HAL_PCDEx_LPM_Callback+0x44>)
 8003dee:	6913      	ldr	r3, [r2, #16]
 8003df0:	f023 0306 	bic.w	r3, r3, #6
 8003df4:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8003df6:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8003dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8003dfe:	f7ff b80c 	b.w	8002e1a <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8003e02:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003e06:	f7fe ffff 	bl	8002e08 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8003e0a:	69a3      	ldr	r3, [r4, #24]
 8003e0c:	b123      	cbz	r3, 8003e18 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003e0e:	4a03      	ldr	r2, [pc, #12]	; (8003e1c <HAL_PCDEx_LPM_Callback+0x44>)
 8003e10:	6913      	ldr	r3, [r2, #16]
 8003e12:	f043 0306 	orr.w	r3, r3, #6
 8003e16:	6113      	str	r3, [r2, #16]
 8003e18:	bd10      	pop	{r4, pc}
 8003e1a:	bf00      	nop
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <USBD_static_malloc>:
}
 8003e20:	4800      	ldr	r0, [pc, #0]	; (8003e24 <USBD_static_malloc+0x4>)
 8003e22:	4770      	bx	lr
 8003e24:	200001f0 	.word	0x200001f0

08003e28 <USBD_static_free>:
{
 8003e28:	4770      	bx	lr

08003e2a <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 8003e2a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003e32:	bf14      	ite	ne
 8003e34:	2002      	movne	r0, #2
 8003e36:	2000      	moveq	r0, #0
 8003e38:	4770      	bx	lr
	...

08003e3c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e3c:	2312      	movs	r3, #18
 8003e3e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003e40:	4800      	ldr	r0, [pc, #0]	; (8003e44 <USBD_FS_DeviceDescriptor+0x8>)
 8003e42:	4770      	bx	lr
 8003e44:	20000150 	.word	0x20000150

08003e48 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003e48:	2304      	movs	r3, #4
 8003e4a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003e4c:	4800      	ldr	r0, [pc, #0]	; (8003e50 <USBD_FS_LangIDStrDescriptor+0x8>)
 8003e4e:	4770      	bx	lr
 8003e50:	20000164 	.word	0x20000164

08003e54 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8003e54:	230c      	movs	r3, #12
 8003e56:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8003e58:	4800      	ldr	r0, [pc, #0]	; (8003e5c <USBD_FS_USR_BOSDescriptor+0x8>)
 8003e5a:	4770      	bx	lr
 8003e5c:	20000144 	.word	0x20000144

08003e60 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003e60:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e62:	4c04      	ldr	r4, [pc, #16]	; (8003e74 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003e64:	4804      	ldr	r0, [pc, #16]	; (8003e78 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003e66:	460a      	mov	r2, r1
 8003e68:	4621      	mov	r1, r4
 8003e6a:	f7ff f9e1 	bl	8003230 <USBD_GetString>
}
 8003e6e:	4620      	mov	r0, r4
 8003e70:	bd10      	pop	{r4, pc}
 8003e72:	bf00      	nop
 8003e74:	20001680 	.word	0x20001680
 8003e78:	08004885 	.word	0x08004885

08003e7c <USBD_FS_ProductStrDescriptor>:
{
 8003e7c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e7e:	4c04      	ldr	r4, [pc, #16]	; (8003e90 <USBD_FS_ProductStrDescriptor+0x14>)
 8003e80:	4804      	ldr	r0, [pc, #16]	; (8003e94 <USBD_FS_ProductStrDescriptor+0x18>)
 8003e82:	460a      	mov	r2, r1
 8003e84:	4621      	mov	r1, r4
 8003e86:	f7ff f9d3 	bl	8003230 <USBD_GetString>
}
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	bd10      	pop	{r4, pc}
 8003e8e:	bf00      	nop
 8003e90:	20001680 	.word	0x20001680
 8003e94:	08004898 	.word	0x08004898

08003e98 <USBD_FS_SerialStrDescriptor>:
{
 8003e98:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003e9a:	4c04      	ldr	r4, [pc, #16]	; (8003eac <USBD_FS_SerialStrDescriptor+0x14>)
 8003e9c:	4804      	ldr	r0, [pc, #16]	; (8003eb0 <USBD_FS_SerialStrDescriptor+0x18>)
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	f7ff f9c5 	bl	8003230 <USBD_GetString>
}
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	bf00      	nop
 8003eac:	20001680 	.word	0x20001680
 8003eb0:	080048ae 	.word	0x080048ae

08003eb4 <USBD_FS_ConfigStrDescriptor>:
{
 8003eb4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003eb6:	4c04      	ldr	r4, [pc, #16]	; (8003ec8 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003eb8:	4804      	ldr	r0, [pc, #16]	; (8003ecc <USBD_FS_ConfigStrDescriptor+0x18>)
 8003eba:	460a      	mov	r2, r1
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	f7ff f9b7 	bl	8003230 <USBD_GetString>
}
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	bd10      	pop	{r4, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20001680 	.word	0x20001680
 8003ecc:	0800486c 	.word	0x0800486c

08003ed0 <USBD_FS_InterfaceStrDescriptor>:
{
 8003ed0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003ed2:	4c04      	ldr	r4, [pc, #16]	; (8003ee4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003ed4:	4804      	ldr	r0, [pc, #16]	; (8003ee8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	4621      	mov	r1, r4
 8003eda:	f7ff f9a9 	bl	8003230 <USBD_GetString>
}
 8003ede:	4620      	mov	r0, r4
 8003ee0:	bd10      	pop	{r4, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20001680 	.word	0x20001680
 8003ee8:	08004877 	.word	0x08004877

08003eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ef0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ef2:	e003      	b.n	8003efc <LoopCopyDataInit>

08003ef4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ef6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ef8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003efa:	3104      	adds	r1, #4

08003efc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003efc:	480b      	ldr	r0, [pc, #44]	; (8003f2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f04:	d3f6      	bcc.n	8003ef4 <CopyDataInit>
	ldr	r2, =_sbss
 8003f06:	4a0b      	ldr	r2, [pc, #44]	; (8003f34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f08:	e002      	b.n	8003f10 <LoopFillZerobss>

08003f0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f0c:	f842 3b04 	str.w	r3, [r2], #4

08003f10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <LoopForever+0x16>)
	cmp	r2, r3
 8003f12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f14:	d3f9      	bcc.n	8003f0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f16:	f7ff fd9f 	bl	8003a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f1a:	f000 f817 	bl	8003f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f1e:	f7ff fc1b 	bl	8003758 <main>

08003f22 <LoopForever>:

LoopForever:
    b LoopForever
 8003f22:	e7fe      	b.n	8003f22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f24:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003f28:	080048f8 	.word	0x080048f8
	ldr	r0, =_sdata
 8003f2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f30:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 8003f34:	200001cc 	.word	0x200001cc
	ldr	r3, = _ebss
 8003f38:	20001884 	.word	0x20001884

08003f3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f3c:	e7fe      	b.n	8003f3c <ADC1_IRQHandler>
	...

08003f40 <__errno>:
 8003f40:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <__errno+0x8>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000168 	.word	0x20000168

08003f4c <__libc_init_array>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	4e0d      	ldr	r6, [pc, #52]	; (8003f84 <__libc_init_array+0x38>)
 8003f50:	4c0d      	ldr	r4, [pc, #52]	; (8003f88 <__libc_init_array+0x3c>)
 8003f52:	1ba4      	subs	r4, r4, r6
 8003f54:	10a4      	asrs	r4, r4, #2
 8003f56:	2500      	movs	r5, #0
 8003f58:	42a5      	cmp	r5, r4
 8003f5a:	d109      	bne.n	8003f70 <__libc_init_array+0x24>
 8003f5c:	4e0b      	ldr	r6, [pc, #44]	; (8003f8c <__libc_init_array+0x40>)
 8003f5e:	4c0c      	ldr	r4, [pc, #48]	; (8003f90 <__libc_init_array+0x44>)
 8003f60:	f000 fc46 	bl	80047f0 <_init>
 8003f64:	1ba4      	subs	r4, r4, r6
 8003f66:	10a4      	asrs	r4, r4, #2
 8003f68:	2500      	movs	r5, #0
 8003f6a:	42a5      	cmp	r5, r4
 8003f6c:	d105      	bne.n	8003f7a <__libc_init_array+0x2e>
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f74:	4798      	blx	r3
 8003f76:	3501      	adds	r5, #1
 8003f78:	e7ee      	b.n	8003f58 <__libc_init_array+0xc>
 8003f7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f7e:	4798      	blx	r3
 8003f80:	3501      	adds	r5, #1
 8003f82:	e7f2      	b.n	8003f6a <__libc_init_array+0x1e>
 8003f84:	080048f0 	.word	0x080048f0
 8003f88:	080048f0 	.word	0x080048f0
 8003f8c:	080048f0 	.word	0x080048f0
 8003f90:	080048f4 	.word	0x080048f4

08003f94 <memcpy>:
 8003f94:	b510      	push	{r4, lr}
 8003f96:	1e43      	subs	r3, r0, #1
 8003f98:	440a      	add	r2, r1
 8003f9a:	4291      	cmp	r1, r2
 8003f9c:	d100      	bne.n	8003fa0 <memcpy+0xc>
 8003f9e:	bd10      	pop	{r4, pc}
 8003fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fa8:	e7f7      	b.n	8003f9a <memcpy+0x6>

08003faa <memset>:
 8003faa:	4402      	add	r2, r0
 8003fac:	4603      	mov	r3, r0
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d100      	bne.n	8003fb4 <memset+0xa>
 8003fb2:	4770      	bx	lr
 8003fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb8:	e7f9      	b.n	8003fae <memset+0x4>
	...

08003fbc <siprintf>:
 8003fbc:	b40e      	push	{r1, r2, r3}
 8003fbe:	b500      	push	{lr}
 8003fc0:	b09c      	sub	sp, #112	; 0x70
 8003fc2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003fc8:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003fcc:	9002      	str	r0, [sp, #8]
 8003fce:	9006      	str	r0, [sp, #24]
 8003fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fd4:	480a      	ldr	r0, [pc, #40]	; (8004000 <siprintf+0x44>)
 8003fd6:	9104      	str	r1, [sp, #16]
 8003fd8:	9107      	str	r1, [sp, #28]
 8003fda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003fe6:	6800      	ldr	r0, [r0, #0]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	a902      	add	r1, sp, #8
 8003fec:	f000 f86e 	bl	80040cc <_svfiprintf_r>
 8003ff0:	9b02      	ldr	r3, [sp, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	b01c      	add	sp, #112	; 0x70
 8003ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ffc:	b003      	add	sp, #12
 8003ffe:	4770      	bx	lr
 8004000:	20000168 	.word	0x20000168

08004004 <strcpy>:
 8004004:	4603      	mov	r3, r0
 8004006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800400a:	f803 2b01 	strb.w	r2, [r3], #1
 800400e:	2a00      	cmp	r2, #0
 8004010:	d1f9      	bne.n	8004006 <strcpy+0x2>
 8004012:	4770      	bx	lr

08004014 <__ssputs_r>:
 8004014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004018:	688e      	ldr	r6, [r1, #8]
 800401a:	429e      	cmp	r6, r3
 800401c:	4682      	mov	sl, r0
 800401e:	460c      	mov	r4, r1
 8004020:	4691      	mov	r9, r2
 8004022:	4698      	mov	r8, r3
 8004024:	d835      	bhi.n	8004092 <__ssputs_r+0x7e>
 8004026:	898a      	ldrh	r2, [r1, #12]
 8004028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800402c:	d031      	beq.n	8004092 <__ssputs_r+0x7e>
 800402e:	6825      	ldr	r5, [r4, #0]
 8004030:	6909      	ldr	r1, [r1, #16]
 8004032:	1a6f      	subs	r7, r5, r1
 8004034:	6965      	ldr	r5, [r4, #20]
 8004036:	2302      	movs	r3, #2
 8004038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800403c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004040:	f108 0301 	add.w	r3, r8, #1
 8004044:	443b      	add	r3, r7
 8004046:	429d      	cmp	r5, r3
 8004048:	bf38      	it	cc
 800404a:	461d      	movcc	r5, r3
 800404c:	0553      	lsls	r3, r2, #21
 800404e:	d531      	bpl.n	80040b4 <__ssputs_r+0xa0>
 8004050:	4629      	mov	r1, r5
 8004052:	f000 fb2d 	bl	80046b0 <_malloc_r>
 8004056:	4606      	mov	r6, r0
 8004058:	b950      	cbnz	r0, 8004070 <__ssputs_r+0x5c>
 800405a:	230c      	movs	r3, #12
 800405c:	f8ca 3000 	str.w	r3, [sl]
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	f04f 30ff 	mov.w	r0, #4294967295
 800406c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004070:	463a      	mov	r2, r7
 8004072:	6921      	ldr	r1, [r4, #16]
 8004074:	f7ff ff8e 	bl	8003f94 <memcpy>
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800407e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004082:	81a3      	strh	r3, [r4, #12]
 8004084:	6126      	str	r6, [r4, #16]
 8004086:	6165      	str	r5, [r4, #20]
 8004088:	443e      	add	r6, r7
 800408a:	1bed      	subs	r5, r5, r7
 800408c:	6026      	str	r6, [r4, #0]
 800408e:	60a5      	str	r5, [r4, #8]
 8004090:	4646      	mov	r6, r8
 8004092:	4546      	cmp	r6, r8
 8004094:	bf28      	it	cs
 8004096:	4646      	movcs	r6, r8
 8004098:	4632      	mov	r2, r6
 800409a:	4649      	mov	r1, r9
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	f000 fa9f 	bl	80045e0 <memmove>
 80040a2:	68a3      	ldr	r3, [r4, #8]
 80040a4:	1b9b      	subs	r3, r3, r6
 80040a6:	60a3      	str	r3, [r4, #8]
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	441e      	add	r6, r3
 80040ac:	6026      	str	r6, [r4, #0]
 80040ae:	2000      	movs	r0, #0
 80040b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b4:	462a      	mov	r2, r5
 80040b6:	f000 fb59 	bl	800476c <_realloc_r>
 80040ba:	4606      	mov	r6, r0
 80040bc:	2800      	cmp	r0, #0
 80040be:	d1e1      	bne.n	8004084 <__ssputs_r+0x70>
 80040c0:	6921      	ldr	r1, [r4, #16]
 80040c2:	4650      	mov	r0, sl
 80040c4:	f000 faa6 	bl	8004614 <_free_r>
 80040c8:	e7c7      	b.n	800405a <__ssputs_r+0x46>
	...

080040cc <_svfiprintf_r>:
 80040cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d0:	b09d      	sub	sp, #116	; 0x74
 80040d2:	4680      	mov	r8, r0
 80040d4:	9303      	str	r3, [sp, #12]
 80040d6:	898b      	ldrh	r3, [r1, #12]
 80040d8:	061c      	lsls	r4, r3, #24
 80040da:	460d      	mov	r5, r1
 80040dc:	4616      	mov	r6, r2
 80040de:	d50f      	bpl.n	8004100 <_svfiprintf_r+0x34>
 80040e0:	690b      	ldr	r3, [r1, #16]
 80040e2:	b96b      	cbnz	r3, 8004100 <_svfiprintf_r+0x34>
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	f000 fae3 	bl	80046b0 <_malloc_r>
 80040ea:	6028      	str	r0, [r5, #0]
 80040ec:	6128      	str	r0, [r5, #16]
 80040ee:	b928      	cbnz	r0, 80040fc <_svfiprintf_r+0x30>
 80040f0:	230c      	movs	r3, #12
 80040f2:	f8c8 3000 	str.w	r3, [r8]
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	e0c5      	b.n	8004288 <_svfiprintf_r+0x1bc>
 80040fc:	2340      	movs	r3, #64	; 0x40
 80040fe:	616b      	str	r3, [r5, #20]
 8004100:	2300      	movs	r3, #0
 8004102:	9309      	str	r3, [sp, #36]	; 0x24
 8004104:	2320      	movs	r3, #32
 8004106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800410a:	2330      	movs	r3, #48	; 0x30
 800410c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004110:	f04f 0b01 	mov.w	fp, #1
 8004114:	4637      	mov	r7, r6
 8004116:	463c      	mov	r4, r7
 8004118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d13c      	bne.n	800419a <_svfiprintf_r+0xce>
 8004120:	ebb7 0a06 	subs.w	sl, r7, r6
 8004124:	d00b      	beq.n	800413e <_svfiprintf_r+0x72>
 8004126:	4653      	mov	r3, sl
 8004128:	4632      	mov	r2, r6
 800412a:	4629      	mov	r1, r5
 800412c:	4640      	mov	r0, r8
 800412e:	f7ff ff71 	bl	8004014 <__ssputs_r>
 8004132:	3001      	adds	r0, #1
 8004134:	f000 80a3 	beq.w	800427e <_svfiprintf_r+0x1b2>
 8004138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800413a:	4453      	add	r3, sl
 800413c:	9309      	str	r3, [sp, #36]	; 0x24
 800413e:	783b      	ldrb	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 809c 	beq.w	800427e <_svfiprintf_r+0x1b2>
 8004146:	2300      	movs	r3, #0
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	9304      	str	r3, [sp, #16]
 800414e:	9307      	str	r3, [sp, #28]
 8004150:	9205      	str	r2, [sp, #20]
 8004152:	9306      	str	r3, [sp, #24]
 8004154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004158:	931a      	str	r3, [sp, #104]	; 0x68
 800415a:	2205      	movs	r2, #5
 800415c:	7821      	ldrb	r1, [r4, #0]
 800415e:	4850      	ldr	r0, [pc, #320]	; (80042a0 <_svfiprintf_r+0x1d4>)
 8004160:	f7fc f83e 	bl	80001e0 <memchr>
 8004164:	1c67      	adds	r7, r4, #1
 8004166:	9b04      	ldr	r3, [sp, #16]
 8004168:	b9d8      	cbnz	r0, 80041a2 <_svfiprintf_r+0xd6>
 800416a:	06d9      	lsls	r1, r3, #27
 800416c:	bf44      	itt	mi
 800416e:	2220      	movmi	r2, #32
 8004170:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004174:	071a      	lsls	r2, r3, #28
 8004176:	bf44      	itt	mi
 8004178:	222b      	movmi	r2, #43	; 0x2b
 800417a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800417e:	7822      	ldrb	r2, [r4, #0]
 8004180:	2a2a      	cmp	r2, #42	; 0x2a
 8004182:	d016      	beq.n	80041b2 <_svfiprintf_r+0xe6>
 8004184:	9a07      	ldr	r2, [sp, #28]
 8004186:	2100      	movs	r1, #0
 8004188:	200a      	movs	r0, #10
 800418a:	4627      	mov	r7, r4
 800418c:	3401      	adds	r4, #1
 800418e:	783b      	ldrb	r3, [r7, #0]
 8004190:	3b30      	subs	r3, #48	; 0x30
 8004192:	2b09      	cmp	r3, #9
 8004194:	d951      	bls.n	800423a <_svfiprintf_r+0x16e>
 8004196:	b1c9      	cbz	r1, 80041cc <_svfiprintf_r+0x100>
 8004198:	e011      	b.n	80041be <_svfiprintf_r+0xf2>
 800419a:	2b25      	cmp	r3, #37	; 0x25
 800419c:	d0c0      	beq.n	8004120 <_svfiprintf_r+0x54>
 800419e:	4627      	mov	r7, r4
 80041a0:	e7b9      	b.n	8004116 <_svfiprintf_r+0x4a>
 80041a2:	4a3f      	ldr	r2, [pc, #252]	; (80042a0 <_svfiprintf_r+0x1d4>)
 80041a4:	1a80      	subs	r0, r0, r2
 80041a6:	fa0b f000 	lsl.w	r0, fp, r0
 80041aa:	4318      	orrs	r0, r3
 80041ac:	9004      	str	r0, [sp, #16]
 80041ae:	463c      	mov	r4, r7
 80041b0:	e7d3      	b.n	800415a <_svfiprintf_r+0x8e>
 80041b2:	9a03      	ldr	r2, [sp, #12]
 80041b4:	1d11      	adds	r1, r2, #4
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	9103      	str	r1, [sp, #12]
 80041ba:	2a00      	cmp	r2, #0
 80041bc:	db01      	blt.n	80041c2 <_svfiprintf_r+0xf6>
 80041be:	9207      	str	r2, [sp, #28]
 80041c0:	e004      	b.n	80041cc <_svfiprintf_r+0x100>
 80041c2:	4252      	negs	r2, r2
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	9207      	str	r2, [sp, #28]
 80041ca:	9304      	str	r3, [sp, #16]
 80041cc:	783b      	ldrb	r3, [r7, #0]
 80041ce:	2b2e      	cmp	r3, #46	; 0x2e
 80041d0:	d10e      	bne.n	80041f0 <_svfiprintf_r+0x124>
 80041d2:	787b      	ldrb	r3, [r7, #1]
 80041d4:	2b2a      	cmp	r3, #42	; 0x2a
 80041d6:	f107 0101 	add.w	r1, r7, #1
 80041da:	d132      	bne.n	8004242 <_svfiprintf_r+0x176>
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	1d1a      	adds	r2, r3, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	9203      	str	r2, [sp, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bfb8      	it	lt
 80041e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ec:	3702      	adds	r7, #2
 80041ee:	9305      	str	r3, [sp, #20]
 80041f0:	4c2c      	ldr	r4, [pc, #176]	; (80042a4 <_svfiprintf_r+0x1d8>)
 80041f2:	7839      	ldrb	r1, [r7, #0]
 80041f4:	2203      	movs	r2, #3
 80041f6:	4620      	mov	r0, r4
 80041f8:	f7fb fff2 	bl	80001e0 <memchr>
 80041fc:	b138      	cbz	r0, 800420e <_svfiprintf_r+0x142>
 80041fe:	2340      	movs	r3, #64	; 0x40
 8004200:	1b00      	subs	r0, r0, r4
 8004202:	fa03 f000 	lsl.w	r0, r3, r0
 8004206:	9b04      	ldr	r3, [sp, #16]
 8004208:	4303      	orrs	r3, r0
 800420a:	9304      	str	r3, [sp, #16]
 800420c:	3701      	adds	r7, #1
 800420e:	7839      	ldrb	r1, [r7, #0]
 8004210:	4825      	ldr	r0, [pc, #148]	; (80042a8 <_svfiprintf_r+0x1dc>)
 8004212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004216:	2206      	movs	r2, #6
 8004218:	1c7e      	adds	r6, r7, #1
 800421a:	f7fb ffe1 	bl	80001e0 <memchr>
 800421e:	2800      	cmp	r0, #0
 8004220:	d035      	beq.n	800428e <_svfiprintf_r+0x1c2>
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <_svfiprintf_r+0x1e0>)
 8004224:	b9fb      	cbnz	r3, 8004266 <_svfiprintf_r+0x19a>
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	3307      	adds	r3, #7
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	3308      	adds	r3, #8
 8004230:	9303      	str	r3, [sp, #12]
 8004232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004234:	444b      	add	r3, r9
 8004236:	9309      	str	r3, [sp, #36]	; 0x24
 8004238:	e76c      	b.n	8004114 <_svfiprintf_r+0x48>
 800423a:	fb00 3202 	mla	r2, r0, r2, r3
 800423e:	2101      	movs	r1, #1
 8004240:	e7a3      	b.n	800418a <_svfiprintf_r+0xbe>
 8004242:	2300      	movs	r3, #0
 8004244:	9305      	str	r3, [sp, #20]
 8004246:	4618      	mov	r0, r3
 8004248:	240a      	movs	r4, #10
 800424a:	460f      	mov	r7, r1
 800424c:	3101      	adds	r1, #1
 800424e:	783a      	ldrb	r2, [r7, #0]
 8004250:	3a30      	subs	r2, #48	; 0x30
 8004252:	2a09      	cmp	r2, #9
 8004254:	d903      	bls.n	800425e <_svfiprintf_r+0x192>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ca      	beq.n	80041f0 <_svfiprintf_r+0x124>
 800425a:	9005      	str	r0, [sp, #20]
 800425c:	e7c8      	b.n	80041f0 <_svfiprintf_r+0x124>
 800425e:	fb04 2000 	mla	r0, r4, r0, r2
 8004262:	2301      	movs	r3, #1
 8004264:	e7f1      	b.n	800424a <_svfiprintf_r+0x17e>
 8004266:	ab03      	add	r3, sp, #12
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	462a      	mov	r2, r5
 800426c:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <_svfiprintf_r+0x1e4>)
 800426e:	a904      	add	r1, sp, #16
 8004270:	4640      	mov	r0, r8
 8004272:	f3af 8000 	nop.w
 8004276:	f1b0 3fff 	cmp.w	r0, #4294967295
 800427a:	4681      	mov	r9, r0
 800427c:	d1d9      	bne.n	8004232 <_svfiprintf_r+0x166>
 800427e:	89ab      	ldrh	r3, [r5, #12]
 8004280:	065b      	lsls	r3, r3, #25
 8004282:	f53f af38 	bmi.w	80040f6 <_svfiprintf_r+0x2a>
 8004286:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004288:	b01d      	add	sp, #116	; 0x74
 800428a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428e:	ab03      	add	r3, sp, #12
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	462a      	mov	r2, r5
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <_svfiprintf_r+0x1e4>)
 8004296:	a904      	add	r1, sp, #16
 8004298:	4640      	mov	r0, r8
 800429a:	f000 f881 	bl	80043a0 <_printf_i>
 800429e:	e7ea      	b.n	8004276 <_svfiprintf_r+0x1aa>
 80042a0:	080048bb 	.word	0x080048bb
 80042a4:	080048c1 	.word	0x080048c1
 80042a8:	080048c5 	.word	0x080048c5
 80042ac:	00000000 	.word	0x00000000
 80042b0:	08004015 	.word	0x08004015

080042b4 <_printf_common>:
 80042b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b8:	4691      	mov	r9, r2
 80042ba:	461f      	mov	r7, r3
 80042bc:	688a      	ldr	r2, [r1, #8]
 80042be:	690b      	ldr	r3, [r1, #16]
 80042c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042c4:	4293      	cmp	r3, r2
 80042c6:	bfb8      	it	lt
 80042c8:	4613      	movlt	r3, r2
 80042ca:	f8c9 3000 	str.w	r3, [r9]
 80042ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042d2:	4606      	mov	r6, r0
 80042d4:	460c      	mov	r4, r1
 80042d6:	b112      	cbz	r2, 80042de <_printf_common+0x2a>
 80042d8:	3301      	adds	r3, #1
 80042da:	f8c9 3000 	str.w	r3, [r9]
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	0699      	lsls	r1, r3, #26
 80042e2:	bf42      	ittt	mi
 80042e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80042e8:	3302      	addmi	r3, #2
 80042ea:	f8c9 3000 	strmi.w	r3, [r9]
 80042ee:	6825      	ldr	r5, [r4, #0]
 80042f0:	f015 0506 	ands.w	r5, r5, #6
 80042f4:	d107      	bne.n	8004306 <_printf_common+0x52>
 80042f6:	f104 0a19 	add.w	sl, r4, #25
 80042fa:	68e3      	ldr	r3, [r4, #12]
 80042fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	429d      	cmp	r5, r3
 8004304:	db29      	blt.n	800435a <_printf_common+0xa6>
 8004306:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	3300      	adds	r3, #0
 800430e:	bf18      	it	ne
 8004310:	2301      	movne	r3, #1
 8004312:	0692      	lsls	r2, r2, #26
 8004314:	d42e      	bmi.n	8004374 <_printf_common+0xc0>
 8004316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800431a:	4639      	mov	r1, r7
 800431c:	4630      	mov	r0, r6
 800431e:	47c0      	blx	r8
 8004320:	3001      	adds	r0, #1
 8004322:	d021      	beq.n	8004368 <_printf_common+0xb4>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	68e5      	ldr	r5, [r4, #12]
 8004328:	f8d9 2000 	ldr.w	r2, [r9]
 800432c:	f003 0306 	and.w	r3, r3, #6
 8004330:	2b04      	cmp	r3, #4
 8004332:	bf08      	it	eq
 8004334:	1aad      	subeq	r5, r5, r2
 8004336:	68a3      	ldr	r3, [r4, #8]
 8004338:	6922      	ldr	r2, [r4, #16]
 800433a:	bf0c      	ite	eq
 800433c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004340:	2500      	movne	r5, #0
 8004342:	4293      	cmp	r3, r2
 8004344:	bfc4      	itt	gt
 8004346:	1a9b      	subgt	r3, r3, r2
 8004348:	18ed      	addgt	r5, r5, r3
 800434a:	f04f 0900 	mov.w	r9, #0
 800434e:	341a      	adds	r4, #26
 8004350:	454d      	cmp	r5, r9
 8004352:	d11b      	bne.n	800438c <_printf_common+0xd8>
 8004354:	2000      	movs	r0, #0
 8004356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800435a:	2301      	movs	r3, #1
 800435c:	4652      	mov	r2, sl
 800435e:	4639      	mov	r1, r7
 8004360:	4630      	mov	r0, r6
 8004362:	47c0      	blx	r8
 8004364:	3001      	adds	r0, #1
 8004366:	d103      	bne.n	8004370 <_printf_common+0xbc>
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004370:	3501      	adds	r5, #1
 8004372:	e7c2      	b.n	80042fa <_printf_common+0x46>
 8004374:	18e1      	adds	r1, r4, r3
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	2030      	movs	r0, #48	; 0x30
 800437a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800437e:	4422      	add	r2, r4
 8004380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004388:	3302      	adds	r3, #2
 800438a:	e7c4      	b.n	8004316 <_printf_common+0x62>
 800438c:	2301      	movs	r3, #1
 800438e:	4622      	mov	r2, r4
 8004390:	4639      	mov	r1, r7
 8004392:	4630      	mov	r0, r6
 8004394:	47c0      	blx	r8
 8004396:	3001      	adds	r0, #1
 8004398:	d0e6      	beq.n	8004368 <_printf_common+0xb4>
 800439a:	f109 0901 	add.w	r9, r9, #1
 800439e:	e7d7      	b.n	8004350 <_printf_common+0x9c>

080043a0 <_printf_i>:
 80043a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043a4:	4617      	mov	r7, r2
 80043a6:	7e0a      	ldrb	r2, [r1, #24]
 80043a8:	b085      	sub	sp, #20
 80043aa:	2a6e      	cmp	r2, #110	; 0x6e
 80043ac:	4698      	mov	r8, r3
 80043ae:	4606      	mov	r6, r0
 80043b0:	460c      	mov	r4, r1
 80043b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043b4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80043b8:	f000 80bc 	beq.w	8004534 <_printf_i+0x194>
 80043bc:	d81a      	bhi.n	80043f4 <_printf_i+0x54>
 80043be:	2a63      	cmp	r2, #99	; 0x63
 80043c0:	d02e      	beq.n	8004420 <_printf_i+0x80>
 80043c2:	d80a      	bhi.n	80043da <_printf_i+0x3a>
 80043c4:	2a00      	cmp	r2, #0
 80043c6:	f000 80c8 	beq.w	800455a <_printf_i+0x1ba>
 80043ca:	2a58      	cmp	r2, #88	; 0x58
 80043cc:	f000 808a 	beq.w	80044e4 <_printf_i+0x144>
 80043d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80043d8:	e02a      	b.n	8004430 <_printf_i+0x90>
 80043da:	2a64      	cmp	r2, #100	; 0x64
 80043dc:	d001      	beq.n	80043e2 <_printf_i+0x42>
 80043de:	2a69      	cmp	r2, #105	; 0x69
 80043e0:	d1f6      	bne.n	80043d0 <_printf_i+0x30>
 80043e2:	6821      	ldr	r1, [r4, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80043ea:	d023      	beq.n	8004434 <_printf_i+0x94>
 80043ec:	1d11      	adds	r1, r2, #4
 80043ee:	6019      	str	r1, [r3, #0]
 80043f0:	6813      	ldr	r3, [r2, #0]
 80043f2:	e027      	b.n	8004444 <_printf_i+0xa4>
 80043f4:	2a73      	cmp	r2, #115	; 0x73
 80043f6:	f000 80b4 	beq.w	8004562 <_printf_i+0x1c2>
 80043fa:	d808      	bhi.n	800440e <_printf_i+0x6e>
 80043fc:	2a6f      	cmp	r2, #111	; 0x6f
 80043fe:	d02a      	beq.n	8004456 <_printf_i+0xb6>
 8004400:	2a70      	cmp	r2, #112	; 0x70
 8004402:	d1e5      	bne.n	80043d0 <_printf_i+0x30>
 8004404:	680a      	ldr	r2, [r1, #0]
 8004406:	f042 0220 	orr.w	r2, r2, #32
 800440a:	600a      	str	r2, [r1, #0]
 800440c:	e003      	b.n	8004416 <_printf_i+0x76>
 800440e:	2a75      	cmp	r2, #117	; 0x75
 8004410:	d021      	beq.n	8004456 <_printf_i+0xb6>
 8004412:	2a78      	cmp	r2, #120	; 0x78
 8004414:	d1dc      	bne.n	80043d0 <_printf_i+0x30>
 8004416:	2278      	movs	r2, #120	; 0x78
 8004418:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800441c:	496e      	ldr	r1, [pc, #440]	; (80045d8 <_printf_i+0x238>)
 800441e:	e064      	b.n	80044ea <_printf_i+0x14a>
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004426:	1d11      	adds	r1, r2, #4
 8004428:	6019      	str	r1, [r3, #0]
 800442a:	6813      	ldr	r3, [r2, #0]
 800442c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004430:	2301      	movs	r3, #1
 8004432:	e0a3      	b.n	800457c <_printf_i+0x1dc>
 8004434:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004438:	f102 0104 	add.w	r1, r2, #4
 800443c:	6019      	str	r1, [r3, #0]
 800443e:	d0d7      	beq.n	80043f0 <_printf_i+0x50>
 8004440:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004444:	2b00      	cmp	r3, #0
 8004446:	da03      	bge.n	8004450 <_printf_i+0xb0>
 8004448:	222d      	movs	r2, #45	; 0x2d
 800444a:	425b      	negs	r3, r3
 800444c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004450:	4962      	ldr	r1, [pc, #392]	; (80045dc <_printf_i+0x23c>)
 8004452:	220a      	movs	r2, #10
 8004454:	e017      	b.n	8004486 <_printf_i+0xe6>
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800445e:	d003      	beq.n	8004468 <_printf_i+0xc8>
 8004460:	1d08      	adds	r0, r1, #4
 8004462:	6018      	str	r0, [r3, #0]
 8004464:	680b      	ldr	r3, [r1, #0]
 8004466:	e006      	b.n	8004476 <_printf_i+0xd6>
 8004468:	f010 0f40 	tst.w	r0, #64	; 0x40
 800446c:	f101 0004 	add.w	r0, r1, #4
 8004470:	6018      	str	r0, [r3, #0]
 8004472:	d0f7      	beq.n	8004464 <_printf_i+0xc4>
 8004474:	880b      	ldrh	r3, [r1, #0]
 8004476:	4959      	ldr	r1, [pc, #356]	; (80045dc <_printf_i+0x23c>)
 8004478:	2a6f      	cmp	r2, #111	; 0x6f
 800447a:	bf14      	ite	ne
 800447c:	220a      	movne	r2, #10
 800447e:	2208      	moveq	r2, #8
 8004480:	2000      	movs	r0, #0
 8004482:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004486:	6865      	ldr	r5, [r4, #4]
 8004488:	60a5      	str	r5, [r4, #8]
 800448a:	2d00      	cmp	r5, #0
 800448c:	f2c0 809c 	blt.w	80045c8 <_printf_i+0x228>
 8004490:	6820      	ldr	r0, [r4, #0]
 8004492:	f020 0004 	bic.w	r0, r0, #4
 8004496:	6020      	str	r0, [r4, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d13f      	bne.n	800451c <_printf_i+0x17c>
 800449c:	2d00      	cmp	r5, #0
 800449e:	f040 8095 	bne.w	80045cc <_printf_i+0x22c>
 80044a2:	4675      	mov	r5, lr
 80044a4:	2a08      	cmp	r2, #8
 80044a6:	d10b      	bne.n	80044c0 <_printf_i+0x120>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	07da      	lsls	r2, r3, #31
 80044ac:	d508      	bpl.n	80044c0 <_printf_i+0x120>
 80044ae:	6923      	ldr	r3, [r4, #16]
 80044b0:	6862      	ldr	r2, [r4, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bfde      	ittt	le
 80044b6:	2330      	movle	r3, #48	; 0x30
 80044b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044c0:	ebae 0305 	sub.w	r3, lr, r5
 80044c4:	6123      	str	r3, [r4, #16]
 80044c6:	f8cd 8000 	str.w	r8, [sp]
 80044ca:	463b      	mov	r3, r7
 80044cc:	aa03      	add	r2, sp, #12
 80044ce:	4621      	mov	r1, r4
 80044d0:	4630      	mov	r0, r6
 80044d2:	f7ff feef 	bl	80042b4 <_printf_common>
 80044d6:	3001      	adds	r0, #1
 80044d8:	d155      	bne.n	8004586 <_printf_i+0x1e6>
 80044da:	f04f 30ff 	mov.w	r0, #4294967295
 80044de:	b005      	add	sp, #20
 80044e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80044e8:	493c      	ldr	r1, [pc, #240]	; (80045dc <_printf_i+0x23c>)
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044f2:	f100 0504 	add.w	r5, r0, #4
 80044f6:	601d      	str	r5, [r3, #0]
 80044f8:	d001      	beq.n	80044fe <_printf_i+0x15e>
 80044fa:	6803      	ldr	r3, [r0, #0]
 80044fc:	e002      	b.n	8004504 <_printf_i+0x164>
 80044fe:	0655      	lsls	r5, r2, #25
 8004500:	d5fb      	bpl.n	80044fa <_printf_i+0x15a>
 8004502:	8803      	ldrh	r3, [r0, #0]
 8004504:	07d0      	lsls	r0, r2, #31
 8004506:	bf44      	itt	mi
 8004508:	f042 0220 	orrmi.w	r2, r2, #32
 800450c:	6022      	strmi	r2, [r4, #0]
 800450e:	b91b      	cbnz	r3, 8004518 <_printf_i+0x178>
 8004510:	6822      	ldr	r2, [r4, #0]
 8004512:	f022 0220 	bic.w	r2, r2, #32
 8004516:	6022      	str	r2, [r4, #0]
 8004518:	2210      	movs	r2, #16
 800451a:	e7b1      	b.n	8004480 <_printf_i+0xe0>
 800451c:	4675      	mov	r5, lr
 800451e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004522:	fb02 3310 	mls	r3, r2, r0, r3
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800452c:	4603      	mov	r3, r0
 800452e:	2800      	cmp	r0, #0
 8004530:	d1f5      	bne.n	800451e <_printf_i+0x17e>
 8004532:	e7b7      	b.n	80044a4 <_printf_i+0x104>
 8004534:	6808      	ldr	r0, [r1, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	6949      	ldr	r1, [r1, #20]
 800453a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800453e:	d004      	beq.n	800454a <_printf_i+0x1aa>
 8004540:	1d10      	adds	r0, r2, #4
 8004542:	6018      	str	r0, [r3, #0]
 8004544:	6813      	ldr	r3, [r2, #0]
 8004546:	6019      	str	r1, [r3, #0]
 8004548:	e007      	b.n	800455a <_printf_i+0x1ba>
 800454a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800454e:	f102 0004 	add.w	r0, r2, #4
 8004552:	6018      	str	r0, [r3, #0]
 8004554:	6813      	ldr	r3, [r2, #0]
 8004556:	d0f6      	beq.n	8004546 <_printf_i+0x1a6>
 8004558:	8019      	strh	r1, [r3, #0]
 800455a:	2300      	movs	r3, #0
 800455c:	6123      	str	r3, [r4, #16]
 800455e:	4675      	mov	r5, lr
 8004560:	e7b1      	b.n	80044c6 <_printf_i+0x126>
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	1d11      	adds	r1, r2, #4
 8004566:	6019      	str	r1, [r3, #0]
 8004568:	6815      	ldr	r5, [r2, #0]
 800456a:	6862      	ldr	r2, [r4, #4]
 800456c:	2100      	movs	r1, #0
 800456e:	4628      	mov	r0, r5
 8004570:	f7fb fe36 	bl	80001e0 <memchr>
 8004574:	b108      	cbz	r0, 800457a <_printf_i+0x1da>
 8004576:	1b40      	subs	r0, r0, r5
 8004578:	6060      	str	r0, [r4, #4]
 800457a:	6863      	ldr	r3, [r4, #4]
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	2300      	movs	r3, #0
 8004580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004584:	e79f      	b.n	80044c6 <_printf_i+0x126>
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	462a      	mov	r2, r5
 800458a:	4639      	mov	r1, r7
 800458c:	4630      	mov	r0, r6
 800458e:	47c0      	blx	r8
 8004590:	3001      	adds	r0, #1
 8004592:	d0a2      	beq.n	80044da <_printf_i+0x13a>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	079b      	lsls	r3, r3, #30
 8004598:	d507      	bpl.n	80045aa <_printf_i+0x20a>
 800459a:	2500      	movs	r5, #0
 800459c:	f104 0919 	add.w	r9, r4, #25
 80045a0:	68e3      	ldr	r3, [r4, #12]
 80045a2:	9a03      	ldr	r2, [sp, #12]
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	429d      	cmp	r5, r3
 80045a8:	db05      	blt.n	80045b6 <_printf_i+0x216>
 80045aa:	68e0      	ldr	r0, [r4, #12]
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	4298      	cmp	r0, r3
 80045b0:	bfb8      	it	lt
 80045b2:	4618      	movlt	r0, r3
 80045b4:	e793      	b.n	80044de <_printf_i+0x13e>
 80045b6:	2301      	movs	r3, #1
 80045b8:	464a      	mov	r2, r9
 80045ba:	4639      	mov	r1, r7
 80045bc:	4630      	mov	r0, r6
 80045be:	47c0      	blx	r8
 80045c0:	3001      	adds	r0, #1
 80045c2:	d08a      	beq.n	80044da <_printf_i+0x13a>
 80045c4:	3501      	adds	r5, #1
 80045c6:	e7eb      	b.n	80045a0 <_printf_i+0x200>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1a7      	bne.n	800451c <_printf_i+0x17c>
 80045cc:	780b      	ldrb	r3, [r1, #0]
 80045ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d6:	e765      	b.n	80044a4 <_printf_i+0x104>
 80045d8:	080048dd 	.word	0x080048dd
 80045dc:	080048cc 	.word	0x080048cc

080045e0 <memmove>:
 80045e0:	4288      	cmp	r0, r1
 80045e2:	b510      	push	{r4, lr}
 80045e4:	eb01 0302 	add.w	r3, r1, r2
 80045e8:	d803      	bhi.n	80045f2 <memmove+0x12>
 80045ea:	1e42      	subs	r2, r0, #1
 80045ec:	4299      	cmp	r1, r3
 80045ee:	d10c      	bne.n	800460a <memmove+0x2a>
 80045f0:	bd10      	pop	{r4, pc}
 80045f2:	4298      	cmp	r0, r3
 80045f4:	d2f9      	bcs.n	80045ea <memmove+0xa>
 80045f6:	1881      	adds	r1, r0, r2
 80045f8:	1ad2      	subs	r2, r2, r3
 80045fa:	42d3      	cmn	r3, r2
 80045fc:	d100      	bne.n	8004600 <memmove+0x20>
 80045fe:	bd10      	pop	{r4, pc}
 8004600:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004604:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004608:	e7f7      	b.n	80045fa <memmove+0x1a>
 800460a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004612:	e7eb      	b.n	80045ec <memmove+0xc>

08004614 <_free_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	4605      	mov	r5, r0
 8004618:	2900      	cmp	r1, #0
 800461a:	d045      	beq.n	80046a8 <_free_r+0x94>
 800461c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004620:	1f0c      	subs	r4, r1, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfb8      	it	lt
 8004626:	18e4      	addlt	r4, r4, r3
 8004628:	f000 f8d6 	bl	80047d8 <__malloc_lock>
 800462c:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <_free_r+0x98>)
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	4610      	mov	r0, r2
 8004632:	b933      	cbnz	r3, 8004642 <_free_r+0x2e>
 8004634:	6063      	str	r3, [r4, #4]
 8004636:	6014      	str	r4, [r2, #0]
 8004638:	4628      	mov	r0, r5
 800463a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800463e:	f000 b8cc 	b.w	80047da <__malloc_unlock>
 8004642:	42a3      	cmp	r3, r4
 8004644:	d90c      	bls.n	8004660 <_free_r+0x4c>
 8004646:	6821      	ldr	r1, [r4, #0]
 8004648:	1862      	adds	r2, r4, r1
 800464a:	4293      	cmp	r3, r2
 800464c:	bf04      	itt	eq
 800464e:	681a      	ldreq	r2, [r3, #0]
 8004650:	685b      	ldreq	r3, [r3, #4]
 8004652:	6063      	str	r3, [r4, #4]
 8004654:	bf04      	itt	eq
 8004656:	1852      	addeq	r2, r2, r1
 8004658:	6022      	streq	r2, [r4, #0]
 800465a:	6004      	str	r4, [r0, #0]
 800465c:	e7ec      	b.n	8004638 <_free_r+0x24>
 800465e:	4613      	mov	r3, r2
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	b10a      	cbz	r2, 8004668 <_free_r+0x54>
 8004664:	42a2      	cmp	r2, r4
 8004666:	d9fa      	bls.n	800465e <_free_r+0x4a>
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	1858      	adds	r0, r3, r1
 800466c:	42a0      	cmp	r0, r4
 800466e:	d10b      	bne.n	8004688 <_free_r+0x74>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	4401      	add	r1, r0
 8004674:	1858      	adds	r0, r3, r1
 8004676:	4282      	cmp	r2, r0
 8004678:	6019      	str	r1, [r3, #0]
 800467a:	d1dd      	bne.n	8004638 <_free_r+0x24>
 800467c:	6810      	ldr	r0, [r2, #0]
 800467e:	6852      	ldr	r2, [r2, #4]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	4401      	add	r1, r0
 8004684:	6019      	str	r1, [r3, #0]
 8004686:	e7d7      	b.n	8004638 <_free_r+0x24>
 8004688:	d902      	bls.n	8004690 <_free_r+0x7c>
 800468a:	230c      	movs	r3, #12
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	e7d3      	b.n	8004638 <_free_r+0x24>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	1821      	adds	r1, r4, r0
 8004694:	428a      	cmp	r2, r1
 8004696:	bf04      	itt	eq
 8004698:	6811      	ldreq	r1, [r2, #0]
 800469a:	6852      	ldreq	r2, [r2, #4]
 800469c:	6062      	str	r2, [r4, #4]
 800469e:	bf04      	itt	eq
 80046a0:	1809      	addeq	r1, r1, r0
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	605c      	str	r4, [r3, #4]
 80046a6:	e7c7      	b.n	8004638 <_free_r+0x24>
 80046a8:	bd38      	pop	{r3, r4, r5, pc}
 80046aa:	bf00      	nop
 80046ac:	20000410 	.word	0x20000410

080046b0 <_malloc_r>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	1ccd      	adds	r5, r1, #3
 80046b4:	f025 0503 	bic.w	r5, r5, #3
 80046b8:	3508      	adds	r5, #8
 80046ba:	2d0c      	cmp	r5, #12
 80046bc:	bf38      	it	cc
 80046be:	250c      	movcc	r5, #12
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	4606      	mov	r6, r0
 80046c4:	db01      	blt.n	80046ca <_malloc_r+0x1a>
 80046c6:	42a9      	cmp	r1, r5
 80046c8:	d903      	bls.n	80046d2 <_malloc_r+0x22>
 80046ca:	230c      	movs	r3, #12
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	2000      	movs	r0, #0
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	f000 f881 	bl	80047d8 <__malloc_lock>
 80046d6:	4a23      	ldr	r2, [pc, #140]	; (8004764 <_malloc_r+0xb4>)
 80046d8:	6814      	ldr	r4, [r2, #0]
 80046da:	4621      	mov	r1, r4
 80046dc:	b991      	cbnz	r1, 8004704 <_malloc_r+0x54>
 80046de:	4c22      	ldr	r4, [pc, #136]	; (8004768 <_malloc_r+0xb8>)
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	b91b      	cbnz	r3, 80046ec <_malloc_r+0x3c>
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 f867 	bl	80047b8 <_sbrk_r>
 80046ea:	6020      	str	r0, [r4, #0]
 80046ec:	4629      	mov	r1, r5
 80046ee:	4630      	mov	r0, r6
 80046f0:	f000 f862 	bl	80047b8 <_sbrk_r>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d126      	bne.n	8004746 <_malloc_r+0x96>
 80046f8:	230c      	movs	r3, #12
 80046fa:	6033      	str	r3, [r6, #0]
 80046fc:	4630      	mov	r0, r6
 80046fe:	f000 f86c 	bl	80047da <__malloc_unlock>
 8004702:	e7e4      	b.n	80046ce <_malloc_r+0x1e>
 8004704:	680b      	ldr	r3, [r1, #0]
 8004706:	1b5b      	subs	r3, r3, r5
 8004708:	d41a      	bmi.n	8004740 <_malloc_r+0x90>
 800470a:	2b0b      	cmp	r3, #11
 800470c:	d90f      	bls.n	800472e <_malloc_r+0x7e>
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	50cd      	str	r5, [r1, r3]
 8004712:	18cc      	adds	r4, r1, r3
 8004714:	4630      	mov	r0, r6
 8004716:	f000 f860 	bl	80047da <__malloc_unlock>
 800471a:	f104 000b 	add.w	r0, r4, #11
 800471e:	1d23      	adds	r3, r4, #4
 8004720:	f020 0007 	bic.w	r0, r0, #7
 8004724:	1ac3      	subs	r3, r0, r3
 8004726:	d01b      	beq.n	8004760 <_malloc_r+0xb0>
 8004728:	425a      	negs	r2, r3
 800472a:	50e2      	str	r2, [r4, r3]
 800472c:	bd70      	pop	{r4, r5, r6, pc}
 800472e:	428c      	cmp	r4, r1
 8004730:	bf0d      	iteet	eq
 8004732:	6863      	ldreq	r3, [r4, #4]
 8004734:	684b      	ldrne	r3, [r1, #4]
 8004736:	6063      	strne	r3, [r4, #4]
 8004738:	6013      	streq	r3, [r2, #0]
 800473a:	bf18      	it	ne
 800473c:	460c      	movne	r4, r1
 800473e:	e7e9      	b.n	8004714 <_malloc_r+0x64>
 8004740:	460c      	mov	r4, r1
 8004742:	6849      	ldr	r1, [r1, #4]
 8004744:	e7ca      	b.n	80046dc <_malloc_r+0x2c>
 8004746:	1cc4      	adds	r4, r0, #3
 8004748:	f024 0403 	bic.w	r4, r4, #3
 800474c:	42a0      	cmp	r0, r4
 800474e:	d005      	beq.n	800475c <_malloc_r+0xac>
 8004750:	1a21      	subs	r1, r4, r0
 8004752:	4630      	mov	r0, r6
 8004754:	f000 f830 	bl	80047b8 <_sbrk_r>
 8004758:	3001      	adds	r0, #1
 800475a:	d0cd      	beq.n	80046f8 <_malloc_r+0x48>
 800475c:	6025      	str	r5, [r4, #0]
 800475e:	e7d9      	b.n	8004714 <_malloc_r+0x64>
 8004760:	bd70      	pop	{r4, r5, r6, pc}
 8004762:	bf00      	nop
 8004764:	20000410 	.word	0x20000410
 8004768:	20000414 	.word	0x20000414

0800476c <_realloc_r>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	4607      	mov	r7, r0
 8004770:	4614      	mov	r4, r2
 8004772:	460e      	mov	r6, r1
 8004774:	b921      	cbnz	r1, 8004780 <_realloc_r+0x14>
 8004776:	4611      	mov	r1, r2
 8004778:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800477c:	f7ff bf98 	b.w	80046b0 <_malloc_r>
 8004780:	b922      	cbnz	r2, 800478c <_realloc_r+0x20>
 8004782:	f7ff ff47 	bl	8004614 <_free_r>
 8004786:	4625      	mov	r5, r4
 8004788:	4628      	mov	r0, r5
 800478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800478c:	f000 f826 	bl	80047dc <_malloc_usable_size_r>
 8004790:	4284      	cmp	r4, r0
 8004792:	d90f      	bls.n	80047b4 <_realloc_r+0x48>
 8004794:	4621      	mov	r1, r4
 8004796:	4638      	mov	r0, r7
 8004798:	f7ff ff8a 	bl	80046b0 <_malloc_r>
 800479c:	4605      	mov	r5, r0
 800479e:	2800      	cmp	r0, #0
 80047a0:	d0f2      	beq.n	8004788 <_realloc_r+0x1c>
 80047a2:	4631      	mov	r1, r6
 80047a4:	4622      	mov	r2, r4
 80047a6:	f7ff fbf5 	bl	8003f94 <memcpy>
 80047aa:	4631      	mov	r1, r6
 80047ac:	4638      	mov	r0, r7
 80047ae:	f7ff ff31 	bl	8004614 <_free_r>
 80047b2:	e7e9      	b.n	8004788 <_realloc_r+0x1c>
 80047b4:	4635      	mov	r5, r6
 80047b6:	e7e7      	b.n	8004788 <_realloc_r+0x1c>

080047b8 <_sbrk_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4c06      	ldr	r4, [pc, #24]	; (80047d4 <_sbrk_r+0x1c>)
 80047bc:	2300      	movs	r3, #0
 80047be:	4605      	mov	r5, r0
 80047c0:	4608      	mov	r0, r1
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	f7ff f92e 	bl	8003a24 <_sbrk>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_sbrk_r+0x1a>
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_sbrk_r+0x1a>
 80047d0:	602b      	str	r3, [r5, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	20001880 	.word	0x20001880

080047d8 <__malloc_lock>:
 80047d8:	4770      	bx	lr

080047da <__malloc_unlock>:
 80047da:	4770      	bx	lr

080047dc <_malloc_usable_size_r>:
 80047dc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80047e0:	2800      	cmp	r0, #0
 80047e2:	f1a0 0004 	sub.w	r0, r0, #4
 80047e6:	bfbc      	itt	lt
 80047e8:	580b      	ldrlt	r3, [r1, r0]
 80047ea:	18c0      	addlt	r0, r0, r3
 80047ec:	4770      	bx	lr
	...

080047f0 <_init>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr

080047fc <_fini>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr
